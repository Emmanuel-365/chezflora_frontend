--- all_files.py ---
import os

def copier_contenu_avec_chemins(dossier_source, fichier_sortie):
    # Ouvre le fichier de sortie en mode écriture
    with open(fichier_sortie, 'w', encoding='utf-8') as sortie:
        # Parcourt récursivement tous les fichiers et sous-dossiers
        for racine, dossiers, fichiers in os.walk(dossier_source):
            for fichier in fichiers:
                # Construit le chemin complet du fichier
                chemin_complet = os.path.join(racine, fichier)
                # Calcule le chemin relatif par rapport au dossier source
                chemin_relatif = os.path.relpath(chemin_complet, dossier_source)
                
                # Écrit le chemin relatif dans le fichier de sortie
                sortie.write(f"--- {chemin_relatif} ---\n")
                
                try:
                    # Lit et écrit le contenu du fichier
                    with open(chemin_complet, 'r', encoding='utf-8') as f:
                        contenu = f.read()
                        sortie.write(contenu)
                        sortie.write("\n\n")  # Ajoute une séparation entre les contenus
                except Exception as e:
                    sortie.write(f"(Erreur lors de la lecture : {str(e)})\n\n")

# Exemple d'utilisation
dossier_source = "D:/Users/Emmanuel/Documents/concours/code/frontend/chezflora-frontend/src"  # Ton dossier source
fichier_sortie = "all_fronted_files"  # Nom du fichier de sortie
copier_contenu_avec_chemins(dossier_source, fichier_sortie)
print(f"Le contenu a été copié dans {fichier_sortie}")

--- all_fronted_files ---


--- App.css ---
#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}


--- App.tsx ---
import React from 'react';
import { BrowserRouter, Routes, Route } from 'react-router-dom';
import HomePage from './pages/HomePage';
import ProductsPage from './pages/ProductsPage';
import ProductDetailPage from './pages/ProductDetailPage';
import CartPage from './pages/CartPage';
import AuthPage from './pages/AuthPage';
import ProtectedRoute from './components/ProtectedRoute';
import OtpPage from './pages/OtpPage';
import OrdersPage from './pages/OrdersPage';
import AccountPage from './pages/AccountPage';
import CheckoutPage from './pages/CheckoutPage';
import ServicesPage from './pages/ServicesPage';
import ServiceDetailPage from './pages/ServiceDetailPage';
import DevisPage from './pages/DevisPage';
import AbonnementsPage from './pages/AbonnementsPage';
import AteliersPage from './pages/AteliersPage';
import WishlistPage from './pages/WishlistPage';
import ArticlesPage from './pages/ArticlesPage';
import RealisationsPage from './pages/RealisationsPage';
import ContactPage from './pages/ContactPage';
import AboutPage from './pages/AboutPage';
import ArticleDetailPage from './pages/ArticleDetailPage';
import AdminDashboardPage from './pages/AdminDashboardPage';
import AdminUsersPage from './pages/AdminUsersPage';
import AdminUserStatsPage from './pages/AdminUserStatsPage';
import AdminUserBansPage from './pages/AdminUserBansPage';
import AdminWishlistsPage from './pages/AdminWishListsPage';
import AdminAddressesPage from './pages/AdminAddressesPage';
import AdminCommandsPage from './pages/AdminCommandsPage';
import AdminCommandLinesPage from './pages/AdminCommandLinesPage';
import AdminCartsPage from './pages/AdminCartsPage';
import AdminCommandsRevenuePage from './pages/AdminCommandsRevenuePage';
import AdminCommandsPendingPage from './pages/AdminCommandsPendingPage';
import AdminProductsPage from './pages/AdminProductsPage';
import AdminCategoriesPage from './pages/AdminCategoriesPage';
import AdminProductsStatsPage from './pages/AdminProductsStatsPage';
import AdminPromotionsPage from './pages/AdminPromotionsPage';
import AdminLowStockPage from './pages/AdminLowStockPage';
import AdminAteliersPage from './pages/AdminAteliersPage';
import AdminAteliersStatsPage from './pages/AdminAteliersStatsPage';
import AdminAteliersParticipantsPage from './pages/AdminAteliersParticipantsPage';
import AdminServicesPage from './pages/AdminServicesPage';
import AdminDevisPage from './pages/AdminDevisPage';
import AdminAbonnementsPage from './pages/AdminAbonnementsPage';
import AdminArticlesPage from './pages/AdminArticlesPage';
import AdminCommentairesPage from './pages/AdminCommentairesPage';
import AdminRealisationsPage from './pages/AdminRealisationsPage';
import AdminPaiementsPage from './pages/AdminPayementsPage';
import AdminParametresPage from './pages/AdminParametresPage';

const App: React.FC = () => (
  <BrowserRouter>
    <Routes>
      <Route path="/admin" element={<ProtectedRoute><AdminDashboardPage /></ProtectedRoute>} />   
      <Route path="/admin/users" element={<ProtectedRoute><AdminUsersPage /></ProtectedRoute>} />
      <Route path="/admin/users/stats" element={<ProtectedRoute><AdminUserStatsPage /></ProtectedRoute>} />
      <Route path="/admin/users/bans" element={<ProtectedRoute><AdminUserBansPage /></ProtectedRoute>} />
      <Route path="/admin/wishlists" element={<ProtectedRoute><AdminWishlistsPage /></ProtectedRoute>} />
      <Route path="/admin/addresses" element={<ProtectedRoute><AdminAddressesPage /></ProtectedRoute>} />

      <Route path="/admin/commands" element={<ProtectedRoute><AdminCommandsPage /></ProtectedRoute>} />
      <Route path="/admin/command-lines" element={<ProtectedRoute><AdminCommandLinesPage /></ProtectedRoute>} />
      <Route path="/admin/carts" element={<ProtectedRoute><AdminCartsPage /></ProtectedRoute>} />
      <Route path="/admin/commands/revenue" element={<ProtectedRoute><AdminCommandsRevenuePage /></ProtectedRoute>} />
      <Route path="/admin/commands/pending" element={<ProtectedRoute><AdminCommandsPendingPage /></ProtectedRoute>} />

      <Route path="/admin/products" element={<ProtectedRoute><AdminProductsPage /></ProtectedRoute>} />
      <Route path="/admin/categories" element={<ProtectedRoute><AdminCategoriesPage /></ProtectedRoute>} />
      <Route path="/admin/products/stats" element={<ProtectedRoute><AdminProductsStatsPage /></ProtectedRoute>} />
      <Route path="/admin/promotions" element={<ProtectedRoute><AdminPromotionsPage /></ProtectedRoute>} />
      <Route path="/admin/products/low-stock" element={<ProtectedRoute><AdminLowStockPage /></ProtectedRoute>} />

      <Route path="/admin/ateliers" element={<ProtectedRoute><AdminAteliersPage /></ProtectedRoute>} />
      <Route path="/admin/ateliers/stats" element={<ProtectedRoute><AdminAteliersStatsPage /></ProtectedRoute>} />
      <Route path="/admin/ateliers/:atelierId/participants" element={<ProtectedRoute><AdminAteliersParticipantsPage /></ProtectedRoute>} />

      <Route path="/admin/services" element={<ProtectedRoute><AdminServicesPage /></ProtectedRoute>} />
      <Route path="/admin/devis" element={<ProtectedRoute><AdminDevisPage /></ProtectedRoute>} />
      <Route path="/admin/subscriptions" element={<ProtectedRoute><AdminAbonnementsPage /></ProtectedRoute>} />

      <Route path="/admin/articles" element={<ProtectedRoute><AdminArticlesPage /></ProtectedRoute>} />
      <Route path="/admin/comments" element={<ProtectedRoute><AdminCommentairesPage /></ProtectedRoute>} />
      <Route path="/admin/realisations" element={<ProtectedRoute><AdminRealisationsPage /></ProtectedRoute>} />

      <Route path="/admin/payments" element={<ProtectedRoute><AdminPaiementsPage /></ProtectedRoute>} />

      <Route path="/admin/settings/general" element={<ProtectedRoute><AdminParametresPage /></ProtectedRoute>} />

      <Route path="/" element={<HomePage />} />
      <Route path="/products" element={<ProductsPage />} />
      <Route path="/products/:id" element={<ProductDetailPage />} />
      <Route path="/services" element={<ServicesPage />} /> {/* Route publique */}
      <Route path="/services/:id" element={<ServiceDetailPage/>}/>
      <Route path="/blog" element={<ArticlesPage />} /> {/* Publique */}
      <Route path="/blog/:id" element={<ArticleDetailPage />} /> {/* Publique */}
      <Route path="/realisations" element={<RealisationsPage />} /> {/* Publique */}
      <Route path="/contact" element={<ContactPage />} />
      <Route path="/about" element={<AboutPage />} />
      <Route
        path="/cart"
        element={
          <ProtectedRoute>
            <CartPage />
          </ProtectedRoute>
        }
      />
      <Route
        path="/orders"
        element={
          <ProtectedRoute>
            <OrdersPage />
          </ProtectedRoute>
        }
      />
      <Route
        path="/account"
        element={
          <ProtectedRoute>
            <AccountPage />
          </ProtectedRoute>
        }
      />
      <Route
        path="/checkout"
        element={
          <ProtectedRoute>
            <CheckoutPage />
          </ProtectedRoute>
        }
      />
      <Route
        path="/devis"
        element={
          <ProtectedRoute>
            <DevisPage />
          </ProtectedRoute>
        }
      />

      <Route
        path="/abonnements"
        element={
          <ProtectedRoute>
            <AbonnementsPage />
          </ProtectedRoute>
        }
      />
      <Route
        path="/ateliers"
        element={<ProtectedRoute><AteliersPage /></ProtectedRoute>}
      />
      <Route path="/wishlist" element={<ProtectedRoute><WishlistPage /></ProtectedRoute>} />
      <Route path="/auth" element={<AuthPage />} />
      <Route path="/otp" element={<OtpPage />} />
    </Routes>
  </BrowserRouter>
);

export default App;

--- index.css ---
@tailwind base;
@tailwind components;
@tailwind utilities;

/* index.css */
html, body {
    margin: 0;
    padding: 0;
    height: 100%;
    background-color: #F9F5F0; /* lightBg par défaut */
  }
  
  .dark body {
    background-color: #2F2F2F; /* darkBg pour mode sombre */
  }

--- main.tsx ---
import React from 'react';
import ReactDOM from 'react-dom/client';
import { ThemeProvider } from '@mui/material/styles';
import theme from './theme/theme';
import App from './App';
import './index.css';

ReactDOM.createRoot(document.getElementById('root')!).render(
  <React.StrictMode>
    <ThemeProvider theme={theme}>
      <App />
    </ThemeProvider>
  </React.StrictMode>
);

--- vite-env.d.ts ---
/// <reference types="vite/client" />


--- assets\logo.png ---
(Erreur lors de la lecture : 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte)

--- assets\react.svg ---
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>

--- components\AdminLayout.tsx ---
"use client";

import React, { useState, useEffect, Suspense } from "react";
import { useLocation, useNavigate } from "react-router-dom";
import AdminSidebar from "../components/AdminSidebar";
import { Sun, Moon } from "lucide-react";

// Applique le thème immédiatement
const applyTheme = () => {
  const isDark = localStorage.getItem("theme") === "dark" || (!localStorage.getItem("theme") && window.matchMedia("(prefers-color-scheme: dark)").matches);
  if (isDark) {
    document.documentElement.classList.add("dark");
  } else {
    document.documentElement.classList.remove("dark");
  }
  return isDark;
};

const AdminLayout: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [isSidebarOpen, setIsSidebarOpen] = useState(() => {
    const savedState = localStorage.getItem("sidebarOpen");
    return savedState ? JSON.parse(savedState) : window.innerWidth >= 768;
  });
  const [isDesktop, setIsDesktop] = useState(window.innerWidth >= 768);
  const [isDarkMode, setIsDarkMode] = useState(applyTheme);
  const [isLoading, setIsLoading] = useState(false); // État de chargement
  const location = useLocation();
  const navigate = useNavigate();

  const toggleSidebar = () => {
    setIsSidebarOpen((prev) => {
      const newState = !prev;
      localStorage.setItem("sidebarOpen", JSON.stringify(newState));
      return newState;
    });
  };

  const toggleDarkMode = () => {
    setIsDarkMode((prev) => {
      const newMode = !prev;
      localStorage.setItem("theme", newMode ? "dark" : "light");
      if (newMode) {
        document.documentElement.classList.add("dark");
      } else {
        document.documentElement.classList.remove("dark");
      }
      return newMode;
    });
  };

  useEffect(() => {
    const handleResize = () => {
      const desktop = window.innerWidth >= 768;
      setIsDesktop(desktop);
    };

    window.addEventListener("resize", handleResize);
    handleResize();
    return () => window.removeEventListener("resize", handleResize);
  }, []);

  // Simule le chargement lors du changement de page
  useEffect(() => {
    setIsLoading(true);
    // Simule un délai de chargement (remplace par une vraie logique de fetch si besoin)
    const timer = setTimeout(() => {
      setIsLoading(false);
    }, 500); // Ajuste ce délai selon tes besoins réels

    return () => clearTimeout(timer);
  }, [location.pathname]); // Déclenche à chaque changement de route

  const contentMargin = isSidebarOpen ? "ml-[250px]" : isDesktop ? "ml-[80px]" : "ml-[40px]";

  return (
    <div className="flex min-h-screen">
      <div
        className={`fixed top-0 left-0 h-full transition-transform duration-300 ease-in-out z-50 ${
          isSidebarOpen ? "translate-x-0" : "-translate-x-full"
        } md:translate-x-0`}
      >
        <AdminSidebar isOpen={isSidebarOpen} toggleSidebar={toggleSidebar} />
      </div>

      <div className="flex-1 w-full transition-all duration-300">
        <div className={`min-h-screen ${contentMargin} transition-all duration-300 bg-lightBg dark:bg-darkBg`}>
          <div className="flex justify-end p-4">
            <button
              onClick={toggleDarkMode}
              className="p-2 rounded-full bg-cream-beige dark:bg-gray-700 text-gray-800 dark:text-gray-200 hover:bg-gray-300 dark:hover:bg-gray-600"
            >
              {isDarkMode ? <Sun size={20} /> : <Moon size={20} />}
            </button>
          </div>
          {/* Affiche l’ancienne page ou un loader pendant le chargement */}
          {isLoading ? (
            <div className="flex items-center justify-center min-h-[calc(100vh-64px)]">
              <p className="text-lightText dark:text-darkText">Chargement...</p>
            </div>
          ) : (
            <Suspense fallback={<div>Chargement...</div>}>
              {children}
            </Suspense>
          )}
        </div>
      </div>

      {isSidebarOpen && !isDesktop && (
        <div className="fixed inset-0 bg-black bg-opacity-50 z-40" onClick={toggleSidebar} />
      )}
    </div>
  );
};

export default AdminLayout;

--- components\AdminSidebar.tsx ---
"use client";

import React, { useState } from "react";
import { motion, AnimatePresence } from "framer-motion";
import { useNavigate } from "react-router-dom";
import {
  Home,
  Users,
  ShoppingCart,
  Package,
  Calendar,
  FileText,
  Settings,
  LogOut,
  ChevronRight,
  ChevronDown,
  BarChart2,
  ShoppingBag,
  AlertTriangle,
  Image as ImageIcon,
  BookOpen,
  Tag,
  Percent,
  List,
  MapPin,
  Briefcase,
  DollarSign,
  Key,
  Heart,
  Edit,
} from "lucide-react";

interface AdminSidebarProps {
  isOpen: boolean;
  toggleSidebar: () => void;
}

const AdminSidebar: React.FC<AdminSidebarProps> = ({ isOpen, toggleSidebar }) => {
  const navigate = useNavigate();
  const [expandedSections, setExpandedSections] = useState<{ [key: string]: boolean }>({
    users: false,
    commands: false,
    products: false,
    ateliers: false,
    content: false,
    services: false,
    payments: false,
    settings: false,
  });

  const toggleSection = (section: string) => {
    setExpandedSections((prev) => ({ ...prev, [section]: !prev[section] }));
  };

  const handleLogout = () => {
    localStorage.removeItem("access_token");
    navigate("/auth");
  };

  const isMobile = window.innerWidth < 768;
  const iconSize = isMobile ? 10 : 20;

  // Variantes sans animation initiale
  const sidebarVariants = {
    open: { width: "250px" },
    closed: { width: isMobile ? "40px" : "80px" },
  };

  const textVariants = {
    open: { opacity: 1, x: 0 },
    closed: { opacity: 0, x: -20 },
  };

  return (
    <motion.div
      className="fixed top-0 left-0 h-screen bg-lightCard dark:bg-darkCard text-lightText dark:text-darkText shadow-lg z-50 overflow-y-auto"
      variants={sidebarVariants}
      initial={false} // Pas d'animation au montage initial
      animate={isOpen ? "open" : "closed"}
      transition={{ duration: 0.3, ease: "easeInOut" }}
    >
      <div className="flex flex-col h-full">
        <div className="flex items-center justify-between p-2 border-b border-lightBorder dark:border-darkBorder">
          <AnimatePresence>
            {isOpen && (
              <motion.div variants={textVariants} initial={false} animate="open" exit="closed">
                <h2 className={`font-semibold ${isMobile ? "text-sm" : "text-xl"}`}>ChezFlora Admin</h2>
              </motion.div>
            )}
          </AnimatePresence>
          <button
            onClick={toggleSidebar}
            className="p-1 hover:bg-cream-beige dark:hover:bg-gray-600 rounded-full"
          >
            {isOpen ? <ChevronRight size={iconSize} /> : <ChevronDown size={iconSize} />}
          </button>
        </div>

        <nav className="flex-1 p-2 space-y-1">
          <SidebarItem
            icon={<Home size={iconSize} />}
            label="Tableau de bord"
            isOpen={isOpen}
            onClick={() => navigate("/admin")}
            textVariants={textVariants}
            isMobile={isMobile}
          />
          <SidebarSection
            icon={<Users size={iconSize} />}
            label="Utilisateurs"
            isOpen={isOpen}
            expanded={expandedSections.users}
            toggle={() => toggleSection("users")}
            textVariants={textVariants}
            isMobile={isMobile}
          >
            <SidebarSubItem
              label="Tous les utilisateurs"
              isOpen={isOpen}
              onClick={() => navigate("/admin/users")}
              textVariants={textVariants}
              isMobile={isMobile}
            />
            <SidebarSubItem
              label="Statistiques"
              isOpen={isOpen}
              onClick={() => navigate("/admin/users/stats")}
              textVariants={textVariants}
              isMobile={isMobile}
            />
            <SidebarSubItem
              label="Bannissements"
              isOpen={isOpen}
              onClick={() => navigate("/admin/users/bans")}
              textVariants={textVariants}
              isMobile={isMobile}
            />
            <SidebarSubItem
              label="Adresses"
              isOpen={isOpen}
              onClick={() => navigate("/admin/addresses")}
              textVariants={textVariants}
              isMobile={isMobile}
            />
            <SidebarSubItem
              label="Wishlists"
              isOpen={isOpen}
              onClick={() => navigate("/admin/wishlists")}
              textVariants={textVariants}
              isMobile={isMobile}
            />
          </SidebarSection>
          <SidebarSection
            icon={<ShoppingCart size={iconSize} />}
            label="Commandes"
            isOpen={isOpen}
            expanded={expandedSections.commands}
            toggle={() => toggleSection("commands")}
            textVariants={textVariants}
            isMobile={isMobile}
          >
            <SidebarSubItem
              label="Liste des commandes"
              isOpen={isOpen}
              onClick={() => navigate("/admin/commands")}
              textVariants={textVariants}
              isMobile={isMobile}
            />
            <SidebarSubItem
              label="Lignes de commande"
              isOpen={isOpen}
              onClick={() => navigate("/admin/command-lines")}
              textVariants={textVariants}
              isMobile={isMobile}
            />
            <SidebarSubItem
              label="Paniers"
              isOpen={isOpen}
              onClick={() => navigate("/admin/carts")}
              textVariants={textVariants}
              isMobile={isMobile}
            />
            <SidebarSubItem
              label="Revenus"
              isOpen={isOpen}
              onClick={() => navigate("/admin/commands/revenue")}
              textVariants={textVariants}
              isMobile={isMobile}
            />
            <SidebarSubItem
              label="En attente"
              isOpen={isOpen}
              onClick={() => navigate("/admin/commands/pending")}
              textVariants={textVariants}
              isMobile={isMobile}
            />
          </SidebarSection>
          <SidebarSection
            icon={<Package size={iconSize} />}
            label="Produits"
            isOpen={isOpen}
            expanded={expandedSections.products}
            toggle={() => toggleSection("products")}
            textVariants={textVariants}
            isMobile={isMobile}
          >
            <SidebarSubItem
              label="Tous les produits"
              isOpen={isOpen}
              onClick={() => navigate("/admin/products")}
              textVariants={textVariants}
              isMobile={isMobile}
            />
            <SidebarSubItem
              label="Statistiques"
              isOpen={isOpen}
              onClick={() => navigate("/admin/products/stats")}
              textVariants={textVariants}
              isMobile={isMobile}
            />
            <SidebarSubItem
              label="Catégories"
              isOpen={isOpen}
              onClick={() => navigate("/admin/categories")}
              textVariants={textVariants}
              isMobile={isMobile}
            />
            <SidebarSubItem
              label="Promotions"
              isOpen={isOpen}
              onClick={() => navigate("/admin/promotions")}
              textVariants={textVariants}
              isMobile={isMobile}
            />
            <SidebarSubItem
              label="Stock faible"
              isOpen={isOpen}
              onClick={() => navigate("/admin/products/low-stock")}
              textVariants={textVariants}
              isMobile={isMobile}
            />
          </SidebarSection>
          <SidebarSection
            icon={<Calendar size={iconSize} />}
            label="Ateliers"
            isOpen={isOpen}
            expanded={expandedSections.ateliers}
            toggle={() => toggleSection("ateliers")}
            textVariants={textVariants}
            isMobile={isMobile}
          >
            <SidebarSubItem
              label="Liste des ateliers"
              isOpen={isOpen}
              onClick={() => navigate("/admin/ateliers")}
              textVariants={textVariants}
              isMobile={isMobile}
            />
            <SidebarSubItem
              label="Statistiques"
              isOpen={isOpen}
              onClick={() => navigate("/admin/ateliers/stats")}
              textVariants={textVariants}
              isMobile={isMobile}
            />
          </SidebarSection>
          <SidebarSection
            icon={<Briefcase size={iconSize} />}
            label="Services"
            isOpen={isOpen}
            expanded={expandedSections.services}
            toggle={() => toggleSection("services")}
            textVariants={textVariants}
            isMobile={isMobile}
          >
            <SidebarSubItem
              label="Liste des services"
              isOpen={isOpen}
              onClick={() => navigate("/admin/services")}
              textVariants={textVariants}
              isMobile={isMobile}
            />
            <SidebarSubItem
              label="Ajouter un service"
              isOpen={isOpen}
              onClick={() => navigate("/admin/services/add")}
              textVariants={textVariants}
              isMobile={isMobile}
            />
            <SidebarSubItem
              label="Devis"
              isOpen={isOpen}
              onClick={() => navigate("/admin/devis")}
              textVariants={textVariants}
              isMobile={isMobile}
            />
            <SidebarSubItem
              label="Abonnements"
              isOpen={isOpen}
              onClick={() => navigate("/admin/subscriptions")}
              textVariants={textVariants}
              isMobile={isMobile}
            />
          </SidebarSection>
          <SidebarSection
            icon={<BookOpen size={iconSize} />}
            label="Contenu"
            isOpen={isOpen}
            expanded={expandedSections.content}
            toggle={() => toggleSection("content")}
            textVariants={textVariants}
            isMobile={isMobile}
          >
            <SidebarSubItem
              label="Articles"
              isOpen={isOpen}
              onClick={() => navigate("/admin/articles")}
              textVariants={textVariants}
              isMobile={isMobile}
            />
            <SidebarSubItem
              label="Commentaires"
              isOpen={isOpen}
              onClick={() => navigate("/admin/comments")}
              textVariants={textVariants}
              isMobile={isMobile}
            />
            <SidebarSubItem
              label="Réalisations"
              isOpen={isOpen}
              onClick={() => navigate("/admin/realisations")}
              textVariants={textVariants}
              isMobile={isMobile}
            />
          </SidebarSection>
          <SidebarSection
            icon={<DollarSign size={iconSize} />}
            label="Paiements"
            isOpen={isOpen}
            expanded={expandedSections.payments}
            toggle={() => toggleSection("payments")}
            textVariants={textVariants}
            isMobile={isMobile}
          >
            <SidebarSubItem
              label="Liste des paiements"
              isOpen={isOpen}
              onClick={() => navigate("/admin/payments")}
              textVariants={textVariants}
              isMobile={isMobile}
            />
            <SidebarSubItem
              label="Statistiques"
              isOpen={isOpen}
              onClick={() => navigate("/admin/payments/stats")}
              textVariants={textVariants}
              isMobile={isMobile}
            />
          </SidebarSection>
          <SidebarSection
            icon={<Settings size={iconSize} />}
            label="Paramètres"
            isOpen={isOpen}
            expanded={expandedSections.settings}
            toggle={() => toggleSection("settings")}
            textVariants={textVariants}
            isMobile={isMobile}
          >
            <SidebarSubItem
              label="Paramètres généraux"
              isOpen={isOpen}
              onClick={() => navigate("/admin/settings/general")}
              textVariants={textVariants}
              isMobile={isMobile}
            />
            <SidebarSubItem
              label="OTP"
              isOpen={isOpen}
              onClick={() => navigate("/admin/settings/otp")}
              textVariants={textVariants}
              isMobile={isMobile}
            />
          </SidebarSection>
        </nav>

        <div className="p-2 border-t border-lightBorder dark:border-darkBorder">
          <SidebarItem
            icon={<LogOut size={iconSize} />}
            label="Déconnexion"
            isOpen={isOpen}
            onClick={handleLogout}
            textVariants={textVariants}
            isMobile={isMobile}
          />
        </div>
      </div>
    </motion.div>
  );
};

const SidebarItem: React.FC<{
  icon: React.ReactNode;
  label: string;
  isOpen: boolean;
  onClick: () => void;
  textVariants: any;
  isMobile: boolean;
}> = ({ icon, label, isOpen, onClick, textVariants, isMobile }) => (
  <button
    onClick={onClick}
    className={`w-full flex items-center ${isMobile ? "p-1" : "p-3"} text-lightText dark:text-darkText hover:bg-cream-beige dark:hover:bg-gray-600 rounded-lg transition-colors duration-200`}
  >
    {icon}
    <AnimatePresence>
      {isOpen && (
        <motion.span variants={textVariants} initial={false} animate="open" exit="closed" className={isMobile ? "ml-1 text-sm" : "ml-3"}>
          {label}
        </motion.span>
      )}
    </AnimatePresence>
  </button>
);

const SidebarSection: React.FC<{
  icon: React.ReactNode;
  label: string;
  isOpen: boolean;
  expanded: boolean;
  toggle: () => void;
  textVariants: any;
  children: React.ReactNode;
  isMobile: boolean;
}> = ({ icon, label, isOpen, expanded, toggle, textVariants, children, isMobile }) => (
  <div>
    <button
      onClick={toggle}
      className={`w-full flex items-center justify-between ${isMobile ? "p-1" : "p-3"} text-lightText dark:text-darkText hover:bg-cream-beige dark:hover:bg-gray-600 rounded-lg transition-colors duration-200`}
    >
      <div className="flex items-center">
        {icon}
        <AnimatePresence>
          {isOpen && (
            <motion.span variants={textVariants} initial={false} animate="open" exit="closed" className={isMobile ? "ml-1 text-sm" : "ml-3"}>
              {label}
            </motion.span>
          )}
        </AnimatePresence>
      </div>
      {isOpen && (
        <motion.div animate={{ rotate: expanded ? 180 : 0 }} transition={{ duration: 0.3 }}>
          <ChevronDown size={isMobile ? 8 : 16} />
        </motion.div>
      )}
    </button>
    <AnimatePresence>
      {expanded && isOpen && (
        <motion.div
          initial={{ height: 0, opacity: 0 }}
          animate={{ height: "auto", opacity: 1 }}
          exit={{ height: 0, opacity: 0 }}
          transition={{ duration: 0.3 }}
          className={isMobile ? "ml-3 mt-0.5 space-y-0.5" : "ml-6 mt-1 space-y-1"}
        >
          {children}
        </motion.div>
      )}
    </AnimatePresence>
  </div>
);

const SidebarSubItem: React.FC<{
  label: string;
  isOpen: boolean;
  onClick: () => void;
  textVariants: any;
  isMobile: boolean;
}> = ({ label, isOpen, onClick, textVariants, isMobile }) => (
  <button
    onClick={onClick}
    className={`w-full flex items-center ${isMobile ? "p-0.5 text-xs" : "p-2 text-sm"} text-gray-600 dark:text-gray-300 hover:bg-cream-beige dark:hover:bg-gray-600 rounded-lg transition-colors duration-200`}
  >
    <span className={isMobile ? "w-2" : "w-5"} />
    <AnimatePresence>
      {isOpen && (
        <motion.span variants={textVariants} initial={false} animate="open" exit="closed">
          {label}
        </motion.span>
      )}
    </AnimatePresence>
  </button>
);

export default AdminSidebar;

--- components\AlertMessage.tsx ---
import React, { useState, useEffect } from 'react';
import { CheckCircle, AlertCircle, X } from 'lucide-react';

type AlertType = 'success' | 'error' | 'info' | 'warning';

interface AlertMessageProps {
  type?: AlertType;
  message: string;
  duration?: number;
  onClose?: () => void;
}

const AlertMessage: React.FC<AlertMessageProps> = ({
  type = 'info',
  message,
  duration = 5000,
  onClose,
}) => {
  const [isVisible, setIsVisible] = useState(true);

  useEffect(() => {
    if (duration > 0) {
      const timer = setTimeout(() => {
        setIsVisible(false);
        onClose?.();
      }, duration);
      return () => clearTimeout(timer);
    }
  }, [duration, onClose]);

  const handleClose = () => {
    setIsVisible(false);
    onClose?.();
  };

  if (!isVisible) return null;

  const getAlertStyles = () => {
    switch (type) {
      case 'success':
        return { bg: 'bg-pastel-green/80', border: 'border-soft-green', icon: <CheckCircle className="h-5 w-5 text-soft-green" /> };
      case 'error':
        return { bg: 'bg-pastel-pink/80', border: 'border-powder-pink', icon: <AlertCircle className="h-5 w-5 text-powder-pink" /> };
      case 'warning':
        return { bg: 'bg-light-beige', border: 'border-soft-brown', icon: <AlertCircle className="h-5 w-5 text-soft-brown" /> };
      default:
        return { bg: 'bg-[#B2F2BB]/50', border: 'border-soft-green', icon: <CheckCircle className="h-5 w-5 text-soft-green" /> };
    }
  };

  const styles = getAlertStyles();

  return (
    <div
      className={`fixed top-4 right-4 z-50 max-w-md transform transition-all duration-300 ease-in-out ${isVisible ? 'translate-x-0 opacity-100' : 'translate-x-full opacity-0'}`}
    >
      <div className={`flex items-center p-4 rounded-lg shadow-md border ${styles.bg} ${styles.border}`}>
        <div className="flex-shrink-0">{styles.icon}</div>
        <div className="ml-3 mr-8 text-sm font-medium text-soft-brown">{message}</div>
        <button
          type="button"
          className="ml-auto -mx-1.5 -my-1.5 rounded-lg p-1.5 inline-flex h-8 w-8 text-soft-brown hover:text-powder-pink focus:outline-none"
          onClick={handleClose}
        >
          <span className="sr-only">Fermer</span>
          <X className="w-5 h-5" />
        </button>
      </div>
    </div>
  );
};

export default AlertMessage;

--- components\AuthForgotPasswordLink.tsx ---
import React, { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { KeyRound, X, Send } from 'lucide-react';
import TextFieldCustom from './TextFieldCustom';
import ButtonPrimary from './ButtonPrimary';
import ButtonSecondary from './ButtonSecondary';

interface AuthForgotPasswordLinkProps {
  onSubmit?: (email: string) => void;
  className?: string;
}

const AuthForgotPasswordLink: React.FC<AuthForgotPasswordLinkProps> = ({ onSubmit, className = '' }) => {
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [email, setEmail] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [isSuccess, setIsSuccess] = useState(false);
  const [error, setError] = useState('');

  const handleOpenModal = (e: React.MouseEvent) => {
    e.preventDefault();
    setIsModalOpen(true);
  };

  const handleCloseModal = () => {
    setIsModalOpen(false);
    setTimeout(() => {
      setEmail('');
      setIsSuccess(false);
      setError('');
    }, 300);
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (!email.trim()) {
      setError('Veuillez entrer votre adresse email');
      return;
    }
    setIsLoading(true);
    setError('');
    setTimeout(() => {
      setIsLoading(false);
      setIsSuccess(true);
      onSubmit?.(email);
    }, 1500);
  };

  return (
    <>
      <button onClick={handleOpenModal} className={`text-sm text-soft-green hover:underline ${className}`}>
        Mot de passe oublié ?
      </button>

      <AnimatePresence>
        {isModalOpen && (
          <motion.div
            className="fixed inset-0 bg-[#D2B48C]/20 backdrop-blur-sm z-50 flex items-center justify-center p-4"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            onClick={handleCloseModal}
          >
            <motion.div
              className="bg-[#F5F5F5] rounded-xl shadow-lg max-w-md w-full relative overflow-hidden"
              initial={{ scale: 0.9, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              exit={{ scale: 0.9, opacity: 0 }}
              transition={{ type: 'spring', duration: 0.5 }}
              onClick={(e) => e.stopPropagation()}
            >
              <div className="absolute top-0 right-0 w-32 h-32 bg-floral-pattern bg-no-repeat bg-contain opacity-10 pointer-events-none"></div>
              <button
                onClick={handleCloseModal}
                className="absolute top-4 right-4 text-soft-brown/60 hover:text-soft-brown transition-colors"
              >
                <X className="h-5 w-5" />
              </button>
              <div className="p-6">
                <div className="text-center mb-6">
                  <div className="inline-flex items-center justify-center w-12 h-12 bg-light-beige rounded-full mb-4">
                    <KeyRound className="h-6 w-6 text-soft-brown" />
                  </div>
                  <h3 className="text-xl font-serif font-medium text-soft-brown">Réinitialisation du mot de passe</h3>
                  {!isSuccess && (
                    <p className="text-soft-brown/70 text-sm mt-1">
                      Entrez votre adresse email pour recevoir un lien de réinitialisation
                    </p>
                  )}
                </div>
                {isSuccess ? (
                  <motion.div initial={{ opacity: 0, y: 10 }} animate={{ opacity: 1, y: 0 }} className="text-center">
                    <div className="inline-flex items-center justify-center w-12 h-12 bg-[#B2F2BB] rounded-full mb-4">
                      <Send className="h-6 w-6 text-soft-green" />
                    </div>
                    <p className="text-soft-brown mb-4">
                      Un email a été envoyé à <span className="font-medium">{email}</span> avec les instructions.
                    </p>
                    <ButtonPrimary onClick={handleCloseModal}>Fermer</ButtonPrimary>
                  </motion.div>
                ) : (
                  <form onSubmit={handleSubmit}>
                    {error && (
                      <div className="bg-pastel-pink/80 border border-powder-pink rounded-lg p-3 mb-4 text-sm text-soft-brown">
                        {error}
                      </div>
                    )}
                    <TextFieldCustom
                      id="reset-email"
                      label="Adresse email"
                      value={email}
                      onChange={setEmail}
                      type="email"
                      placeholder="Entrez votre adresse email"
                      required
                    />
                    <div className="flex gap-3 mt-6">
                      <ButtonSecondary type="button" onClick={handleCloseModal} className="flex-1">
                        Annuler
                      </ButtonSecondary>
                      <ButtonPrimary type="submit" disabled={isLoading} className="flex-1">
                        {isLoading ? (
                          <span className="flex items-center justify-center">
                            <svg
                              className="animate-spin -ml-1 mr-2 h-4 w-4 text-white"
                              xmlns="http://www.w3.org/2000/svg"
                              fill="none"
                              viewBox="0 0 24 24"
                            >
                              <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                              <path
                                className="opacity-75"
                                fill="currentColor"
                                d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                              ></path>
                            </svg>
                            Envoi...
                          </span>
                        ) : (
                          'Envoyer'
                        )}
                      </ButtonPrimary>
                    </div>
                  </form>
                )}
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>
    </>
  );
};

export default AuthForgotPasswordLink;

--- components\AuthLoginForm.tsx ---
import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { LogIn, Eye, EyeOff, Flower } from 'lucide-react';
import { useNavigate } from 'react-router-dom';
import TextFieldCustom from './TextFieldCustom';
import ButtonPrimary from './ButtonPrimary';
import AuthForgotPasswordLink from './AuthForgotPasswordLink';
import { login, getUserProfile } from '../services/api';

interface AuthLoginFormProps {
  className?: string;
}

const AuthLoginForm: React.FC<AuthLoginFormProps> = ({ className = '' }) => {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [showPassword, setShowPassword] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [formError, setFormError] = useState<string>('');
  const navigate = useNavigate();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!username.trim() || !password.trim()) {
      setFormError('Veuillez remplir tous les champs');
      return;
    }
    setIsLoading(true);
    setFormError('');
    try {
      const response = await login({ username, password });
      localStorage.setItem('access_token', response.data.access);

      const userRole = (await getUserProfile()).data.role
      if(userRole == 'admin')
        navigate('/admin');
      else
        navigate('/');
    } catch (err: any) {
      if (!err.response) {
        setFormError('Erreur réseau : impossible de contacter le serveur');
      } else if (err.response.status === 401 && err.response.data?.detail === 'Utilisateur non actif') {
        const userId = err.response.data.user_id;
        localStorage.setItem('pendingUserId', userId);
        navigate('/otp');
      } else {
        setFormError(err.response.data?.detail || 'Identifiants incorrects');
      }
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className={`max-w-md mx-auto ${className}`}>
      <div className="text-center mb-6">
        <motion.div
          className="inline-flex items-center justify-center w-16 h-16 bg-soft-green/20 rounded-full mb-4"
          initial={{ scale: 0.8, opacity: 0 }}
          animate={{ scale: 1, opacity: 1 }}
          transition={{ duration: 0.5 }}
        >
          <Flower className="h-8 w-8 text-soft-green" />
        </motion.div>
        <h2 className="text-2xl font-serif font-medium text-soft-brown">Bienvenue</h2>
        <p className="text-soft-brown/70 mt-1">Connectez-vous à votre compte</p>
      </div>
      {formError && (
        <motion.div
          className="bg-pastel-pink/80 border border-powder-pink rounded-lg p-3 mb-4 text-sm text-soft-brown"
          initial={{ height: 0, opacity: 0 }}
          animate={{ height: 'auto', opacity: 1 }}
          exit={{ height: 0, opacity: 0 }}
        >
          {formError}
        </motion.div>
      )}
      <form onSubmit={handleSubmit} className="space-y-4">
        <TextFieldCustom
          id="username"
          label="Nom d'utilisateur"
          value={username}
          onChange={setUsername}
          placeholder="Entrez votre nom d'utilisateur"
          required
        />
        <div className="relative">
          <TextFieldCustom
            id="password"
            label="Mot de passe"
            value={password}
            onChange={setPassword}
            type={showPassword ? 'text' : 'password'}
            placeholder="Entrez votre mot de passe"
            required
          />
          <button
            type="button"
            onClick={() => setShowPassword(!showPassword)}
            className="absolute right-3 top-[34px] text-soft-brown/60 hover:text-soft-brown transition-colors"
          >
            {showPassword ? <EyeOff className="h-4 w-4" /> : <Eye className="h-4 w-4" />}
          </button>
        </div>
        <div className="flex items-center justify-between">
          <div className="flex items-center">
            <input
              id="remember-me"
              name="remember-me"
              type="checkbox"
              className="h-4 w-4 rounded border-light-beige text-soft-green focus:ring-soft-green/50"
            />
            <label htmlFor="remember-me" className="ml-2 block text-sm text-soft-brown/80">
              Se souvenir de moi
            </label>
          </div>
          <AuthForgotPasswordLink />
        </div>
        <ButtonPrimary type="submit" fullWidth disabled={isLoading} className="mt-6">
          {isLoading ? (
            <span className="flex items-center justify-center">
              <svg
                className="animate-spin -ml-1 mr-2 h-4 w-4 text-white"
                xmlns="http://www.w3.org/2000/svg"
                fill="none"
                viewBox="0 0 24 24"
              >
                <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                <path
                  className="opacity-75"
                  fill="currentColor"
                  d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                ></path>
              </svg>
              Connexion en cours...
            </span>
          ) : (
            <span className="flex items-center justify-center">
              <LogIn className="mr-2 h-4 w-4" />
              Se connecter
            </span>
          )}
        </ButtonPrimary>
      </form>
    </div>
  );
};

export default AuthLoginForm;

--- components\AuthOtpForm.tsx ---
import React, { useState, useRef, useEffect } from 'react';
import { motion } from 'framer-motion';
import { KeyRound, ArrowRight } from 'lucide-react';
import ButtonPrimary from './ButtonPrimary';

interface AuthOtpFormProps {
  userId?: string;
  onSubmit?: (data: { userId: string; otp: string }) => void;
  isLoading?: boolean;
  error?: string;
  successMessage?: string;
  resendOtp?: () => void;
  className?: string;
}

const AuthOtpForm: React.FC<AuthOtpFormProps> = ({
  userId = '',
  onSubmit,
  isLoading = false,
  error,
  successMessage,
  resendOtp,
  className = '',
}) => {
  const [otp, setOtp] = useState(['', '', '', '', '', '']);
  const [formError, setFormError] = useState<string | undefined>(error);
  const [formSuccess, setFormSuccess] = useState<string | undefined>(successMessage);
  const [countdown, setCountdown] = useState(30);
  const inputRefs = useRef<(HTMLInputElement | null)[]>([]);

  useEffect(() => {
    if (countdown > 0) {
      const timer = setTimeout(() => setCountdown(countdown - 1), 1000);
      return () => clearTimeout(timer);
    }
  }, [countdown]);

  useEffect(() => {
    inputRefs.current[0]?.focus();
  }, []);

  useEffect(() => {
    setFormError(error);
    setFormSuccess(successMessage);
  }, [error, successMessage]);

  const handleChange = (index: number, value: string) => {
    if (value && !/^\d*$/.test(value)) return;
    const newOtp = [...otp];
    newOtp[index] = value.slice(0, 1);
    setOtp(newOtp);
    if (value && index < 5) inputRefs.current[index + 1]?.focus();
  };

  const handleKeyDown = (index: number, e: React.KeyboardEvent<HTMLInputElement>) => {
    if (e.key === 'Backspace' && !otp[index] && index > 0) inputRefs.current[index - 1]?.focus();
    if (e.key === 'ArrowLeft' && index > 0) inputRefs.current[index - 1]?.focus();
    if (e.key === 'ArrowRight' && index < 5) inputRefs.current[index + 1]?.focus();
  };

  const handlePaste = (e: React.ClipboardEvent<HTMLInputElement>) => {
    e.preventDefault();
    const pastedData = e.clipboardData.getData('text/plain').trim();
    if (!/^\d+$/.test(pastedData)) return;
    const newOtp = [...otp];
    for (let i = 0; i < Math.min(pastedData.length, 6); i++) {
      newOtp[i] = pastedData[i];
    }
    setOtp(newOtp);
    const focusIndex = Math.min(pastedData.length, 5);
    inputRefs.current[focusIndex]?.focus();
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (otp.some((digit) => !digit)) {
      setFormError('Veuillez entrer le code complet');
      setFormSuccess('');
      return;
    }
    onSubmit?.({ userId, otp: otp.join('') });
  };

  const handleResend = () => {
    setFormError('');
    setFormSuccess('');
    resendOtp?.();
    setCountdown(30);
  };

  return (
    <div className={`max-w-md mx-auto ${className}`}>
      <div className="text-center mb-6">
        <motion.div
          className="inline-flex items-center justify-center w-16 h-16 bg-light-beige rounded-full mb-4"
          initial={{ scale: 0.8, opacity: 0 }}
          animate={{ scale: 1, opacity: 1 }}
          transition={{ duration: 0.5 }}
        >
          <KeyRound className="h-8 w-8 text-soft-brown" />
        </motion.div>
        <h2 className="text-2xl font-serif font-medium text-soft-brown">Vérification</h2>
        <p className="text-soft-brown/70 mt-1">Nous avons envoyé un code à 6 chiffres à votre adresse email</p>
      </div>
      {formError && (
        <motion.div
          className="bg-pastel-pink/80 border border-powder-pink rounded-lg p-3 mb-4 text-sm text-soft-brown"
          initial={{ height: 0, opacity: 0 }}
          animate={{ height: 'auto', opacity: 1 }}
          exit={{ height: 0, opacity: 0 }}
        >
          {formError}
        </motion.div>
      )}
      {formSuccess && (
        <motion.div
          className="bg-pastel-green/80 border border-soft-green rounded-lg p-3 mb-4 text-sm text-soft-brown"
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          exit={{ opacity: 0 }}
        >
          {formSuccess}
        </motion.div>
      )}
      <form onSubmit={handleSubmit} className="space-y-6">
        <div className="flex justify-between gap-2">
          {otp.map((digit, index) => (
            <div key={index} className="w-full">
              <input
                ref={(el) => {
                  inputRefs.current[index] = el; // Fonction void explicite
                }}
                type="text"
                value={digit}
                onChange={(e) => handleChange(index, e.target.value)}
                onKeyDown={(e) => handleKeyDown(index, e)}
                onPaste={index === 0 ? handlePaste : undefined}
                maxLength={1}
                className={`
                  w-full aspect-square text-center text-xl font-medium rounded-lg border
                  focus:outline-none focus:ring-2 focus:ring-offset-0 transition-all duration-200
                  ${digit ? 'border-soft-green bg-pastel-green/20' : 'border-light-beige bg-off-white'}
                  focus:border-soft-green focus:ring-soft-green/50
                `}
              />
            </div>
          ))}
        </div>
        <ButtonPrimary type="submit" fullWidth disabled={isLoading || otp.some((digit) => !digit)}>
          {isLoading ? (
            <span className="flex items-center justify-center">
              <svg
                className="animate-spin -ml-1 mr-2 h-4 w-4 text-white"
                xmlns="http://www.w3.org/2000/svg"
                fill="none"
                viewBox="0 0 24 24"
              >
                <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                <path
                  className="opacity-75"
                  fill="currentColor"
                  d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                ></path>
              </svg>
              Vérification en cours...
            </span>
          ) : (
            <span className="flex items-center justify-center">
              <ArrowRight className="mr-2 h-4 w-4" />
              Vérifier
            </span>
          )}
        </ButtonPrimary>
        <div className="text-center mt-4">
          <p className="text-sm text-soft-brown/70">
            Vous n'avez pas reçu de code ?{' '}
            {countdown > 0 ? (
              <span>Réessayez dans {countdown} secondes</span>
            ) : (
              <button type="button" onClick={handleResend} className="text-soft-green hover:underline">
                Renvoyer le code
              </button>
            )}
          </p>
        </div>
      </form>
    </div>
  );
};

export default AuthOtpForm;

--- components\AuthRegisterForm.tsx ---
import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { UserPlus, Eye, EyeOff, Flower2, Check, X } from 'lucide-react';
import { useNavigate } from 'react-router-dom';
import TextFieldCustom from './TextFieldCustom';
import ButtonPrimary from './ButtonPrimary';
import { register } from '../services/api';

interface AuthRegisterFormProps {
  className?: string;
}

const AuthRegisterForm: React.FC<AuthRegisterFormProps> = ({ className = '' }) => {
  const [username, setUsername] = useState('');
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [showPassword, setShowPassword] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [formError, setFormError] = useState<string>('');
  const [acceptTerms, setAcceptTerms] = useState(false);
  const navigate = useNavigate();

  const hasMinLength = password.length >= 8;
  const hasUpperCase = /[A-Z]/.test(password);
  const hasLowerCase = /[a-z]/.test(password);
  const hasNumber = /[0-9]/.test(password);
  const hasSpecialChar = /[^A-Za-z0-9]/.test(password);
  const passwordStrength = [hasMinLength, hasUpperCase, hasLowerCase, hasNumber, hasSpecialChar].filter(Boolean).length;

  const getPasswordStrengthLabel = () => {
    if (passwordStrength <= 2) return { label: 'Faible', color: 'bg-powder-pink' };
    if (passwordStrength <= 4) return { label: 'Moyen', color: 'bg-soft-brown' };
    return { label: 'Fort', color: 'bg-soft-green' };
  };

  const strengthInfo = getPasswordStrengthLabel();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!username.trim() || !email.trim() || !password.trim()) {
      setFormError('Veuillez remplir tous les champs');
      return;
    }
    if (password !== confirmPassword) {
      setFormError('Les mots de passe ne correspondent pas');
      return;
    }
    if (!acceptTerms) {
      setFormError('Vous devez accepter les conditions générales');
      return;
    }
    if (passwordStrength < 3) {
      setFormError('Votre mot de passe est trop faible');
      return;
    }
    setIsLoading(true);
    setFormError('');
    try {
      const response = await register({ username, email, password });
      localStorage.setItem('pendingUserId', response.data.user_id);
      navigate('/otp');
    } catch (err: any) {
      if (!err.response) {
        setFormError('Erreur réseau : impossible de contacter le serveur');
      } else if (err.response.status === 400 && err.response.data?.error === 'Utilisateur existe mais non actif') {
        const userId = err.response.data.user_id;
        localStorage.setItem('pendingUserId', userId);
        navigate('/otp');
      } else {
        setFormError(err.response.data?.error || 'Données invalides, vérifiez vos champs');
      }
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className={`max-w-md mx-auto ${className}`}>
      <div className="text-center mb-6">
        <motion.div
          className="inline-flex items-center justify-center w-16 h-16 bg-powder-pink/20 rounded-full mb-4"
          initial={{ scale: 0.8, opacity: 0 }}
          animate={{ scale: 1, opacity: 1 }}
          transition={{ duration: 0.5 }}
        >
          <Flower2 className="h-8 w-8 text-powder-pink" />
        </motion.div>
        <h2 className="text-2xl font-serif font-medium text-soft-brown">Créer un compte</h2>
        <p className="text-soft-brown/70 mt-1">Rejoignez notre communauté florale</p>
      </div>
      {formError && (
        <motion.div
          className="bg-pastel-pink/80 border border-powder-pink rounded-lg p-3 mb-4 text-sm text-soft-brown"
          initial={{ height: 0, opacity: 0 }}
          animate={{ height: 'auto', opacity: 1 }}
          exit={{ height: 0, opacity: 0 }}
        >
          {formError}
        </motion.div>
      )}
      <form onSubmit={handleSubmit} className="space-y-4">
        <TextFieldCustom
          id="username"
          label="Nom d'utilisateur"
          value={username}
          onChange={setUsername}
          placeholder="Choisissez un nom d'utilisateur"
          required
        />
        <TextFieldCustom
          id="email"
          label="Adresse email"
          value={email}
          onChange={setEmail}
          type="email"
          placeholder="Entrez votre adresse email"
          required
        />
        <div className="relative">
          <TextFieldCustom
            id="password"
            label="Mot de passe"
            value={password}
            onChange={setPassword}
            type={showPassword ? 'text' : 'password'}
            placeholder="Créez un mot de passe"
            required
          />
          <button
            type="button"
            onClick={() => setShowPassword(!showPassword)}
            className="absolute right-3 top-[34px] text-soft-brown/60 hover:text-soft-brown transition-colors"
          >
            {showPassword ? <EyeOff className="h-4 w-4" /> : <Eye className="h-4 w-4" />}
          </button>
        </div>
        {password.length > 0 && (
          <div className="space-y-2">
            <div className="flex items-center justify-between text-xs">
              <span className="text-soft-brown/70">Force du mot de passe :</span>
              <span
                className={`font-medium ${
                  strengthInfo.label === 'Faible'
                    ? 'text-powder-pink'
                    : strengthInfo.label === 'Moyen'
                    ? 'text-soft-brown'
                    : 'text-soft-green'
                }`}
              >
                {strengthInfo.label}
              </span>
            </div>
            <div className="h-1.5 w-full bg-light-beige rounded-full overflow-hidden">
              <motion.div
                className={`h-full ${strengthInfo.color}`}
                initial={{ width: 0 }}
                animate={{ width: `${(passwordStrength / 5) * 100}%` }}
                transition={{ duration: 0.3 }}
              />
            </div>
            <div className="grid grid-cols-2 gap-2 text-xs mt-2">
              <div className="flex items-center">
                {hasMinLength ? <Check className="h-3 w-3 text-soft-green mr-1" /> : <X className="h-3 w-3 text-powder-pink mr-1" />}
                <span className="text-soft-brown/70">8 caractères minimum</span>
              </div>
              <div className="flex items-center">
                {hasUpperCase ? <Check className="h-3 w-3 text-soft-green mr-1" /> : <X className="h-3 w-3 text-powder-pink mr-1" />}
                <span className="text-soft-brown/70">Une majuscule</span>
              </div>
              <div className="flex items-center">
                {hasLowerCase ? <Check className="h-3 w-3 text-soft-green mr-1" /> : <X className="h-3 w-3 text-powder-pink mr-1" />}
                <span className="text-soft-brown/70">Une minuscule</span>
              </div>
              <div className="flex items-center">
                {hasNumber ? <Check className="h-3 w-3 text-soft-green mr-1" /> : <X className="h-3 w-3 text-powder-pink mr-1" />}
                <span className="text-soft-brown/70">Un chiffre</span>
              </div>
              <div className="flex items-center">
                {hasSpecialChar ? <Check className="h-3 w-3 text-soft-green mr-1" /> : <X className="h-3 w-3 text-powder-pink mr-1" />}
                <span className="text-soft-brown/70">Un caractère spécial</span>
              </div>
            </div>
          </div>
        )}
        <div className="relative">
          <TextFieldCustom
            id="confirm-password"
            label="Confirmer le mot de passe"
            value={confirmPassword}
            onChange={setConfirmPassword}
            type={showPassword ? 'text' : 'password'}
            placeholder="Confirmez votre mot de passe"
            required
            error={confirmPassword && password !== confirmPassword ? 'Les mots de passe ne correspondent pas' : ''}
          />
        </div>
        <div className="flex items-start mt-4">
          <div className="flex items-center h-5">
            <input
              id="terms"
              name="terms"
              type="checkbox"
              checked={acceptTerms}
              onChange={(e) => setAcceptTerms(e.target.checked)}
              className="h-4 w-4 rounded border-light-beige text-soft-green focus:ring-soft-green/50"
            />
          </div>
          <div className="ml-3 text-sm">
            <label htmlFor="terms" className="text-soft-brown/80">
              J'accepte les{' '}
              <a href="#" className="text-soft-green hover:underline">
                conditions générales
              </a>{' '}
              et la{' '}
              <a href="#" className="text-soft-green hover:underline">
                politique de confidentialité
              </a>
            </label>
          </div>
        </div>
        <ButtonPrimary type="submit" fullWidth disabled={isLoading} className="mt-6">
          {isLoading ? (
            <span className="flex items-center justify-center">
              <svg
                className="animate-spin -ml-1 mr-2 h-4 w-4 text-white"
                xmlns="http://www.w3.org/2000/svg"
                fill="none"
                viewBox="0 0 24 24"
              >
                <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                <path
                  className="opacity-75"
                  fill="currentColor"
                  d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                ></path>
              </svg>
              Inscription en cours...
            </span>
          ) : (
            <span className="flex items-center justify-center">
              <UserPlus className="mr-2 h-4 w-4" />
              S'inscrire
            </span>
          )}
        </ButtonPrimary>
        <div className="text-center mt-4">
          <p className="text-sm text-soft-brown/70">
            Vous avez déjà un compte?{' '}
            <a href="#" className="text-soft-green hover:underline">
              Connectez-vous
            </a>
          </p>
        </div>
      </form>
    </div>
  );
};

export default AuthRegisterForm;

--- components\AuthTabs.tsx ---
import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { LogIn, UserPlus } from 'lucide-react';

interface AuthTabsProps {
  defaultTab?: string;
  onTabChange?: (tabId: string) => void;
  className?: string;
  children: React.ReactNode; // Ajout de children
}

const AuthTabs: React.FC<AuthTabsProps> = ({
  defaultTab = 'login',
  onTabChange,
  className = '',
  children,
}) => {
  const [activeTab, setActiveTab] = useState(defaultTab);

  const handleTabChange = (tabId: string) => {
    setActiveTab(tabId);
    onTabChange?.(tabId);
  };

  return (
    <div className={`w-full ${className}`}>
      <div className="relative mb-8">
        <div className="flex justify-center space-x-2 relative z-10">
          <button
            onClick={() => handleTabChange('login')}
            className={`
              relative flex items-center px-4 py-2 rounded-full text-sm font-medium transition-all duration-300
              ${activeTab === 'login' ? 'text-soft-brown' : 'text-soft-brown/60 hover:text-soft-brown/80'}
            `}
          >
            <span className="flex items-center">
              <LogIn className="mr-2 h-4 w-4" />
              Connexion
            </span>
            {activeTab === 'login' && (
              <motion.div
                layoutId="activeTabIndicator"
                className="absolute inset-0 bg-light-beige rounded-full -z-10"
                initial={false}
                transition={{ type: 'spring', duration: 0.6 }}
              />
            )}
          </button>
          <button
            onClick={() => handleTabChange('register')}
            className={`
              relative flex items-center px-4 py-2 rounded-full text-sm font-medium transition-all duration-300
              ${activeTab === 'register' ? 'text-soft-brown' : 'text-soft-brown/60 hover:text-soft-brown/80'}
            `}
          >
            <span className="flex items-center">
              <UserPlus className="mr-2 h-4 w-4" />
              Inscription
            </span>
            {activeTab === 'register' && (
              <motion.div
                layoutId="activeTabIndicator"
                className="absolute inset-0 bg-light-beige rounded-full -z-10"
                initial={false}
                transition={{ type: 'spring', duration: 0.6 }}
              />
            )}
          </button>
        </div>
        <div className="absolute top-1/2 left-0 right-0 h-px bg-light-beige -z-20 transform -translate-y-1/2"></div>
        <div className="absolute top-1/2 left-1/4 w-2 h-2 rounded-full bg-pastel-pink transform -translate-y-1/2 -translate-x-1/2"></div>
        <div className="absolute top-1/2 right-1/4 w-2 h-2 rounded-full bg-pastel-green transform -translate-y-1/2 translate-x-1/2"></div>
      </div>
      <div className="relative overflow-hidden rounded-xl bg-light-beige/30 p-6 shadow-md">
        <div className="absolute top-0 right-0 w-32 h-32 bg-floral-pattern bg-no-repeat bg-contain opacity-10 pointer-events-none"></div>
        <div className="relative z-10">{children}</div>
      </div>
    </div>
  );
};

export default AuthTabs;

--- components\BlogComment.tsx ---
import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { User, Clock, Reply, Trash2 } from 'lucide-react';

interface BlogCommentProps {
  id: string;
  author: string;
  date: string;
  content: string;
  isAdmin: boolean;
  onReply: (id: string) => void;
  onDelete: (id: string) => void;
}

const BlogComment: React.FC<BlogCommentProps> = ({ id, author, date, content, isAdmin, onReply, onDelete }) => {
  const [isHovered, setIsHovered] = useState(false);

  return (
    <motion.div
      className="bg-[#F5F5F5] rounded-lg p-4 mb-4 relative"
      onMouseEnter={() => setIsHovered(true)}
      onMouseLeave={() => setIsHovered(false)}
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.3 }}
    >
      <div className="flex items-center mb-2">
        <div className="w-8 h-8 bg-[#A8D5BA]/20 rounded-full flex items-center justify-center mr-2">
          <User className="w-4 h-4 text-soft-green" />
        </div>
        <div>
          <h4 className="font-medium text-soft-brown">{author}</h4>
          <div className="flex items-center text-soft-brown/60 text-xs">
            <Clock className="w-3 h-3 mr-1" />
            <span>{date}</span>
          </div>
        </div>
      </div>
      <p className="text-soft-brown/80 mb-4">{content}</p>
      <div className="flex justify-end space-x-2">
        <motion.button
          className="flex items-center text-soft-green hover:underline text-sm"
          onClick={() => onReply(id)}
          whileHover={{ scale: 1.05 }}
          whileTap={{ scale: 0.95 }}
        >
          <Reply className="w-4 h-4 mr-1" />
          Répondre
        </motion.button>
        {isAdmin && (
          <motion.button
            className="flex items-center text-powder-pink hover:underline text-sm"
            onClick={() => onDelete(id)}
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
          >
            <Trash2 className="w-4 h-4 mr-1" />
            Supprimer
          </motion.button>
        )}
      </div>
      <motion.div
        className="absolute bottom-0 right-0 w-16 h-16 bg-floral-pattern bg-no-repeat bg-contain opacity-5"
        initial={{ rotate: 0 }}
        animate={{ rotate: isHovered ? 90 : 0 }}
        transition={{ duration: 0.3 }}
      />
    </motion.div>
  );
};

export default BlogComment;

--- components\BlogCommentForm.tsx ---
import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { Send } from 'lucide-react';
import TextFieldCustom from './TextFieldCustom';
import ButtonPrimary from './ButtonPrimary';

interface BlogCommentFormProps {
  onSubmit: (comment: string) => void;
}

const BlogCommentForm: React.FC<BlogCommentFormProps> = ({ onSubmit }) => {
  const [comment, setComment] = useState('');

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (comment.trim()) {
      onSubmit(comment);
      setComment('');
    }
  };

  return (
    <motion.form
      onSubmit={handleSubmit}
      className="bg-[#F5F5F5] rounded-xl shadow-md p-6 relative overflow-hidden"
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.3 }}
    >
      <h3 className="text-xl font-serif font-bold text-soft-brown mb-4">Ajouter un commentaire</h3>
      <TextFieldCustom
        id="comment"
        label="Votre commentaire"
        value={comment}
        onChange={setComment}
        placeholder="Partagez vos pensées..."
        multiline
        rows={4}
        required
      />
      <div className="mt-4 flex justify-end">
        <ButtonPrimary type="submit" disabled={!comment.trim()}>
          <Send className="w-4 h-4 mr-2" />
          Publier
        </ButtonPrimary>
      </div>
      <div className="absolute top-0 left-0 w-24 h-24 bg-floral-pattern bg-no-repeat bg-contain opacity-5 transform -rotate-90" />
    </motion.form>
  );
};

export default BlogCommentForm;

--- components\BlogPostPreview.tsx ---
import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { Calendar, ArrowRight } from 'lucide-react';
import { Link } from 'react-router-dom';

interface BlogPostPreviewProps {
  id: string;
  title: string;
  excerpt: string;
  date: string;
  image: string;
  author: string;
  readTime: number;
}

const BlogPostPreview: React.FC<BlogPostPreviewProps> = ({ id, title, excerpt, date, image, author, readTime }) => {
  const [isHovered, setIsHovered] = useState(false);

  return (
    <motion.div
      className="bg-[#F5F5F5] rounded-xl shadow-md overflow-hidden"
      onMouseEnter={() => setIsHovered(true)}
      onMouseLeave={() => setIsHovered(false)}
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.3 }}
    >
      <div className="relative h-48">
        <img
          src={image || '/placeholder.svg'}
          alt={title}
          className="w-full h-full object-cover transition-transform duration-300 ease-in-out transform group-hover:scale-105"
        />
        <div className="absolute inset-0 bg-gradient-to-t from-black/50 to-transparent" />
      </div>
      <div className="p-6">
        <h3 className="text-xl font-serif font-bold text-soft-brown mb-2">{title}</h3>
        <p className="text-soft-brown/80 mb-4 line-clamp-3">{excerpt}</p>
        <div className="flex justify-between items-center text-soft-brown/70 text-sm mb-4">
          <div className="flex items-center">
            <Calendar className="w-4 h-4 mr-1" />
            <span>{date}</span>
          </div>
          <span>{readTime} min de lecture</span>
        </div>
        <div className="flex justify-between items-center">
          <span className="text-soft-brown/80">{author}</span>
          <Link to={`/blog/${id}`}>
            <motion.a
              className="flex items-center text-soft-green hover:underline"
              whileHover={{ x: 5 }}
              transition={{ duration: 0.2 }}
            >
              Lire l'article
              <ArrowRight className="w-4 h-4 ml-1" />
            </motion.a>
          </Link>
        </div>
      </div>
      <motion.div
        className="absolute top-0 left-0 w-24 h-24 bg-floral-pattern bg-no-repeat bg-contain opacity-10"
        initial={{ rotate: 0 }}
        animate={{ rotate: isHovered ? -90 : 0 }}
        transition={{ duration: 0.3 }}
      />
    </motion.div>
  );
};

export default BlogPostPreview;

--- components\ButtonPrimary.tsx ---
import React from 'react';

interface ButtonPrimaryProps {
  children: React.ReactNode;
  onClick?: () => void;
  type?: 'button' | 'submit' | 'reset';
  disabled?: boolean;
  className?: string;
  fullWidth?: boolean;
  size?: 'sm' | 'md' | 'lg';
}

const ButtonPrimary: React.FC<ButtonPrimaryProps> = ({
  children,
  onClick,
  type = 'button',
  disabled = false,
  className = '',
  fullWidth = false,
  size = 'md',
}) => {
  const sizeClasses = {
    sm: 'py-1 px-3 text-xs',
    md: 'py-2 px-4 text-sm',
    lg: 'py-3 px-6 text-base',
  };

  return (
    <button
      type={type}
      onClick={onClick}
      disabled={disabled}
      className={`
        relative overflow-hidden bg-[#A8D5BA] text-soft-brown font-medium rounded-lg 
        hover:bg-[#B2F2BB] transition-all duration-300 shadow-sm
        focus:outline-none focus:ring-2 focus:ring-[#A8D5BA] focus:ring-offset-2
        disabled:opacity-50 disabled:cursor-not-allowed
        ${sizeClasses[size]}
        ${fullWidth ? 'w-full' : ''}
        ${className}
      `}
    >
      <span className="absolute inset-0 overflow-hidden rounded-lg">
        <span className="absolute -right-1 -top-1 w-12 h-12 bg-white/10 rounded-full transform rotate-45"></span>
      </span>
      <span className="relative">{children}</span>
    </button>
  );
};

export default ButtonPrimary;

--- components\ButtonSecondary.tsx ---
import React from 'react';

interface ButtonSecondaryProps {
  children: React.ReactNode;
  onClick?: () => void;
  type?: 'button' | 'submit' | 'reset';
  disabled?: boolean;
  className?: string;
  fullWidth?: boolean;
  size?: 'sm' | 'md' | 'lg';
}

const ButtonSecondary: React.FC<ButtonSecondaryProps> = ({
  children,
  onClick,
  type = 'button',
  disabled = false,
  className = '',
  fullWidth = false,
  size = 'md',
}) => {
  const sizeClasses = {
    sm: 'py-1 px-3 text-xs',
    md: 'py-2 px-4 text-sm',
    lg: 'py-3 px-6 text-base',
  };

  return (
    <button
      type={type}
      onClick={onClick}
      disabled={disabled}
      className={`
        relative overflow-hidden bg-[#F8C1CC] text-soft-brown font-medium rounded-lg 
        hover:bg-[#FFC9C9] transition-all duration-300 shadow-sm
        focus:outline-none focus:ring-2 focus:ring-[#F8C1CC] focus:ring-offset-2
        disabled:opacity-50 disabled:cursor-not-allowed
        ${sizeClasses[size]}
        ${fullWidth ? 'w-full' : ''}
        ${className}
      `}
    >
      <span className="absolute inset-0 overflow-hidden rounded-lg">
        <span className="absolute -left-1 -top-1 w-12 h-12 bg-white/10 rounded-full transform rotate-45"></span>
      </span>
      <span className="relative">{children}</span>
    </button>
  );
};

export default ButtonSecondary;

--- components\CardContainer.tsx ---
import React from 'react';

interface CardContainerProps {
  children: React.ReactNode;
  className?: string;
  onClick?: () => void;
  hoverable?: boolean;
}

const CardContainer: React.FC<CardContainerProps> = ({
  children,
  className = '',
  onClick,
  hoverable = false,
}) => {
  return (
    <div
      className={`
        relative overflow-hidden rounded-xl bg-light-beige p-6 shadow-md
        ${hoverable ? 'transition-transform duration-300 hover:-translate-y-1 hover:shadow-lg' : ''}
        ${onClick ? 'cursor-pointer' : ''}
        ${className}
      `}
      onClick={onClick}
    >
      <div className="absolute top-0 right-0 w-16 h-16 overflow-hidden opacity-10 pointer-events-none">
        <div className="absolute -right-4 -top-4 w-20 h-20 bg-floral-pattern bg-no-repeat bg-contain"></div>
      </div>
      {children}
    </div>
  );
};

export default CardContainer;

--- components\CardItem.tsx ---
import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { Minus, Plus, Trash2 } from 'lucide-react';

interface CartItemProps {
  id: string;
  name: string;
  price: number;
  quantity: number;
  image: string;
  onUpdateQuantity: (id: string, newQuantity: number) => void;
  onRemove: (id: string) => void;
}

const CartItem: React.FC<CartItemProps> = ({
  id,
  name,
  price,
  quantity,
  image,
  onUpdateQuantity,
  onRemove,
}) => {
  const [isRemoving, setIsRemoving] = useState(false);

  const handleQuantityChange = (change: number) => {
    const newQuantity = quantity + change;
    if (newQuantity > 0) {
      onUpdateQuantity(id, newQuantity);
    } else {
      handleRemove();
    }
  };

  const handleRemove = () => {
    setIsRemoving(true);
    setTimeout(() => onRemove(id), 300);
  };

  return (
    <motion.div
      className={`flex items-center p-4 bg-[#F5F5F5] rounded-lg shadow-sm mb-4 transition-all duration-300 ${isRemoving ? 'opacity-0 scale-95' : 'opacity-100 scale-100'}`}
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      exit={{ opacity: 0, y: -20 }}
    >
      <div className="relative w-20 h-20 rounded-md overflow-hidden mr-4">
        <img src={image || '/placeholder.svg'} alt={name} className="w-full h-full object-cover" />
      </div>
      <div className="flex-grow">
        <h3 className="text-soft-brown font-medium mb-1">{name}</h3>
        <p className="text-soft-brown/70 text-sm">{price.toFixed(2)} FCFA / unité</p>
      </div>
      <div className="flex items-center space-x-2">
        <button
          onClick={() => handleQuantityChange(-1)}
          className="p-1 rounded-full bg-light-beige text-soft-brown hover:bg-[#A8D5BA]/20 transition-colors"
        >
          <Minus className="w-4 h-4" />
        </button>
        <span className="w-8 text-center font-medium text-soft-brown">{quantity}</span>
        <button
          onClick={() => handleQuantityChange(1)}
          className="p-1 rounded-full bg-light-beige text-soft-brown hover:bg-[#A8D5BA]/20 transition-colors"
        >
          <Plus className="w-4 h-4" />
        </button>
      </div>
      <div className="w-24 text-right">
        <p className="font-bold text-soft-brown">{(price * quantity).toFixed(2)} FCFA</p>
      </div>
      <button
        onClick={handleRemove}
        className="ml-4 p-2 text-soft-brown/60 hover:text-powder-pink transition-colors"
      >
        <Trash2 className="w-5 h-5" />
      </button>
      <div className="absolute bottom-0 right-0 w-16 h-16 bg-floral-pattern bg-no-repeat bg-contain opacity-5" />
    </motion.div>
  );
};

export default CartItem;

--- components\CategoryFilter.tsx ---
import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { Check } from 'lucide-react';

interface Category {
  id: string;
  name: string;
}

interface CategoryFilterProps {
  categories: Category[];
  onFilterChange: (selectedCategories: string[]) => void;
}

const CategoryFilter: React.FC<CategoryFilterProps> = ({ categories, onFilterChange }) => {
  const [selectedCategories, setSelectedCategories] = useState<string[]>([]);

  const handleCategoryToggle = (categoryId: string) => {
    const updatedCategories = selectedCategories.includes(categoryId)
      ? selectedCategories.filter((id) => id !== categoryId)
      : [...selectedCategories, categoryId];
    setSelectedCategories(updatedCategories);
    onFilterChange(updatedCategories);
  };

  return (
    <div className="bg-[#F5F5F5] rounded-xl shadow-md p-6">
      <h3 className="text-lg font-serif font-bold text-soft-brown mb-4">Catégories</h3>
      <div className="space-y-2">
        {categories.map((category) => (
          <motion.div
            key={category.id}
            className="flex items-center"
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
          >
            <input
              type="checkbox"
              id={category.id}
              checked={selectedCategories.includes(category.id)}
              onChange={() => handleCategoryToggle(category.id)}
              className="hidden"
            />
            <label
              htmlFor={category.id}
              className="flex items-center cursor-pointer text-soft-brown hover:text-soft-green transition-colors"
            >
              <div
                className={`w-5 h-5 border rounded mr-2 flex items-center justify-center ${selectedCategories.includes(category.id) ? 'bg-[#A8D5BA] border-soft-green' : 'border-[#F5E8C7]'}`}
              >
                {selectedCategories.includes(category.id) && <Check className="w-4 h-4 text-[#F5F5F5]" />}
              </div>
              {category.name}
            </label>
          </motion.div>
        ))}
      </div>
    </div>
  );
};

export default CategoryFilter;

--- components\CheckoutSummary.tsx ---
import React, { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import { ShoppingBag, Truck, Gift } from 'lucide-react';
import ButtonPrimary from './ButtonPrimary';

interface CartItem {
  id: string;
  name: string;
  price: number;
  quantity: number;
}

interface CheckoutSummaryProps {
  items: CartItem[];
  onCheckout: () => void;
}

const CheckoutSummary: React.FC<CheckoutSummaryProps> = ({ items, onCheckout }) => {
  const [subtotal, setSubtotal] = useState(0);
  const [shipping] = useState(5.99);
  const [total, setTotal] = useState(0);
  const [promoCode, setPromoCode] = useState('');
  const [discount, setDiscount] = useState(0);

  useEffect(() => {
    const newSubtotal = items.reduce((sum, item) => sum + item.price * item.quantity, 0);
    setSubtotal(newSubtotal);
    setTotal(newSubtotal + shipping - discount);
  }, [items, shipping, discount]);

  const handlePromoCode = () => {
    if (promoCode.toLowerCase() === 'floral10') {
      const newDiscount = subtotal * 0.1;
      setDiscount(newDiscount);
    }
  };

  return (
    <motion.div
      className="bg-[#F5F5F5] rounded-xl shadow-md p-6 max-w-md mx-auto"
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.5 }}
    >
      <h2 className="text-2xl font-serif font-bold text-soft-brown mb-6">Résumé de la commande</h2>
      <div className="space-y-4 mb-6">
        {items.map((item) => (
          <div key={item.id} className="flex justify-between items-center">
            <div className="flex items-center">
              <ShoppingBag className="w-4 h-4 text-soft-green mr-2" />
              <span className="text-soft-brown">{item.name}</span>
              <span className="text-soft-brown/60 ml-2">x{item.quantity}</span>
            </div>
            <span className="font-medium text-soft-brown">{(item.price * item.quantity).toFixed(2)} FCFA</span>
          </div>
        ))}
      </div>
      <div className="flex justify-between items-center mb-2">
        <span className="text-soft-brown">Sous-total</span>
        <span className="font-medium text-soft-brown">{subtotal.toFixed(2)} FCFA</span>
      </div>
      <div className="flex justify-between items-center mb-2">
        <div className="flex items-center">
          <Truck className="w-4 h-4 text-soft-green mr-2" />
          <span className="text-soft-brown">Livraison</span>
        </div>
        <span className="font-medium text-soft-brown">{shipping.toFixed(2)} FCFA</span>
      </div>
      <div className="flex items-center mb-4">
        <input
          type="text"
          value={promoCode}
          onChange={(e) => setPromoCode(e.target.value)}
          placeholder="Code promo"
          className="flex-grow p-2 border border-[#F5E8C7] rounded-l-md focus:outline-none focus:ring-1 focus:ring-[#A8D5BA]"
        />
        <button
          onClick={handlePromoCode}
          className="bg-[#A8D5BA] text-[#F5F5F5] px-4 py-2 rounded-r-md hover:bg-[#A8D5BA]/90 transition-colors"
        >
          Appliquer
        </button>
      </div>
      {discount > 0 && (
        <div className="flex justify-between items-center mb-2 text-powder-pink">
          <div className="flex items-center">
            <Gift className="w-4 h-4 mr-2" />
            <span>Réduction</span>
          </div>
          <span className="font-medium">-{discount.toFixed(2)} FCFA</span>
        </div>
      )}
      <div className="flex justify-between items-center mb-6 text-lg font-bold">
        <span className="text-soft-brown">Total</span>
        <span className="text-soft-brown">{total.toFixed(2)} FCFA</span>
      </div>
      <ButtonPrimary onClick={onCheckout} fullWidth>
        Procéder au paiement
      </ButtonPrimary>
      <div className="absolute bottom-0 right-0 w-32 h-32 bg-floral-pattern bg-no-repeat bg-contain opacity-5" />
    </motion.div>
  );
};

export default CheckoutSummary;

--- components\ConfirmationModal.tsx ---
import React from 'react';
import { motion } from 'framer-motion';
import { AlertTriangle } from 'lucide-react';
import ButtonPrimary from './ButtonPrimary';
import ButtonSecondary from './ButtonSecondary';

interface ConfirmationModalProps {
  isOpen: boolean;
  onClose: () => void;
  onConfirm: () => void;
  title: string;
  message: string;
  confirmText?: string;
  cancelText?: string;
}

const ConfirmationModal: React.FC<ConfirmationModalProps> = ({
  isOpen,
  onClose,
  onConfirm,
  title,
  message,
  confirmText = 'Confirmer',
  cancelText = 'Annuler',
}) => {
  if (!isOpen) return null;

  return (
    <motion.div
      className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50"
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      exit={{ opacity: 0 }}
    >
      <motion.div
        className="bg-[#F5F5F5] rounded-xl shadow-lg p-6 w-full max-w-md relative overflow-hidden"
        initial={{ scale: 0.9, y: 20 }}
        animate={{ scale: 1, y: 0 }}
        exit={{ scale: 0.9, y: 20 }}
      >
        <div className="flex items-center mb-4">
          <div className="w-10 h-10 bg-[#F8C1CC]/20 rounded-full flex items-center justify-center mr-3">
            <AlertTriangle className="w-6 h-6 text-powder-pink" />
          </div>
          <h2 className="text-xl font-serif font-bold text-soft-brown">{title}</h2>
        </div>
        <p className="text-soft-brown/80 mb-6">{message}</p>
        <div className="flex justify-end space-x-3">
          <ButtonSecondary onClick={onClose}>{cancelText}</ButtonSecondary>
          <ButtonPrimary onClick={onConfirm}>{confirmText}</ButtonPrimary>
        </div>
        <div className="absolute top-0 right-0 w-24 h-24 bg-floral-pattern bg-no-repeat bg-contain opacity-5 transform rotate-90" />
      </motion.div>
    </motion.div>
  );
};

export default ConfirmationModal;

--- components\CrudForm.tsx ---
import React, { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import { X } from 'lucide-react';
import TextFieldCustom from './TextFieldCustom';
import ButtonPrimary from './ButtonPrimary';
import ButtonSecondary from './ButtonSecondary';

interface Field {
  name: string;
  label: string;
  type: 'text' | 'number' | 'email' | 'textarea';
  required?: boolean;
}

interface CrudFormProps {
  fields: Field[];
  initialData?: Record<string, any>;
  onSubmit: (data: Record<string, any>) => void;
  onCancel: () => void;
  title: string;
}

const CrudForm: React.FC<CrudFormProps> = ({ fields, initialData, onSubmit, onCancel, title }) => {
  const [formData, setFormData] = useState<Record<string, any>>({});

  useEffect(() => {
    if (initialData) {
      setFormData(initialData);
    } else {
      const emptyData: Record<string, any> = {};
      fields.forEach((field) => {
        emptyData[field.name] = '';
      });
      setFormData(emptyData);
    }
  }, [fields, initialData]);

  const handleChange = (name: string, value: string) => {
    setFormData((prev) => ({ ...prev, [name]: value }));
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    onSubmit(formData);
  };

  return (
    <motion.div
      className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50"
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      exit={{ opacity: 0 }}
    >
      <motion.form
        onSubmit={handleSubmit}
        className="bg-[#F5F5F5] rounded-xl shadow-lg p-6 w-full max-w-md relative"
        initial={{ scale: 0.9, y: 20 }}
        animate={{ scale: 1, y: 0 }}
        exit={{ scale: 0.9, y: 20 }}
      >
        <button
          type="button"
          onClick={onCancel}
          className="absolute top-4 right-4 text-soft-brown/60 hover:text-soft-brown"
        >
          <X className="w-6 h-6" />
        </button>
        <h2 className="text-2xl font-serif font-bold text-soft-brown mb-6">{title}</h2>
        <div className="space-y-4">
          {fields.map((field) => (
            <TextFieldCustom
              key={field.name}
              id={field.name}
              label={field.label}
              type={field.type}
              value={formData[field.name] || ''}
              onChange={(value) => handleChange(field.name, value)}
              required={field.required}
              multiline={field.type === 'textarea'}
              rows={field.type === 'textarea' ? 4 : undefined}
            />
          ))}
        </div>
        <div className="mt-6 flex justify-end space-x-3">
          <ButtonSecondary type="button" onClick={onCancel}>
            Annuler
          </ButtonSecondary>
          <ButtonPrimary type="submit">{initialData ? 'Mettre à jour' : 'Créer'}</ButtonPrimary>
        </div>
        <div className="absolute bottom-0 left-0 w-32 h-32 bg-floral-pattern bg-no-repeat bg-contain opacity-5 transform rotate-180" />
      </motion.form>
    </motion.div>
  );
};

export default CrudForm;

--- components\DashboardStatCard.tsx ---
import React from 'react';
import { motion } from 'framer-motion';

interface DashboardStatCardProps {
  title: string;
  value: string | number;
  icon: React.ReactNode;
  trend?: { value: number; isPositive: boolean };
  color?: 'green' | 'pink' | 'brown';
}

const DashboardStatCard: React.FC<DashboardStatCardProps> = ({
  title,
  value,
  icon,
  trend,
  color = 'green',
}) => {
  const getColorClasses = () => {
    switch (color) {
      case 'green':
        return 'bg-[#A8D5BA]/10 text-soft-green';
      case 'pink':
        return 'bg-[#F8C1CC]/10 text-powder-pink';
      case 'brown':
        return 'bg-[#D2B48C]/10 text-soft-brown';
      default:
        return 'bg-[#A8D5BA]/10 text-soft-green';
    }
  };

  return (
    <motion.div
      className={`rounded-xl p-6 ${getColorClasses()} relative overflow-hidden`}
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.3 }}
    >
      <div className="flex items-center justify-between mb-4">
        <h3 className="text-lg font-medium text-soft-brown">{title}</h3>
        <div className={`p-2 rounded-full ${getColorClasses()}`}>{icon}</div>
      </div>
      <div className="text-3xl font-bold text-soft-brown mb-2">{value}</div>
      {trend && (
        <div className={`flex items-center text-sm ${trend.isPositive ? 'text-soft-green' : 'text-powder-pink'}`}>
          {trend.isPositive ? '↑' : '↓'} {Math.abs(trend.value)}%
          <span className="ml-1 text-soft-brown/60">vs last month</span>
        </div>
      )}
      <div className="absolute top-0 right-0 w-16 h-16 bg-floral-pattern bg-no-repeat bg-contain opacity-10 transform rotate-90" />
      <div className="absolute bottom-0 left-0 w-12 h-12 bg-floral-pattern bg-no-repeat bg-contain opacity-10 transform -rotate-90" />
    </motion.div>
  );
};

export default DashboardStatCard;

--- components\FeaturedProducts.tsx ---
"use client";

import ProductCard from "./ProductCard";

interface Product {
  id: string;
  nom: string;
  prix: number;
  prix_reduit?: number;
  photos: string[];
}

interface FeaturedProductsProps {
  products: Product[];
  title: string;
}

export default function FeaturedProducts({ products, title }: FeaturedProductsProps) {
  return (
    <section className="bg-off-white py-16">
      <div className=" mx-auto px-4 sm:px-6 lg:px-8">
        <h2 className="text-3xl font-serif font-medium text-soft-brown mb-8 text-center">{title}</h2>
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-8">
          {products.map((product) => (
            <ProductCard key={product.id} product={product} />
          ))}
        </div>
      </div>
    </section>
  );
}

--- components\FeaturedPromotions.tsx ---
"use client";

import { motion } from "framer-motion";
import { Link } from "react-router-dom";

interface Promotion {
  id: string;
  nom: string;
  description: string;
  produits: { id: string; nom: string; prix: number; prix_reduit?: number }[];
}

interface FeaturedPromotionsProps {
  promotions: Promotion[];
  title: string;
}

export default function FeaturedPromotions({ promotions, title }: FeaturedPromotionsProps) {
  return (
    <section className="bg-powder-pink/20 py-16">
      <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
        <h2 className="text-3xl font-serif font-medium text-soft-brown mb-8 text-center">{title}</h2>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
          {promotions.map((promotion, index) => (
            <motion.div
              key={promotion.id}
              className="bg-white rounded-lg shadow-md p-6"
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.5, delay: index * 0.1 }}
            >
              <h3 className="text-xl font-medium text-soft-brown mb-2">{promotion.nom}</h3>
              <p className="text-soft-brown/70 mb-4">{promotion.description}</p>
              <div className="space-y-2">
                {promotion.produits.map((produit) => (
                  <Link key={produit.id} to={`/products/${produit.id}`}>
                    <div className="flex justify-between items-center hover:bg-light-beige p-2 rounded">
                      <span className="text-soft-brown">{produit.nom}</span>
                      <div>
                        {produit.prix_reduit ? (
                          <>
                            <span className="text-powder-pink font-bold">{produit.prix_reduit.toFixed(2)} FCFA</span>
                            <span className="text-soft-brown/60 text-sm line-through ml-2">{produit.prix} FCFA</span>
                          </>
                        ) : (
                          <span className="text-soft-brown font-bold">{produit.prix} FCFA</span>
                        )}
                      </div>
                    </div>
                  </Link>
                ))}
              </div>
            </motion.div>
          ))}
        </div>
      </div>
    </section>
  );
}

--- components\FilterBar.tsx ---
import React, { useState, ChangeEvent } from 'react';
import { Search, Filter, ArrowUpDown } from 'lucide-react';

interface FilterOption {
  id: string;
  label: string;
}

interface SortOption {
  id: string;
  label: string;
  direction: 'asc' | 'desc';
}

interface FilterBarProps {
  onSearch: (query: string) => void;
  onFilter?: (filterId: string) => void;
  onSort?: (sortId: string, direction: 'asc' | 'desc') => void;
  filterOptions?: FilterOption[];
  sortOptions?: SortOption[];
  placeholder?: string;
  className?: string;
}

const FilterBar: React.FC<FilterBarProps> = ({
  onSearch,
  onFilter,
  onSort,
  filterOptions = [],
  sortOptions = [],
  placeholder = 'Rechercher...',
  className = '',
}) => {
  const [searchQuery, setSearchQuery] = useState('');
  const [activeFilter, setActiveFilter] = useState<string | null>(null);
  const [activeSort, setActiveSort] = useState<string | null>(null);
  const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>('asc');

  const handleSearchChange = (e: ChangeEvent<HTMLInputElement>) => {
    const query = e.target.value;
    setSearchQuery(query);
    onSearch(query);
  };

  const handleFilterClick = (filterId: string) => {
    const newFilter = activeFilter === filterId ? null : filterId;
    setActiveFilter(newFilter);
    onFilter?.(newFilter || '');
  };

  const handleSortClick = (sortId: string) => {
    if (activeSort === sortId) {
      const newDirection = sortDirection === 'asc' ? 'desc' : 'asc';
      setSortDirection(newDirection);
      onSort?.(sortId, newDirection);
    } else {
      setActiveSort(sortId);
      setSortDirection('asc');
      onSort?.(sortId, 'asc');
    }
  };

  return (
    <div className={`flex flex-col sm:flex-row gap-3 ${className}`}>
      <div className="relative flex-grow">
        <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
          <Search className="h-4 w-4 text-soft-brown/60" />
        </div>
        <input
          type="text"
          value={searchQuery}
          onChange={handleSearchChange}
          placeholder={placeholder}
          className="block w-full pl-10 pr-3 py-2 border border-[#F5E8C7] rounded-lg text-soft-brown placeholder-[#D2B48C]/60 bg-[#F5F5F5] focus:outline-none focus:ring-2 focus:ring-[#A8D5BA] focus:border-soft-green"
        />
      </div>
      {filterOptions.length > 0 && (
        <div className="relative inline-block">
          <button
            type="button"
            className="inline-flex items-center px-4 py-2 border border-[#F5E8C7] rounded-lg bg-[#F5F5F5] text-soft-brown hover:bg-light-beige/30 focus:outline-none focus:ring-2 focus:ring-[#A8D5BA]"
          >
            <Filter className="h-4 w-4 mr-2" />
            <span>Filtrer</span>
          </button>
          <div className="absolute right-0 mt-2 w-48 rounded-md shadow-lg bg-[#F5F5F5] ring-1 ring-[#F5E8C7] z-10 hidden group-hover:block">
            <div className="py-1" role="menu" aria-orientation="vertical">
              {filterOptions.map((option) => (
                <button
                  key={option.id}
                  onClick={() => handleFilterClick(option.id)}
                  className={`block w-full text-left px-4 py-2 text-sm ${activeFilter === option.id ? 'bg-light-beige text-soft-brown' : 'text-soft-brown hover:bg-light-beige/30'}`}
                  role="menuitem"
                >
                  {option.label}
                </button>
              ))}
            </div>
          </div>
        </div>
      )}
      {sortOptions.length > 0 && (
        <div className="relative inline-block">
          <button
            type="button"
            className="inline-flex items-center px-4 py-2 border border-[#F5E8C7] rounded-lg bg-[#F5F5F5] text-soft-brown hover:bg-light-beige/30 focus:outline-none focus:ring-2 focus:ring-[#A8D5BA]"
          >
            <ArrowUpDown className="h-4 w-4 mr-2" />
            <span>Trier</span>
          </button>
          <div className="absolute right-0 mt-2 w-48 rounded-md shadow-lg bg-[#F5F5F5] ring-1 ring-[#F5E8C7] z-10 hidden group-hover:block">
            <div className="py-1" role="menu" aria-orientation="vertical">
              {sortOptions.map((option) => (
                <button
                  key={option.id}
                  onClick={() => handleSortClick(option.id)}
                  className={`block w-full text-left px-4 py-2 text-sm ${activeSort === option.id ? 'bg-light-beige text-soft-brown' : 'text-soft-brown hover:bg-light-beige/30'}`}
                  role="menuitem"
                >
                  {option.label} {activeSort === option.id && (sortDirection === 'asc' ? '↑' : '↓')}
                </button>
              ))}
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default FilterBar;

--- components\Footer.tsx ---
import React, { useState, useEffect } from 'react';
import { Flower2, Instagram, Facebook, Twitter } from 'lucide-react';
import { Link } from 'react-router-dom';
import { getPublicParameters } from '../services/api';

const Footer: React.FC = () => {
  const [params, setParams] = useState<{ [key: string]: string }>({});

  useEffect(() => {
    const fetchParams = async () => {
      try {
        const response = await getPublicParameters();
        const paramData = response.data.reduce((acc: { [key: string]: string }, param: { cle: string; valeur: string }) => {
          acc[param.cle] = param.valeur;
          return acc;
        }, {});
        setParams(paramData);
      } catch (error) {
        console.error('Erreur lors de la récupération des paramètres publics:', error);
      }
    };
    fetchParams();
  }, []);

  return (
    <footer className="bg-light-beige">
      <div className="max-w-7xl mx-auto py-12 px-4 sm:px-6 lg:px-8">
        <div className="grid grid-cols-1 md:grid-cols-4 gap-8">
          <div className="space-y-4">
            <div className="flex items-center">
              <Flower2 className="h-8 w-8 text-soft-green" />
              <span className="ml-2 text-xl font-serif font-medium text-soft-brown">{params['site_name'] || 'ChezFlora'}</span>
            </div>
            <p className="text-soft-brown/80 text-sm">{params['site_description'] || 'Votre destination pour tout ce qui touche aux fleurs et plantes.'}</p>
            <div className="flex space-x-4">
              <a href="#" className="text-soft-brown hover:text-powder-pink transition-colors duration-200">
                <Instagram className="h-5 w-5" />
              </a>
              <a href="#" className="text-soft-brown hover:text-powder-pink transition-colors duration-200">
                <Facebook className="h-5 w-5" />
              </a>
              <a href="#" className="text-soft-brown hover:text-powder-pink transition-colors duration-200">
                <Twitter className="h-5 w-5" />
              </a>
            </div>
          </div>
          <div>
            <h3 className="text-soft-brown font-medium mb-4">Produits</h3>
            <ul className="space-y-2">
              <li><Link to="/products/flowers" className="text-soft-brown/80 hover:text-powder-pink text-sm">Fleurs</Link></li>
              <li><Link to="/products/plants" className="text-soft-brown/80 hover:text-powder-pink text-sm">Plantes</Link></li>
              <li><Link to="/products/bouquets" className="text-soft-brown/80 hover:text-powder-pink text-sm">Bouquets</Link></li>
            </ul>
          </div>
          <div>
            <h3 className="text-soft-brown font-medium mb-4">Informations</h3>
            <ul className="space-y-2">
              <li><Link to="/about" className="text-soft-brown/80 hover:text-powder-pink text-sm">À propos</Link></li>
              <li><Link to="/contact" className="text-soft-brown/80 hover:text-powder-pink text-sm">Contact</Link></li>
            </ul>
          </div>
          <div>
            <h3 className="text-soft-brown font-medium mb-4">Service client</h3>
            <ul className="space-y-2">
              <li><Link to="/shipping" className="text-soft-brown/80 hover:text-powder-pink text-sm">Livraison</Link></li>
              <li><Link to="/returns" className="text-soft-brown/80 hover:text-powder-pink text-sm">Retours</Link></li>
            </ul>
          </div>
        </div>
        <div className="mt-12 pt-8 border-t border-soft-brown/20">
          <p className="text-center text-soft-brown/70 text-sm">
            © {new Date().getFullYear()} {params['site_name'] || 'ChezFlora'}. Tous droits réservés.
          </p>
        </div>
      </div>
    </footer>
  );
};

export default Footer;

--- components\HeroBanner.tsx ---
"use client";

import { motion } from "framer-motion";
import ButtonPrimary from "./ButtonPrimary";

interface HeroBannerProps {
  title: string;
  subtitle: string;
  buttonText: string;
  buttonLink: string;
  backgroundImage: string;
}

export default function HeroBanner({ title, subtitle, buttonText, buttonLink, backgroundImage }: HeroBannerProps) {
  return (
    <div className="relative h-[70vh] min-h-[500px] w-full overflow-hidden">
      <img
        src={backgroundImage || "/images/hero-fleurs.jpg"}
        alt="Bannière ChezFlora"
        className="w-full h-full object-cover"
      />
      <div className="absolute inset-0 bg-gradient-to-r from-soft-brown/50 to-transparent" />
      <div className="absolute inset-0 bg-floral-pattern bg-repeat opacity-10" />
      <div className="relative h-full max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 flex flex-col justify-center">
        <motion.h1
          className="text-4xl md:text-6xl font-serif font-bold text-white mb-4"
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6 }}
        >
          {title}
        </motion.h1>
        <motion.p
          className="text-xl md:text-2xl text-white/90 mb-8 max-w-2xl"
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6, delay: 0.2 }}
        >
          {subtitle}
        </motion.p>
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6, delay: 0.4 }}
        >
          <ButtonPrimary href={buttonLink} size="lg" className="bg-soft-green hover:bg-soft-green/90">
            {buttonText}
          </ButtonPrimary>
        </motion.div>
      </div>
      <motion.div
        className="absolute bottom-0 left-0 w-full h-16 bg-gradient-to-t from-off-white to-transparent"
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        transition={{ duration: 1, delay: 0.8 }}
      />
    </div>
  );
}

--- components\LoadingSpinner.tsx ---
import React from 'react';

const LoadingSpinner: React.FC = () => {
  return (
    <div className="flex justify-center items-center p-4">
      <div className="relative w-12 h-12">
        <div className="absolute w-full h-full animate-spin">
          <div className="absolute top-0 left-1/2 -ml-1 w-2 h-5 rounded-full bg-[#A8D5BA] origin-bottom"></div>
          <div className="absolute top-1/4 right-1/4 w-2 h-5 rounded-full bg-[#A8D5BA] origin-bottom rotate-45"></div>
          <div className="absolute bottom-1/4 right-0 w-2 h-5 rounded-full bg-[#A8D5BA] origin-bottom rotate-90"></div>
          <div className="absolute bottom-0 right-1/4 w-2 h-5 rounded-full bg-[#A8D5BA] origin-bottom rotate-135"></div>
          <div className="absolute bottom-1/4 left-0 w-2 h-5 rounded-full bg-[#A8D5BA] origin-bottom rotate-180"></div>
          <div className="absolute bottom-0 left-1/4 w-2 h-5 rounded-full bg-[#A8D5BA] origin-bottom rotate-225"></div>
          <div className="absolute top-1/4 left-1/4 w-2 h-5 rounded-full bg-[#A8D5BA] origin-bottom rotate-270"></div>
          <div className="absolute top-0 right-1/4 w-2 h-5 rounded-full bg-[#A8D5BA] origin-bottom rotate-315"></div>
        </div>
        <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-4 h-4 rounded-full bg-[#F8C1CC]"></div>
      </div>
    </div>
  );
};

export default LoadingSpinner;

--- components\LowStockItem.tsx ---
import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { AlertTriangle, Plus, Minus } from 'lucide-react';

interface LowStockItemProps {
  id: string;
  name: string;
  stock: number;
  threshold: number;
  onUpdateStock: (id: string, newStock: number) => void;
}

const LowStockItem: React.FC<LowStockItemProps> = ({ id, name, stock, threshold, onUpdateStock }) => {
  const [isUpdating, setIsUpdating] = useState(false);
  const [localStock, setLocalStock] = useState(stock);

  const handleStockChange = (change: number) => {
    const newStock = localStock + change;
    if (newStock >= 0) {
      setLocalStock(newStock);
    }
  };

  const handleUpdateStock = () => {
    setIsUpdating(true);
    onUpdateStock(id, localStock);
    setTimeout(() => setIsUpdating(false), 1000);
  };

  const stockPercentage = (stock / threshold) * 100;

  return (
    <motion.div
      className="bg-[#F5F5F5] rounded-lg shadow-sm p-4 mb-4 relative overflow-hidden"
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.3 }}
    >
      <div className="flex items-center justify-between mb-2">
        <div className="flex items-center">
          <AlertTriangle className={`w-5 h-5 mr-2 ${stock === 0 ? 'text-powder-pink' : 'text-soft-brown'}`} />
          <h3 className="font-medium text-soft-brown">{name}</h3>
        </div>
        <span className={`text-sm font-medium ${stock === 0 ? 'text-powder-pink' : 'text-soft-brown'}`}>
          ID: {id}
        </span>
      </div>
      <div className="flex items-center justify-between mb-2">
        <div className="flex items-center space-x-2">
          <button
            onClick={() => handleStockChange(-1)}
            className="p-1 rounded-full bg-light-beige text-soft-brown hover:bg-[#A8D5BA]/20 transition-colors"
            disabled={isUpdating}
          >
            <Minus className="w-4 h-4" />
          </button>
          <span className="font-medium text-soft-brown">{localStock}</span>
          <button
            onClick={() => handleStockChange(1)}
            className="p-1 rounded-full bg-light-beige text-soft-brown hover:bg-[#A8D5BA]/20 transition-colors"
            disabled={isUpdating}
          >
            <Plus className="w-4 h-4" />
          </button>
        </div>
        <button
          onClick={handleUpdateStock}
          className={`text-sm font-medium px-3 py-1 rounded-full transition-colors ${isUpdating ? 'bg-[#A8D5BA]/20 text-soft-green cursor-not-allowed' : 'bg-[#A8D5BA] text-[#F5F5F5] hover:bg-[#A8D5BA]/90'}`}
          disabled={isUpdating}
        >
          {isUpdating ? 'Mise à jour...' : 'Mettre à jour'}
        </button>
      </div>
      <div className="relative pt-1">
        <div className="flex mb-2 items-center justify-between">
          <div>
            <span className="text-xs font-semibold inline-block text-soft-brown">{stockPercentage.toFixed(0)}%</span>
          </div>
          <div className="text-right">
            <span className="text-xs font-semibold inline-block text-soft-brown">Seuil: {threshold}</span>
          </div>
        </div>
        <div className="overflow-hidden h-2 mb-4 text-xs flex rounded bg-[#A8D5BA]/20">
          <motion.div
            style={{ width: `${stockPercentage}%` }}
            className="shadow-none flex flex-col text-center whitespace-nowrap text-[#F5F5F5] justify-center bg-[#A8D5BA]"
            initial={{ width: 0 }}
            animate={{ width: `${stockPercentage}%` }}
            transition={{ duration: 0.5 }}
          />
        </div>
      </div>
      <div className="absolute bottom-0 right-0 w-16 h-16 bg-floral-pattern bg-no-repeat bg-contain opacity-5 transform rotate-90" />
    </motion.div>
  );
};

export default LowStockItem;

--- components\ModalContainer.tsx ---
import React, { useState, useEffect } from 'react';
import { X } from 'lucide-react';

interface ModalContainerProps {
  isOpen: boolean;
  onClose: () => void;
  children: React.ReactNode;
  title?: string;
  size?: 'sm' | 'md' | 'lg' | 'xl';
}

export const ModalContainer: React.FC<ModalContainerProps> = ({ isOpen, onClose, children, title, size = 'md' }) => {
  const [isVisible, setIsVisible] = useState(false);

  useEffect(() => {
    if (isOpen) {
      setIsVisible(true);
      document.body.style.overflow = 'hidden';
    } else {
      setTimeout(() => setIsVisible(false), 300);
      document.body.style.overflow = 'unset';
    }
    return () => {
      document.body.style.overflow = 'unset';
    };
  }, [isOpen]);

  if (!isOpen && !isVisible) return null;

  const sizeClasses = {
    sm: 'max-w-md',
    md: 'max-w-lg',
    lg: 'max-w-2xl',
    xl: 'max-w-4xl',
  };

  return (
    <div
      className={`fixed inset-0 z-50 flex items-center justify-center p-4 transition-opacity duration-300 ${isOpen ? 'opacity-100' : 'opacity-0'}`}
      onClick={onClose}
    >
      <div className="absolute inset-0 bg-[#D2B48C]/20 backdrop-blur-sm"></div>
      <div
        className={`relative bg-[#F5F5F5] rounded-xl shadow-lg transform transition-all duration-300 w-full ${sizeClasses[size]} ${isOpen ? 'scale-100' : 'scale-95'}`}
        onClick={(e) => e.stopPropagation()}
      >
        <div className="absolute top-0 right-0 w-32 h-32 overflow-hidden opacity-5 pointer-events-none">
          <div className="absolute -right-8 -top-8 w-40 h-40 bg-floral-pattern bg-no-repeat bg-contain"></div>
        </div>
        {title && (
          <div className="flex items-center justify-between p-4 border-b border-[#F5E8C7]">
            <h3 className="text-lg font-medium text-soft-brown">{title}</h3>
            <button
              onClick={onClose}
              className="p-1 rounded-full text-soft-brown hover:text-powder-pink focus:outline-none focus:ring-2 focus:ring-[#A8D5BA]"
            >
              <X className="w-5 h-5" />
            </button>
          </div>
        )}
        <div className="p-6">{children}</div>
      </div>
    </div>
  );
};

export const ModalHeader: React.FC<{ children: React.ReactNode }> = ({ children }) => (
  <div className="mb-4">
    <h3 className="text-lg font-medium text-soft-brown">{children}</h3>
  </div>
);

export const ModalBody: React.FC<{ children: React.ReactNode }> = ({ children }) => (
  <div className="py-2">{children}</div>
);

export const ModalFooter: React.FC<{ children: React.ReactNode }> = ({ children }) => (
  <div className="mt-6 flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2">{children}</div>
);

--- components\NavBar.tsx ---
"use client"

import { useState, useEffect, useRef } from "react"
import { Link, useNavigate } from "react-router-dom"
import { getPublicParameters, getUserProfile, getCartCount } from "../services/api"
import { Flower2, ShoppingCart, User, Menu, X, LogOut, Heart, Package, ChevronDown, Search } from "lucide-react"
import { motion, AnimatePresence } from "framer-motion"

import logo from "../assets/logo.png";


const NavBar = () => {
  const [isMenuOpen, setIsMenuOpen] = useState(false)
  const [isUserMenuOpen, setIsUserMenuOpen] = useState(false)
  const [isScrolled, setIsScrolled] = useState(false)
  const [params, setParams] = useState<{ [key: string]: string }>({})
  const [isAuthenticated, setIsAuthenticated] = useState(false)
  const [userRole, setUserRole] = useState<string | null>(null)
  const [userName, setUserName] = useState<string | null>(null)
  const [cartCount, setCartCount] = useState(0)
  const navigate = useNavigate()
  const userMenuRef = useRef<HTMLDivElement>(null)
  const mobileMenuRef = useRef<HTMLDivElement>(null)

  // Effet de scroll pour changer l'apparence de la navbar
  useEffect(() => {
    const handleScroll = () => {
      if (window.scrollY > 10) {
        setIsScrolled(true)
      } else {
        setIsScrolled(false)
      }
    }

    window.addEventListener("scroll", handleScroll)
    return () => window.removeEventListener("scroll", handleScroll)
  }, [])

  useEffect(() => {
    const fetchParamsAndUser = async () => {
      try {
        const response = await getPublicParameters()
        const paramData = response.data.reduce(
          (acc: { [key: string]: string }, param: { cle: string; valeur: string }) => {
            acc[param.cle] = param.valeur
            return acc
          },
          {},
        )
        setParams(paramData)

        const token = localStorage.getItem("access_token")
        if (token) {
          const userRes = await getUserProfile()
          setIsAuthenticated(true)
          setUserRole(userRes.data.role)
          setUserName(userRes.data.username)

          // recuperer le nombre de produits dans le panier d'un utilisateur 

          // Simuler un nombre d'articles dans le panier
          setCartCount(await getCartCount())
        }
      } catch (error) {
        console.error("Erreur lors de la récupération des données:", error)
      }
    }
    fetchParamsAndUser()

    const handleClickOutside = (event: MouseEvent) => {
      if (userMenuRef.current && !userMenuRef.current.contains(event.target as Node)) {
        setIsUserMenuOpen(false)
      }

      if (
        mobileMenuRef.current &&
        !mobileMenuRef.current.contains(event.target as Node) &&
        !(event.target as Element).closest("[data-menu-toggle]")
      ) {
        setIsMenuOpen(false)
      }
    }

    document.addEventListener("mousedown", handleClickOutside)
    return () => {
      document.removeEventListener("mousedown", handleClickOutside)
    }
  }, [])

  const handleLogout = () => {
    localStorage.removeItem("access_token")
    setIsAuthenticated(false)
    setUserRole(null)
    setIsUserMenuOpen(false)
    navigate("/")
  }

  const navLinks = [
    { name: "Accueil", path: "/" },
    { name: "Produits", path: "/products" },
    { name: "Services", path: "/services" },
    { name: "Réalisations", path: "/realisations" },
    { name: "Blog", path: "/blog" },
    { name: "À propos", path: "/about" },
    { name: "Contact", path: "/contact" },
  ]


  return (
    <nav
      className={`fixed top-0 left-0 right-0 z-50 transition-all duration-300 ${
        isScrolled ? "bg-white/90 backdrop-blur-md shadow-lg" : "bg-white/80 backdrop-blur-sm"
      }`}
    >
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="flex justify-between items-center h-20">
          {/* Logo */}
          <Link to="/" className="flex items-center group">
              <img src={logo} alt="Logo" width={200}/>
          </Link>

          {/* Navigation - Desktop */}
          <div className="hidden lg:flex items-center justify-center flex-1 max-w-3xl mx-8">
            <div className="flex space-x-1">
              {navLinks.map((link) => (
                <Link
                  key={link.path}
                  to={link.path}
                  className="relative px-4 py-2 text-sm font-medium text-gray-700 hover:text-emerald-600 transition-colors duration-200 group"
                >
                  {link.name}
                  <span className="absolute bottom-0 left-0 w-full h-0.5 bg-emerald-500 scale-x-0 group-hover:scale-x-100 transition-transform duration-300 origin-left"></span>
                </Link>
              ))}
            </div>
          </div>

          {/* Actions - Desktop */}
          <div className="hidden lg:flex items-center space-x-1">
            <Link 
              key={"/products#searchSection"}
              to={"/products"}
              className="p-2 rounded-full text-gray-600 hover:text-emerald-600 hover:bg-emerald-50 transition-colors duration-200">
              <Search className="h-5 w-5" />
            </Link>

            <Link
              to="/cart"
              className="p-2 rounded-full text-gray-600 hover:text-emerald-600 hover:bg-emerald-50 transition-colors duration-200 relative"
            >
              <ShoppingCart className="h-5 w-5" />
              {cartCount > 0 && (
                <span className="absolute -top-1 -right-1 flex items-center justify-center w-5 h-5 bg-emerald-500 text-white text-xs font-bold rounded-full">
                  {cartCount}
                </span>
              )}
            </Link>

            {isAuthenticated ? (
              <div className="relative" ref={userMenuRef}>
                <button
                  onClick={() => setIsUserMenuOpen(!isUserMenuOpen)}
                  className="flex items-center space-x-1 p-2 rounded-full text-gray-600 hover:text-emerald-600 hover:bg-emerald-50 transition-colors duration-200"
                  aria-expanded={isUserMenuOpen}
                  aria-haspopup="true"
                >
                  <User className="h-5 w-5" />
                  <ChevronDown
                    className={`h-4 w-4 transition-transform duration-200 ${isUserMenuOpen ? "rotate-180" : ""}`}
                  />
                </button>

                <AnimatePresence>
                  {isUserMenuOpen && (
                    <motion.div
                      initial={{ opacity: 0, y: 10 }}
                      animate={{ opacity: 1, y: 0 }}
                      exit={{ opacity: 0, y: 10 }}
                      transition={{ duration: 0.2 }}
                      className="absolute right-0 mt-2 w-56 rounded-xl shadow-lg bg-white ring-1 ring-black ring-opacity-5 py-1 z-10 overflow-hidden"
                    >
                      <div className="px-4 py-3 border-b border-gray-100">
                        <p className="text-sm text-gray-500">Connecté en tant que</p>
                        <p className="text-sm font-medium text-gray-800 truncate"> {userName ?? 'utilisateur@exemple.com' } </p>
                      </div>

                      <div className="py-1">
                        <Link
                          to="/account"
                          className="flex items-center px-4 py-2 text-sm text-gray-700 hover:bg-emerald-50 hover:text-emerald-600"
                        >
                          <User className="h-4 w-4 mr-3 text-gray-400" />
                          Mon compte
                        </Link>
                        <Link
                          to="/orders"
                          className="flex items-center px-4 py-2 text-sm text-gray-700 hover:bg-emerald-50 hover:text-emerald-600"
                        >
                          <Package className="h-4 w-4 mr-3 text-gray-400" />
                          Mes commandes
                        </Link>
                        <Link
                          to="/wishlist"
                          className="flex items-center px-4 py-2 text-sm text-gray-700 hover:bg-emerald-50 hover:text-emerald-600"
                        >
                          <Heart className="h-4 w-4 mr-3 text-gray-400" />
                          Ma liste de souhaits
                        </Link>
                      </div>

                      <div className="py-1 border-t border-gray-100">
                        <button
                          onClick={handleLogout}
                          className="flex w-full items-center px-4 py-2 text-sm text-gray-700 hover:bg-emerald-50 hover:text-emerald-600"
                        >
                          <LogOut className="h-4 w-4 mr-3 text-gray-400" />
                          Déconnexion
                        </button>
                      </div>
                    </motion.div>
                  )}
                </AnimatePresence>
              </div>
            ) : (
              <Link
                to="/auth"
                className="flex items-center px-4 py-2 text-sm font-medium text-white bg-emerald-600 rounded-lg shadow-sm hover:bg-emerald-500 transition-colors duration-200"
              >
                <span>Connexion</span>
              </Link>
            )}
          </div>

          {/* Mobile menu button */}
          <div className="flex items-center lg:hidden">
            <Link
              to="/cart"
              className="p-2 mr-2 rounded-full text-gray-600 hover:text-emerald-600 transition-colors duration-200 relative"
            >
              <ShoppingCart className="h-5 w-5" />
              {cartCount > 0 && (
                <span className="absolute -top-1 -right-1 flex items-center justify-center w-5 h-5 bg-emerald-500 text-white text-xs font-bold rounded-full">
                  {cartCount}
                </span>
              )}
            </Link>

            <button
              data-menu-toggle
              onClick={() => setIsMenuOpen(!isMenuOpen)}
              className="inline-flex items-center justify-center p-2 rounded-md text-gray-600 hover:text-emerald-600 hover:bg-emerald-50 transition-colors duration-200"
              aria-expanded={isMenuOpen}
            >
              <span className="sr-only">Ouvrir le menu</span>
              {isMenuOpen ? <X className="block h-6 w-6" /> : <Menu className="block h-6 w-6" />}
            </button>
          </div>
        </div>
      </div>

      {/* Mobile menu */}
      <AnimatePresence>
        {isMenuOpen && (
          <motion.div
            ref={mobileMenuRef}
            initial={{ opacity: 0, height: 0 }}
            animate={{ opacity: 1, height: "auto" }}
            exit={{ opacity: 0, height: 0 }}
            transition={{ duration: 0.3, ease: "easeInOut" }}
            className="lg:hidden overflow-hidden bg-white shadow-lg"
          >
            <div className="px-2 pt-2 pb-3 space-y-1 sm:px-3 max-h-[70vh] overflow-y-auto">
              <div className="relative mx-2 my-3">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
                <input
                  type="search"
                  placeholder="Rechercher..."
                  className="w-full pl-10 pr-4 py-2 text-sm text-gray-700 bg-gray-100 rounded-lg focus:outline-none focus:ring-2 focus:ring-emerald-500 focus:bg-white transition-all duration-200"
                />
              </div>

              {navLinks.map((link) => (
                <Link
                  key={link.path}
                  to={link.path}
                  className="block px-3 py-2.5 rounded-lg text-base font-medium text-gray-700 hover:text-emerald-600 hover:bg-emerald-50 transition-colors duration-200"
                  onClick={() => setIsMenuOpen(false)}
                >
                  {link.name}
                </Link>
              ))}

              <div className="pt-4 pb-1 border-t border-gray-200">
                {isAuthenticated ? (
                  <>
                    <div className="px-3 py-2">
                      <p className="text-xs font-medium text-gray-500">COMPTE UTILISATEUR</p>
                    </div>
                    <Link
                      to="/account"
                      className="flex items-center px-3 py-2.5 rounded-lg text-base font-medium text-gray-700 hover:text-emerald-600 hover:bg-emerald-50 transition-colors duration-200"
                      onClick={() => setIsMenuOpen(false)}
                    >
                      <User className="h-5 w-5 mr-3 text-gray-400" />
                      Mon compte
                    </Link>
                    <Link
                      to="/orders"
                      className="flex items-center px-3 py-2.5 rounded-lg text-base font-medium text-gray-700 hover:text-emerald-600 hover:bg-emerald-50 transition-colors duration-200"
                      onClick={() => setIsMenuOpen(false)}
                    >
                      <Package className="h-5 w-5 mr-3 text-gray-400" />
                      Mes commandes
                    </Link>
                    <Link
                      to="/wishlist"
                      className="flex items-center px-3 py-2.5 rounded-lg text-base font-medium text-gray-700 hover:text-emerald-600 hover:bg-emerald-50 transition-colors duration-200"
                      onClick={() => setIsMenuOpen(false)}
                    >
                      <Heart className="h-5 w-5 mr-3 text-gray-400" />
                      Ma liste de souhaits
                    </Link>
                    <button
                      onClick={() => {
                        handleLogout()
                        setIsMenuOpen(false)
                      }}
                      className="flex items-center w-full px-3 py-2.5 rounded-lg text-base font-medium text-gray-700 hover:text-emerald-600 hover:bg-emerald-50 transition-colors duration-200"
                    >
                      <LogOut className="h-5 w-5 mr-3 text-gray-400" />
                      Déconnexion
                    </button>
                  </>
                ) : (
                  <div className="px-3 py-3">
                    <Link
                      to="/auth"
                      className="flex items-center justify-center w-full px-4 py-2.5 text-base font-medium text-white bg-emerald-600 rounded-lg shadow-sm hover:bg-emerald-500 transition-colors duration-200"
                      onClick={() => setIsMenuOpen(false)}
                    >
                      <User className="h-5 w-5 mr-2" />
                      Connexion
                    </Link>
                  </div>
                )}
              </div>
            </div>
          </motion.div>
        )}
      </AnimatePresence>
    </nav>
  )
}

export default NavBar



--- components\OrderItem.tsx ---
import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { Calendar, Package, ChevronDown, ChevronUp } from 'lucide-react';

interface OrderItemProps {
  id: string;
  date: string;
  status: 'pending' | 'processing' | 'shipped' | 'delivered' | 'cancelled';
  total: number;
  items: { name: string; quantity: number }[];
  onViewDetails: (id: string) => void;
}

const OrderItem: React.FC<OrderItemProps> = ({ id, date, status, total, items, onViewDetails }) => {
  const [isExpanded, setIsExpanded] = useState(false);

  const getStatusColor = () => {
    switch (status) {
      case 'pending':
        return 'bg-[#D2B48C]/20 text-soft-brown';
      case 'processing':
        return 'bg-[#A8D5BA]/20 text-soft-green';
      case 'shipped':
        return 'bg-[#F8C1CC]/20 text-powder-pink';
      case 'delivered':
        return 'bg-[#B2F2BB]/40 text-soft-green';
      case 'cancelled':
        return 'bg-[#F8C1CC]/40 text-powder-pink';
      default:
        return 'bg-light-beige text-soft-brown';
    }
  };

  return (
    <motion.div
      className="bg-[#F5F5F5] rounded-xl shadow-sm overflow-hidden mb-4"
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.3 }}
    >
      <div className="p-4 flex items-center justify-between cursor-pointer" onClick={() => setIsExpanded(!isExpanded)}>
        <div className="flex items-center space-x-4">
          <Package className="w-6 h-6 text-soft-green" />
          <div>
            <h3 className="font-medium text-soft-brown">Commande #{id}</h3>
            <div className="flex items-center text-soft-brown/70 text-sm">
              <Calendar className="w-4 h-4 mr-1" />
              <span>{date}</span>
            </div>
          </div>
        </div>
        <div className="flex items-center space-x-4">
          <span className={`px-2 py-1 rounded-full text-xs font-medium ${getStatusColor()}`}>
            {status.charAt(0).toUpperCase() + status.slice(1)}
          </span>
          <span className="font-bold text-soft-brown">{total.toFixed(2)} FCFA</span>
          {isExpanded ? (
            <ChevronUp className="w-5 h-5 text-soft-brown" />
          ) : (
            <ChevronDown className="w-5 h-5 text-soft-brown" />
          )}
        </div>
      </div>
      {isExpanded && (
        <motion.div
          className="px-4 pb-4 border-t border-[#F5E8C7]"
          initial={{ opacity: 0, height: 0 }}
          animate={{ opacity: 1, height: 'auto' }}
          exit={{ opacity: 0, height: 0 }}
          transition={{ duration: 0.3 }}
        >
          <ul className="mt-2 space-y-2">
            {items.map((item, index) => (
              <li key={index} className="flex justify-between text-soft-brown/80">
                <span>{item.name}</span>
                <span>x{item.quantity}</span>
              </li>
            ))}
          </ul>
          <button
            onClick={() => onViewDetails(id)}
            className="mt-4 text-soft-green hover:underline focus:outline-none"
          >
            Voir les détails
          </button>
        </motion.div>
      )}
      <div className="absolute bottom-0 right-0 w-16 h-16 bg-floral-pattern bg-no-repeat bg-contain opacity-5" />
    </motion.div>
  );
};

export default OrderItem;

--- components\PageContainer.tsx ---
import React from 'react';

interface PageContainerProps {
  children: React.ReactNode;
  className?: string;
}

const PageContainer: React.FC<PageContainerProps> = ({ children, className = '' }) => {
  return (
    <main className={`min-h-screen bg-[#F5F5F5] ${className}`} style={{marginTop: 50}}>
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">{children}</div>
    </main>
  );
};

export default PageContainer;

--- components\PaginationControls.tsx ---
import React from 'react';
import { ChevronLeft, ChevronRight } from 'lucide-react';

interface PaginationControlsProps {
  currentPage: number;
  totalPages: number;
  onPageChange: (page: number) => void;
}

const PaginationControls: React.FC<PaginationControlsProps> = ({ currentPage, totalPages, onPageChange }) => {
  const pageNumbers = Array.from({ length: totalPages }, (_, i) => i + 1);

  return (
    <nav className="flex justify-center items-center space-x-2 mt-8">
      <button
        onClick={() => onPageChange(currentPage - 1)}
        disabled={currentPage === 1}
        className="p-2 rounded-full bg-[#F5F5F5] text-soft-brown hover:bg-light-beige disabled:opacity-50 disabled:cursor-not-allowed"
      >
        <ChevronLeft className="w-5 h-5" />
      </button>
      {pageNumbers.map((number) => (
        <button
          key={number}
          onClick={() => onPageChange(number)}
          className={`w-8 h-8 rounded-full ${currentPage === number ? 'bg-[#A8D5BA] text-[#F5F5F5]' : 'bg-[#F5F5F5] text-soft-brown hover:bg-light-beige'}`}
        >
          {number}
        </button>
      ))}
      <button
        onClick={() => onPageChange(currentPage + 1)}
        disabled={currentPage === totalPages}
        className="p-2 rounded-full bg-[#F5F5F5] text-soft-brown hover:bg-light-beige disabled:opacity-50 disabled:cursor-not-allowed"
      >
        <ChevronRight className="w-5 h-5" />
      </button>
    </nav>
  );
};

export default PaginationControls;

--- components\PaymentForm.tsx ---
import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { CreditCard, Calendar, Lock } from 'lucide-react';
import TextFieldCustom from './TextFieldCustom';
import ButtonPrimary from './ButtonPrimary';

interface PaymentFormProps {
  onSubmit: (data: { cardNumber: string; cardHolder: string; expirationDate: string; cvv: string }) => void;
}

const PaymentForm: React.FC<PaymentFormProps> = ({ onSubmit }) => {
  const [cardNumber, setCardNumber] = useState('');
  const [cardHolder, setCardHolder] = useState('');
  const [expirationDate, setExpirationDate] = useState('');
  const [cvv, setCvv] = useState('');

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    onSubmit({ cardNumber, cardHolder, expirationDate, cvv });
  };

  return (
    <motion.form
      onSubmit={handleSubmit}
      className="bg-[#F5F5F5] rounded-xl shadow-md p-6 relative overflow-hidden"
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.3 }}
    >
      <h2 className="text-2xl font-serif font-bold text-soft-brown mb-6">Informations de paiement</h2>
      <div className="space-y-4">
        <TextFieldCustom
          id="card-number"
          label="Numéro de carte"
          value={cardNumber}
          onChange={setCardNumber}
          placeholder="1234 5678 9012 3456"
          required
        />
        <TextFieldCustom
          id="card-holder"
          label="Titulaire de la carte"
          value={cardHolder}
          onChange={setCardHolder}
          placeholder="John Doe"
          required
        />
        <div className="flex space-x-4">
          <TextFieldCustom
            id="expiration-date"
            label="Date d'expiration"
            value={expirationDate}
            onChange={setExpirationDate}
            placeholder="MM/AA"
            required
          />
          <TextFieldCustom
            id="cvv"
            label="CVV"
            value={cvv}
            onChange={setCvv}
            placeholder="123"
            required
          />
        </div>
      </div>
      <ButtonPrimary type="submit" fullWidth className="mt-6">
        Confirmer le paiement
      </ButtonPrimary>
      <div className="absolute bottom-0 right-0 w-32 h-32 bg-floral-pattern bg-no-repeat bg-contain opacity-5 transform rotate-180" />
    </motion.form>
  );
};

export default PaymentForm;

--- components\PaymentItem.tsx ---
import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { CreditCard, Calendar, ChevronDown, ChevronUp } from 'lucide-react';

interface PaymentItemProps {
  id: string;
  date: string;
  amount: number;
  type: 'subscription' | 'one-time' | 'refund';
  cardLast4: string;
  onViewDetails: (id: string) => void;
}

const PaymentItem: React.FC<PaymentItemProps> = ({ id, date, amount, type, cardLast4, onViewDetails }) => {
  const [isExpanded, setIsExpanded] = useState(false);

  const getTypeColor = () => {
    switch (type) {
      case 'subscription':
        return 'bg-[#A8D5BA]/20 text-soft-green';
      case 'one-time':
        return 'bg-[#F8C1CC]/20 text-powder-pink';
      case 'refund':
        return 'bg-[#D2B48C]/20 text-soft-brown';
      default:
        return 'bg-light-beige text-soft-brown';
    }
  };

  const getTypeLabel = () => {
    switch (type) {
      case 'subscription':
        return 'Abonnement';
      case 'one-time':
        return 'Achat unique';
      case 'refund':
        return 'Remboursement';
      default:
        return 'Paiement';
    }
  };

  return (
    <motion.div
      className="bg-[#F5F5F5] rounded-xl shadow-sm overflow-hidden mb-4"
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.3 }}
    >
      <div className="p-4 flex items-center justify-between cursor-pointer" onClick={() => setIsExpanded(!isExpanded)}>
        <div className="flex items-center space-x-4">
          <CreditCard className="w-6 h-6 text-soft-green" />
          <div>
            <h3 className="font-medium text-soft-brown">Paiement #{id}</h3>
            <div className="flex items-center text-soft-brown/70 text-sm">
              <Calendar className="w-4 h-4 mr-1" />
              <span>{date}</span>
            </div>
          </div>
        </div>
        <div className="flex items-center space-x-4">
          <span className={`px-2 py-1 rounded-full text-xs font-medium ${getTypeColor()}`}>{getTypeLabel()}</span>
          <span className="font-bold text-soft-brown">{amount.toFixed(2)} FCFA</span>
          {isExpanded ? (
            <ChevronUp className="w-5 h-5 text-soft-brown" />
          ) : (
            <ChevronDown className="w-5 h-5 text-soft-brown" />
          )}
        </div>
      </div>
      {isExpanded && (
        <motion.div
          className="px-4 pb-4 border-t border-[#F5E8C7]"
          initial={{ opacity: 0, height: 0 }}
          animate={{ opacity: 1, height: 'auto' }}
          exit={{ opacity: 0, height: 0 }}
          transition={{ duration: 0.3 }}
        >
          <div className="mt-2 space-y-2 text-soft-brown/80">
            <p>Type de paiement : {getTypeLabel()}</p>
            <p>Carte utilisée : **** **** **** {cardLast4}</p>
          </div>
          <button
            onClick={() => onViewDetails(id)}
            className="mt-4 text-soft-green hover:underline focus:outline-none"
          >
            Voir les détails
          </button>
        </motion.div>
      )}
      <div className="absolute bottom-0 right-0 w-16 h-16 bg-floral-pattern bg-no-repeat bg-contain opacity-5" />
    </motion.div>
  );
};

export default PaymentItem;

--- components\ProductCard.tsx ---
"use client";

import { motion } from "framer-motion";
import { Link } from "react-router-dom";

interface Photo {
  image: string;
}

interface Product {
  id: string;
  nom: string;
  prix: number;
  prix_reduit?: number;
  photos?: Photo[];
  description?: string; // Optionnel pour les vues où on ne montre pas la description
}

interface ProductCardProps {
  product: Product;
}

export default function ProductCard({ product }: ProductCardProps) {
  // Vérification pour éviter les erreurs si product ou photos est undefined
  if (!product) return null;

  const photoUrl = product.photos && product.photos.length > 0 
    ? product.photos[0].image 
    : "/images/placeholder-image.jpg";

  return (
    <motion.div
      className="bg-white rounded-lg shadow-md overflow-hidden"
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.5 }}
    >
      <Link to={`/products/${product.id}`}>
        <div className="block relative h-64 overflow-hidden">
        <img
            src={photoUrl}
            alt={product.nom}
            className="w-full h-full object-cover transition-transform duration-300 ease-in-out transform hover:scale-105"
          />
          {product.prix_reduit != product.prix && product.prix_reduit && (
            <div className="absolute top-2 right-2 bg-powder-pink text-white text-xs font-bold px-2 py-1 rounded-full">
              Promo
            </div>
          )}
        </div>
      </Link>
      <div className="p-4">
        <h3 className="font-medium text-soft-brown mb-2">{product.nom}</h3>
        {product.description && (
          <p className="text-soft-brown/70 line-clamp-2 mb-2">{product.description}</p>
        )}
        <div className="flex items-baseline">
          {product.prix_reduit != product.prix && product.prix_reduit ? (
            <>
              <span className="text-powder-pink font-bold">{product.prix_reduit} FCFA</span>
              <span className="text-soft-brown/60 text-sm line-through ml-2">{product.prix} FCFA</span>
            </>
          ) : (
            <span className="text-soft-brown font-bold">{product.prix} FCFA</span>
          )}
        </div>
      </div>
    </motion.div>
  );
}

--- components\ProfileInfo.tsx ---
import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { User, Mail, Star, Edit2 } from 'lucide-react';
import ButtonSecondary from './ButtonSecondary';

interface ProfileInfoProps {
  username: string;
  email: string;
  role: string;
  onEdit: () => void;
}

const ProfileInfo: React.FC<ProfileInfoProps> = ({ username, email, role, onEdit }) => {
  const [isHovered, setIsHovered] = useState(false);

  return (
    <motion.div
      className="bg-[#F5F5F5] rounded-xl shadow-md p-6 relative overflow-hidden"
      onMouseEnter={() => setIsHovered(true)}
      onMouseLeave={() => setIsHovered(false)}
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.5 }}
    >
      <div className="flex items-center mb-6">
        <div className="w-16 h-16 bg-[#A8D5BA]/20 rounded-full flex items-center justify-center mr-4">
          <User className="w-8 h-8 text-soft-green" />
        </div>
        <div>
          <h2 className="text-2xl font-serif font-bold text-soft-brown">{username}</h2>
          <p className="text-soft-brown/70">{role}</p>
        </div>
      </div>
      <div className="space-y-4">
        <div className="flex items-center">
          <Mail className="w-5 h-5 text-soft-green mr-2" />
          <span className="text-soft-brown">{email}</span>
        </div>
        <div className="flex items-center">
          <Star className="w-5 h-5 text-soft-green mr-2" />
          <span className="text-soft-brown">Membre depuis {new Date().getFullYear()}</span>
        </div>
      </div>
      <motion.div
        className="absolute top-4 right-4"
        initial={{ opacity: 0 }}
        animate={{ opacity: isHovered ? 1 : 0 }}
        transition={{ duration: 0.2 }}
      >
        <ButtonSecondary onClick={onEdit}>
          <Edit2 className="w-4 h-4 mr-2" />
          Modifier le profil
        </ButtonSecondary>
      </motion.div>
      <div className="absolute bottom-0 right-0 w-32 h-32 bg-floral-pattern bg-no-repeat bg-contain opacity-5" />
    </motion.div>
  );
};

export default ProfileInfo;

--- components\ProtectedRoute.tsx ---
import React, { useEffect, useState } from 'react';
import { Navigate } from 'react-router-dom';
import { getUserProfile } from '../services/api';

interface ProtectedRouteProps {
  children: React.ReactNode;
  requiredRole?: 'admin' | 'user'; // Rôle requis (optionnel)
}

const ProtectedRoute: React.FC<ProtectedRouteProps> = ({ children, requiredRole }) => {
  const [userRole, setUserRole] = useState<string | null>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const checkAuth = async () => {
      const token = localStorage.getItem('access_token');
      if (!token) {
        setLoading(false);
        return;
      }

      try {
        const userRes = await getUserProfile();
        setUserRole(userRes.data.role); // Suppose que /users/me/ renvoie un champ 'role'
      } catch (err) {
        localStorage.removeItem('access_token');
      } finally {
        setLoading(false);
      }
    };

    checkAuth();
  }, []);

  if (loading) {
    return <div className="text-center py-16">Chargement...</div>;
  }

  const token = localStorage.getItem('access_token');
  if (!token) {
    return <Navigate to="/auth" replace />;
  }

  if (requiredRole && userRole !== requiredRole) {
    return <Navigate to="/" replace />;
  }

  return <>{children}</>;
};

export default ProtectedRoute;

--- components\RecentArticles.tsx ---
"use client";

import { motion } from "framer-motion";
import { Link } from "react-router-dom";

interface Article {
  id: string;
  title: string;
  excerpt: string;
  imageUrl: string;
  link: string;
}

interface RecentArticlesProps {
  articles: Article[];
  title: string;
}

export default function RecentArticles({ articles, title }: RecentArticlesProps) {
  return (
    <section className="bg-light-beige py-16">
      <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
        <h2 className="text-3xl font-serif font-medium text-soft-brown mb-8 text-center">{title}</h2>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
          {articles.map((article, index) => (
            <motion.div
              key={article.id}
              className="bg-white rounded-lg shadow-md overflow-hidden"
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.5, delay: index * 0.1 }}
            >
              <Link to={article.link}>
                <div className="block relative h-48 overflow-hidden">
                  <img
                    src={article.imageUrl || "/images/article-placeholder.jpg"}
                    alt={article.title}
                    className="w-full h-full object-cover transition-transform duration-300 ease-in-out transform hover:scale-105"
                  />
                </div>
              </Link>
              <div className="p-6">
                <h3 className="text-xl font-medium text-soft-brown mb-2">{article.title}</h3>
                <p className="text-soft-brown/70 mb-4 line-clamp-3">{article.excerpt}</p>
                <Link to={article.link}>
                  <span className="text-soft-green hover:underline">Lire la suite</span>
                </Link>
              </div>
            </motion.div>
          ))}
        </div>
      </div>
    </section>
  );
}

--- components\SearchBar.tsx ---
import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { Search } from 'lucide-react';

interface SearchBarProps {
  onSearch: (query: string) => void;
  placeholder?: string;
}

const SearchBar: React.FC<SearchBarProps> = ({ onSearch, placeholder = 'Rechercher...' }) => {
  const [query, setQuery] = useState('');

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    onSearch(query);
  };

  return (
    <motion.form
      onSubmit={handleSubmit}
      className="relative"
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.3 }}
    >
      <input
        type="text"
        value={query}
        onChange={(e) => setQuery(e.target.value)}
        placeholder={placeholder}
        className="w-full py-2 pl-10 pr-4 text-soft-brown placeholder-[#D2B48C]/60 bg-[#F5F5F5] border border-[#F5E8C7] rounded-full focus:outline-none focus:ring-2 focus:ring-[#A8D5BA] focus:border-soft-green"
      />
      <button
        type="submit"
        className="absolute left-3 top-1/2 transform -translate-y-1/2 text-soft-brown/60 hover:text-soft-brown"
      >
        <Search className="w-5 h-5" />
      </button>
    </motion.form>
  );
};

export default SearchBar;

--- components\ServicesOverview.tsx ---
"use client";

import type React from "react";
import { motion } from "framer-motion";
import { Link } from "react-router-dom";

interface Service {
  title: string;
  description: string;
  icon: React.ReactNode;
  link: string;
}

interface ServicesOverviewProps {
  services: Service[];
  title: string;
}

export default function ServicesOverview({ services, title }: ServicesOverviewProps) {
  return (
    <section className="bg-light-beige py-16">
      <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
        <h2 className="text-3xl font-serif font-medium text-soft-brown mb-12 text-center">{title}</h2>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
          {services.map((service, index) => (
            <motion.div
              key={index}
              className="bg-white rounded-lg shadow-md p-6 flex flex-col items-center text-center"
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.5, delay: index * 0.1 }}
            >
              <div className="w-16 h-16 bg-soft-green/20 rounded-full flex items-center justify-center mb-4">
                {service.icon}
              </div>
              <h3 className="text-xl font-medium text-soft-brown mb-2">{service.title}</h3>
              <p className="text-soft-brown/70 mb-4">{service.description}</p>
              <Link to={service.link}>
                <span className="text-soft-green hover:underline mt-auto">En savoir plus</span>
              </Link>
            </motion.div>
          ))}
        </div>
      </div>
    </section>
  );
}

--- components\StatusBadge.tsx ---
import React from 'react';

type StatusType = 'success' | 'warning' | 'error' | 'info' | 'default';

interface StatusBadgeProps {
  children: React.ReactNode;
  status?: StatusType;
  className?: string;
}

const StatusBadge: React.FC<StatusBadgeProps> = ({ children, status = 'default', className = '' }) => {
  const getStatusStyles = () => {
    switch (status) {
      case 'success':
        return 'bg-[#B2F2BB] text-soft-green border-soft-green';
      case 'warning':
        return 'bg-light-beige text-soft-brown border-soft-brown';
      case 'error':
        return 'bg-[#FFC9C9] text-powder-pink border-powder-pink';
      case 'info':
        return 'bg-[#B2F2BB]/50 text-soft-green border-soft-green/50';
      default:
        return 'bg-light-beige/50 text-soft-brown border-[#F5E8C7]';
    }
  };

  return (
    <span
      className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium border ${getStatusStyles()} ${className}`}
    >
      {children}
    </span>
  );
};

export default StatusBadge;

--- components\SubscriptionPlanCard.tsx ---
import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { Check } from 'lucide-react';
import ButtonPrimary from './ButtonPrimary';

interface SubscriptionPlanCardProps {
  name: string;
  price: number;
  frequency: 'monthly' | 'yearly';
  features: string[];
  isPopular?: boolean;
  onSubscribe: () => void;
}

const SubscriptionPlanCard: React.FC<SubscriptionPlanCardProps> = ({
  name,
  price,
  frequency,
  features,
  isPopular = false,
  onSubscribe,
}) => {
  const [isHovered, setIsHovered] = useState(false);

  return (
    <motion.div
      className={`bg-[#F5F5F5] rounded-xl shadow-md overflow-hidden relative ${isPopular ? 'border-2 border-soft-green' : ''}`}
      onMouseEnter={() => setIsHovered(true)}
      onMouseLeave={() => setIsHovered(false)}
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.3 }}
    >
      {isPopular && (
        <div className="absolute top-4 right-4 bg-[#A8D5BA] text-[#F5F5F5] text-xs font-bold px-3 py-1 rounded-full">
          Populaire
        </div>
      )}
      <div className="p-6">
        <h3 className="text-2xl font-serif font-bold text-soft-brown mb-2">{name}</h3>
        <div className="flex items-baseline mb-4">
          <span className="text-3xl font-bold text-soft-brown">{price}FCFA</span>
          <span className="text-soft-brown/70 ml-1">/{frequency === 'monthly' ? 'mois' : 'an'}</span>
        </div>
        <ul className="space-y-2 mb-6">
          {features.map((feature, index) => (
            <li key={index} className="flex items-center text-soft-brown/80">
              <Check className="w-5 h-5 text-soft-green mr-2" />
              {feature}
            </li>
          ))}
        </ul>
        <ButtonPrimary onClick={onSubscribe} fullWidth>
          S'abonner
        </ButtonPrimary>
      </div>
      <motion.div
        className="absolute bottom-0 left-0 w-32 h-32 bg-floral-pattern bg-no-repeat bg-contain opacity-10"
        initial={{ rotate: 0 }}
        animate={{ rotate: isHovered ? -90 : 0 }}
        transition={{ duration: 0.3 }}
      />
    </motion.div>
  );
};

export default SubscriptionPlanCard;

--- components\TableCustom.tsx ---
import React from 'react';

interface TableCustomProps {
  children: React.ReactNode;
  className?: string;
}

export const TableCustom: React.FC<TableCustomProps> = ({ children, className = '' }) => {
  return (
    <div className={`overflow-x-auto rounded-lg border border-[#F5E8C7] ${className}`}>
      <table className="min-w-full divide-y divide-[#F5E8C7]">{children}</table>
    </div>
  );
};

interface TableHeaderProps {
  children: React.ReactNode;
}

export const TableHeader: React.FC<TableHeaderProps> = ({ children }) => {
  return (
    <thead className="bg-light-beige/50">
      <tr>{children}</tr>
    </thead>
  );
};

interface TableHeaderCellProps {
  children: React.ReactNode;
  className?: string;
}

export const TableHeaderCell: React.FC<TableHeaderCellProps> = ({ children, className = '' }) => {
  return (
    <th
      scope="col"
      className={`px-6 py-3 text-left text-xs font-medium text-soft-brown uppercase tracking-wider ${className}`}
    >
      {children}
    </th>
  );
};

interface TableBodyProps {
  children: React.ReactNode;
}

export const TableBody: React.FC<TableBodyProps> = ({ children }) => {
  return <tbody className="bg-[#F5F5F5] divide-y divide-[#F5E8C7]">{children}</tbody>;
};

interface TableRowProps {
  children: React.ReactNode;
  onClick?: () => void;
  className?: string;
}

export const TableRow: React.FC<TableRowProps> = ({ children, onClick, className = '' }) => {
  return (
    <tr
      className={`${onClick ? 'cursor-pointer hover:bg-light-beige/20' : ''} ${className}`}
      onClick={onClick}
    >
      {children}
    </tr>
  );
};

interface TableCellProps {
  children: React.ReactNode;
  className?: string;
}

export const TableCell: React.FC<TableCellProps> = ({ children, className = '' }) => {
  return (
    <td className={`px-6 py-4 whitespace-nowrap text-sm text-soft-brown ${className}`}>
      {children}
    </td>
  );
};

--- components\TextFieldCustom.tsx ---
import React, { useState, ChangeEvent, FocusEvent } from 'react';

interface TextFieldCustomProps {
  id: string;
  label: string;
  value: string;
  onChange: (value: string) => void;
  type?: string;
  placeholder?: string;
  error?: string;
  required?: boolean;
  disabled?: boolean;
  className?: string;
  suffix?: React.ReactNode;
  icon?: React.ReactNode;  // Ajout de la prop icon
  onBlur?: (e: FocusEvent<HTMLInputElement>) => void;
}

const TextFieldCustom: React.FC<TextFieldCustomProps> = ({
  id,
  label,
  value,
  onChange,
  type = 'text',
  placeholder = '',
  error,
  required = false,
  disabled = false,
  className = '',
  suffix,
  icon,
  onBlur,
}) => {
  const [isFocused, setIsFocused] = useState(false);

  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {
    onChange(e.target.value);
  };

  const handleFocus = () => {
    setIsFocused(true);
  };

  const handleBlur = (e: FocusEvent<HTMLInputElement>) => {
    setIsFocused(false);
    onBlur?.(e);
  };

  return (
    <div className={`relative ${className}`}>
      <label
        htmlFor={id}
        className={`block text-sm font-medium transition-all duration-200 ${error ? 'text-powder-pink' : 'text-soft-brown'} ${required ? 'after:content-["*"] after:ml-0.5 after:text-powder-pink' : ''}`}
      >
        {label}
      </label>
      <div className="mt-1 relative rounded-md shadow-sm">
        {icon && (
          <div className="absolute left-3 top-1/2 transform -translate-y-1/2">
            {icon}
          </div>
        )}
        <input
          type={type}
          id={id}
          value={value}
          onChange={handleChange}
          onFocus={handleFocus}
          onBlur={handleBlur}
          placeholder={placeholder}
          disabled={disabled}
          className={`
            block w-full px-3 py-2 ${icon ? 'pl-10' : 'pl-3'} ${suffix ? 'pr-10' : 'pr-3'} bg-[#F5F5F5] border rounded-md shadow-sm placeholder-[#D2B48C]/50
            focus:outline-none focus:ring-2 focus:ring-offset-0 disabled:opacity-50 disabled:cursor-not-allowed
            transition-all duration-200
            ${error ? 'border-powder-pink focus:border-powder-pink focus:ring-[#F8C1CC]/50' : isFocused ? 'border-soft-green focus:border-soft-green focus:ring-[#A8D5BA]/50' : 'border-[#F5E8C7] focus:border-soft-green focus:ring-[#A8D5BA]/50'}
          `}
        />
        {suffix && (
          <div className="absolute right-2 top-1/2 transform -translate-y-1/2">
            {suffix}
          </div>
        )}
        {isFocused && !error && !suffix && (
          <div className="absolute right-3 top-1/2 transform -translate-y-1/2 pointer-events-none">
            <div className="w-4 h-4 text-soft-green opacity-50">
              <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path
                  d="M12 3C12 7.97056 16.0294 12 21 12C16.0294 12 12 16.0294 12 21C12 16.0294 7.97056 12 3 12C7.97056 12 12 7.97056 12 3Z"
                  fill="currentColor"
                />
              </svg>
            </div>
          </div>
        )}
      </div>
      {error && <p className="mt-1 text-sm text-powder-pink">{error}</p>}
    </div>
  );
};

export default TextFieldCustom;

--- components\UpcomingWorkshops.tsx ---
"use client";

import { motion } from "framer-motion";
import { Link } from "react-router-dom";
import { Calendar, Users } from "lucide-react";

interface Workshop {
  id: string;
  title: string;
  date: string;
  places: number;
  link: string;
}

interface UpcomingWorkshopsProps {
  workshops: Workshop[];
  title: string;
}

export default function UpcomingWorkshops({ workshops, title }: UpcomingWorkshopsProps) {
  return (
    <section className="bg-off-white py-16">
      <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
        <h2 className="text-3xl font-serif font-medium text-soft-brown mb-8 text-center">{title}</h2>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
          {workshops.map((workshop, index) => (
            <motion.div
              key={workshop.id}
              className="bg-white rounded-lg shadow-md p-6"
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.5, delay: index * 0.1 }}
            >
              <h3 className="text-xl font-medium text-soft-brown mb-4">{workshop.title}</h3>
              <div className="flex items-center text-soft-brown/70 mb-2">
                <Calendar className="w-5 h-5 mr-2" />
                <span>{workshop.date}</span>
              </div>
              <div className="flex items-center text-soft-brown/70 mb-4">
                <Users className="w-5 h-5 mr-2" />
                <span>{workshop.places} places disponibles</span>
              </div>
              <Link to={workshop.link}>
                <span className="inline-block bg-soft-green text-white px-4 py-2 rounded-md hover:bg-soft-green/90 transition-colors">
                  S'inscrire
                </span>
              </Link>
            </motion.div>
          ))}
        </div>
      </div>
    </section>
  );
}

--- components\WhyChooseUs.tsx ---
"use client";

import type React from "react";
import { motion } from "framer-motion";

interface Feature {
  title: string;
  description: string;
  icon: React.ReactNode;
}

interface WhyChooseUsProps {
  features: Feature[];
  title: string;
}

export default function WhyChooseUs({ features, title }: WhyChooseUsProps) {
  return (
    <section className="bg-off-white py-16">
      <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
        <h2 className="text-3xl font-serif font-medium text-soft-brown mb-12 text-center">{title}</h2>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
          {features.map((feature, index) => (
            <motion.div
              key={index}
              className="bg-white rounded-lg shadow-md p-6 flex flex-col items-center text-center"
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.5, delay: index * 0.1 }}
            >
              <div className="w-12 h-12 bg-soft-green/20 rounded-full flex items-center justify-center mb-4">
                {feature.icon}
              </div>
              <h3 className="text-xl font-medium text-soft-brown mb-2">{feature.title}</h3>
              <p className="text-soft-brown/70">{feature.description}</p>
            </motion.div>
          ))}
        </div>
      </div>
    </section>
  );
}

--- pages\AbonnementsPage.tsx ---
import React, { useState, useEffect } from 'react';
import { useNavigate, Link } from 'react-router-dom';
import NavBar from '../components/NavBar';
import Footer from '../components/Footer';
import PageContainer from '../components/PageContainer';
import ButtonPrimary from '../components/ButtonPrimary';
import { getAbonnements, createAbonnement, getProducts } from '../services/api';
import axios from 'axios';
import { motion, AnimatePresence } from 'framer-motion';
import { Calendar } from 'lucide-react';

interface Abonnement {
  id: string;
  type: 'mensuel' | 'hebdomadaire' | 'annuel';
  produits: { id: string; nom: string; prix: number; photos: string[] }[];
  prix: string;
  date_debut: string;
  date_fin: string | null;
  prochaine_livraison: string | null;
  is_active: boolean;
}

interface Product {
  id: string;
  nom: string;
  prix: number;
  photos: string[];
}

const AbonnementsPage: React.FC = () => {
  const navigate = useNavigate();
  const [abonnements, setAbonnements] = useState<Abonnement[]>([]);
  const [products, setProducts] = useState<Product[]>([]);
  const [selectedType, setSelectedType] = useState<'mensuel' | 'hebdomadaire' | 'annuel'>('mensuel');
  const [selectedProducts, setSelectedProducts] = useState<string[]>([]);
  const [dateDebut, setDateDebut] = useState<string>(new Date().toISOString().split('T')[0]);
  const [dateFin, setDateFin] = useState<string>('');
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [subscribeLoading, setSubscribeLoading] = useState(false);

  useEffect(() => {
    const fetchData = async () => {
      const token = localStorage.getItem('access_token');
      if (!token) {
        navigate('/auth');
        return;
      }

      try {
        const [abonnementsResponse, productsResponse] = await Promise.all([getAbonnements(), getProducts()]);
        console.log('Abonnements:', abonnementsResponse.data);
        console.log('Produits:', productsResponse.data);
        setAbonnements(abonnementsResponse.data);
        setProducts(productsResponse.data);
        setLoading(false);
      } catch (err: any) {
        console.error('Erreur lors du chargement:', err.response?.status, err.response?.data);
        setError('Erreur lors du chargement des abonnements ou produits.');
        setLoading(false);
        if (err.response?.status === 401) {
          localStorage.removeItem('access_token');
          navigate('/auth');
        }
      }
    };

    fetchData();
  }, [navigate]);

  const calculateEstimatedPrice = () => {
    const basePrice = products
      .filter((p) => selectedProducts.includes(p.id))
      .reduce((sum, p) => sum + p.prix, 0);
    return selectedType === 'hebdomadaire' ? basePrice * 4 
         : selectedType === 'mensuel' ? basePrice 
         : basePrice / 12;
  };

  const handleSubscribe = async () => {
    if (selectedProducts.length === 0) {
      alert('Veuillez sélectionner au moins un produit.');
      return;
    }

    if (dateFin && new Date(dateDebut) >= new Date(dateFin)) {
      alert('La date de début doit être antérieure à la date de fin.');
      return;
    }

    setSubscribeLoading(true);
    try {
      const data = {
        type: selectedType,
        produit_ids: selectedProducts,
        date_debut: dateDebut,
        ...(dateFin && { date_fin: dateFin }),
      };
      console.log('Envoi abonnement:', JSON.stringify(data));
      const response = await createAbonnement(data);
      console.log('Réponse création abonnement:', response.data);
      const updatedAbonnements = await getAbonnements();
      setAbonnements(updatedAbonnements.data);
      setSelectedProducts([]);
      setDateFin('');
      alert('Abonnement créé avec succès !');
    } catch (err: any) {
      console.error('Erreur lors de la création:', err.response?.data);
      alert('Erreur lors de la création de l’abonnement : ' + (err.response?.data?.error || 'Vérifiez votre connexion.'));
    } finally {
      setSubscribeLoading(false);
    }
  };

  const handleCancel = async (id: string) => {
    if (!window.confirm('Êtes-vous sûr de vouloir annuler cet abonnement ? Cela mettra fin à votre abonnement actif.')) return;
    try {
      const token = localStorage.getItem('access_token');
      const response = await axios.post(
        `http://chezflora-api.onrender.com/api/abonnements/${id}/cancel/`,
        {},
        { headers: { Authorization: `Bearer ${token}` } }
      );
      console.log('Réponse annulation:', response.data);
      const updatedAbonnements = await getAbonnements();
      setAbonnements(updatedAbonnements.data);
      alert('Abonnement annulé avec succès.');
    } catch (err: any) {
      console.error('Erreur lors de l’annulation:', err.response?.data);
      alert('Erreur lors de l’annulation : ' + (err.response?.data?.error || 'Vérifiez votre connexion.'));
    }
  };

  const getFrequencyText = (type: string) => {
    switch (type) {
      case 'hebdomadaire': return 'Toutes les semaines';
      case 'mensuel': return 'Tous les mois';
      case 'annuel': return 'Tous les ans';
      default: return '';
    }
  };

  if (loading) {
    return <div className="text-center py-16">Chargement...</div>;
  }

  if (error) {
    return (
      <div className="text-center py-16 text-powder-pink">
        {error} <Link to="/auth" className="underline">Connectez-vous</Link>
      </div>
    );
  }

  return (
    <>
      <NavBar />
      <PageContainer>
        <div className="max-w-6xl mx-auto py-12 px-4 sm:px-6 lg:px-8">
          <h1 className="text-3xl font-serif font-medium text-soft-brown mb-6">Mes abonnements</h1>

          {/* Formulaire d’abonnement */}
          <div className="bg-light-beige p-6 rounded-lg shadow-md mb-8">
            <h2 className="text-2xl font-medium text-soft-brown mb-4">Créer un abonnement</h2>
            <div className="space-y-6">
              <div>
                <label className="block text-soft-brown font-medium mb-1">Type d’abonnement</label>
                <select
                  value={selectedType}
                  onChange={(e) => setSelectedType(e.target.value as 'mensuel' | 'hebdomadaire' | 'annuel')}
                  className="w-full p-2 border border-soft-brown/30 rounded-md focus:outline-none focus:ring-2 focus:ring-soft-green bg-white text-soft-brown"
                >
                  <option value="mensuel">Mensuel</option>
                  <option value="hebdomadaire">Hebdomadaire</option>
                  <option value="annuel">Annuel</option>
                </select>
              </div>
              <div>
                <label className="block text-soft-brown font-medium mb-1">Date de début</label>
                <input
                  type="date"
                  value={dateDebut}
                  onChange={(e) => setDateDebut(e.target.value)}
                  className="w-full p-2 border border-soft-brown/30 rounded-md focus:outline-none focus:ring-2 focus:ring-soft-green bg-white text-soft-brown"
                />
              </div>
              <div>
                <label className="block text-soft-brown font-medium mb-1">Date de fin (optionnel)</label>
                <input
                  type="date"
                  value={dateFin}
                  onChange={(e) => setDateFin(e.target.value)}
                  className="w-full p-2 border border-soft-brown/30 rounded-md focus:outline-none focus:ring-2 focus:ring-soft-green bg-white text-soft-brown"
                />
              </div>
              <div>
                <label className="block text-soft-brown font-medium mb-2">Produits inclus</label>
                <div className="grid grid-cols-1 sm:grid-cols-2 gap-4 max-h-64 overflow-y-auto">
                  {products.map((product) => (
                    <div key={product.id} className="flex items-center space-x-2 p-2 border border-soft-brown/30 rounded-md">
                      <input
                        type="checkbox"
                        checked={selectedProducts.includes(product.id)}
                        onChange={(e) => {
                          if (e.target.checked) {
                            setSelectedProducts([...selectedProducts, product.id]);
                          } else {
                            setSelectedProducts(selectedProducts.filter((id) => id !== product.id));
                          }
                        }}
                        className="h-4 w-4 text-soft-green border-soft-brown/30 rounded focus:ring-soft-green"
                      />
                      <img src={product.photos[0] || '/images/placeholder-image.jpg'} alt={product.nom} className="w-10 h-10 object-cover rounded-md" />
                      <span className="text-soft-brown">{product.nom}</span>
                    </div>
                  ))}
                </div>
              </div>
              {selectedProducts.length > 0 && (
                <p className="text-soft-brown font-medium">
                  Prix estimé : {calculateEstimatedPrice()} FCFA
                </p>
              )}
              <ButtonPrimary
                onClick={handleSubscribe}
                disabled={subscribeLoading || selectedProducts.length === 0}
                className="w-full bg-soft-green hover:bg-soft-green/90"
              >
                {subscribeLoading ? 'Création...' : 'S’abonner'}
              </ButtonPrimary>
            </div>
          </div>

          {/* Liste des abonnements */}
          <div className="space-y-6">
            {abonnements.length > 0 ? (
              <AnimatePresence>
                {abonnements.map((abonnement) => (
                  <motion.div
                    key={abonnement.id}
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    exit={{ opacity: 0, y: -20 }}
                    transition={{ duration: 0.5 }}
                    className="bg-light-beige p-4 rounded-lg shadow-md"
                  >
                    <div className="flex justify-between items-center mb-4">
                      <h2 className="text-lg font-medium text-soft-brown">
                        Abonnement {abonnement.type.charAt(0).toUpperCase() + abonnement.type.slice(1)}
                      </h2>
                      <p className={`text-sm ${abonnement.is_active ? 'text-soft-green' : 'text-powder-pink'}`}>
                        {abonnement.is_active ? 'Actif' : 'Inactif'}
                      </p>
                    </div>
                    <div className="flex flex-wrap gap-2 mb-2">
                      {abonnement.produits.map((p) => (
                        <div key={p.id} className="flex items-center space-x-2">
                          <img src={p.photos[0] || '/images/placeholder-image.jpg'} alt={p.nom} className="w-8 h-8 object-cover rounded-md" />
                          <span className="text-soft-brown/90">{p.nom}</span>
                        </div>
                      ))}
                    </div>
                    <p className="text-soft-brown mb-2">Prix : {abonnement.prix} FCFA</p>
                    <p className="text-soft-brown/70 text-sm mb-2">Fréquence : {getFrequencyText(abonnement.type)}</p>
                    <p className="text-soft-brown/70 text-sm mb-2">
                      Début : {new Date(abonnement.date_debut).toLocaleDateString('fr-FR')}
                    </p>
                    <p className="text-soft-brown/70 text-sm mb-2">
                      Fin : {abonnement.date_fin ? new Date(abonnement.date_fin).toLocaleDateString('fr-FR') : 'Non définie'}
                    </p>
                    <p className="text-soft-brown/70 text-sm mb-2">
                      Prochaine livraison : {abonnement.prochaine_livraison ? new Date(abonnement.prochaine_livraison).toLocaleDateString('fr-FR') : 'Non définie'}
                    </p>
                    {abonnement.is_active && (
                      <ButtonPrimary
                        onClick={() => handleCancel(abonnement.id)}
                        className="mt-2 bg-powder-pink hover:bg-powder-pink/90"
                      >
                        Annuler l’abonnement
                      </ButtonPrimary>
                    )}
                  </motion.div>
                ))}
              </AnimatePresence>
            ) : (
              <p className="text-center text-soft-brown/70">Vous n’avez aucun abonnement actif.</p>
            )}
          </div>
        </div>
      </PageContainer>
      <Footer />
    </>
  );
};

export default AbonnementsPage;

--- pages\AboutPage.tsx ---
import React from 'react';
import NavBar from '../components/NavBar';
import Footer from '../components/Footer';
import PageContainer from '../components/PageContainer';
import { motion } from 'framer-motion';

const AboutPage: React.FC = () => {
  return (
    <>
      <NavBar />
      <PageContainer>
        <div className="max-w-4xl mx-auto py-12 px-4 sm:px-6 lg:px-8">
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5 }}
          >
            <h1 className="text-3xl font-serif font-medium text-soft-brown mb-6 text-center">À propos de ChezFlora</h1>
            <p className="text-soft-brown/90 mb-6 leading-relaxed">
              Bienvenue chez ChezFlora, votre boutique florale dédiée à la beauté naturelle et à la créativité. Depuis notre création, nous nous efforçons d’apporter une touche de magie à chaque moment de votre vie grâce à nos compositions uniques et personnalisées.
            </p>
            <p className="text-soft-brown/90 mb-6 leading-relaxed">
              Notre mission est simple : célébrer la nature à travers des fleurs soigneusement sélectionnées et des services sur mesure. Que ce soit pour un bouquet quotidien, une occasion spéciale ou un atelier floral, nous mettons tout notre cœur à rendre chaque expérience mémorable.
            </p>
            <h2 className="text-2xl font-medium text-soft-brown mb-4">Notre histoire</h2>
            <p className="text-soft-brown/90 mb-6 leading-relaxed">
              Fondée par une équipe passionnée par l’art floral, ChezFlora est née d’un amour pour les fleurs et d’un désir de partager cette passion avec vous. Ce qui a commencé comme une petite boutique locale est aujourd’hui une référence pour les amateurs de beauté naturelle.
            </p>
            <h2 className="text-2xl font-medium text-soft-brown mb-4">Nos valeurs</h2>
            <ul className="list-disc list-inside text-soft-brown/90 mb-6 leading-relaxed">
              <li>Qualité : Des fleurs fraîches et durables, choisies avec soin.</li>
              <li>Créativité : Des designs uniques qui racontent une histoire.</li>
              <li>Proximité : Un service client chaleureux et attentif.</li>
            </ul>
            <div className="text-center">
              <img
                src="/images/chezflora-team.jpg"  // Remplacez par une vraie image
                alt="Équipe ChezFlora"
                className="w-full max-w-md mx-auto rounded-lg shadow-md mb-6"
              />
              <p className="text-soft-brown/70 italic">L’équipe ChezFlora, prête à fleurir votre quotidien.</p>
            </div>
          </motion.div>
        </div>
      </PageContainer>
      <Footer />
    </>
  );
};

export default AboutPage;

--- pages\AccountPage.tsx ---
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import NavBar from '../components/NavBar';
import Footer from '../components/Footer';
import PageContainer from '../components/PageContainer';
import ButtonPrimary from '../components/ButtonPrimary';
import { getUserProfile, updateUserProfile, changePassword, deleteAccount } from '../services/api';
import { User, Shield, ChevronsUpDown, Camera, Trash2, AlertCircle } from 'lucide-react';

interface UserProfile {
  id: string;
  username: string;
  email: string;
  role: string;
}

const AccountPage: React.FC = () => {
  const navigate = useNavigate();
  const [user, setUser] = useState<UserProfile | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [activeTab, setActiveTab] = useState('profile');
  const [username, setUsername] = useState('');
  const [email, setEmail] = useState('');
  const [oldPassword, setOldPassword] = useState('');
  const [newPassword, setNewPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [updateLoading, setUpdateLoading] = useState(false);
  const [passwordLoading, setPasswordLoading] = useState(false);
  const [deleteLoading, setDeleteLoading] = useState(false);
  const [avatarUrl, setAvatarUrl] = useState<string>('');
  const [isUploading, setIsUploading] = useState(false);
  const [notifications, setNotifications] = useState(true); // Paramètre fictif
  const [marketing, setMarketing] = useState(false); // Paramètre fictif

  useEffect(() => {
    const fetchUserProfile = async () => {
      const token = localStorage.getItem('access_token');
      if (!token) {
        navigate('/auth');
        return;
      }

      try {
        const response = await getUserProfile();
        setUser(response.data);
        setUsername(response.data.username);
        setEmail(response.data.email);
        setAvatarUrl(''); // Remplacez par un champ avatar si disponible via API
        setLoading(false);
      } catch (err: any) {
        console.error('Erreur lors du chargement du profil:', err.response?.status, err.response?.data);
        setError('Erreur lors du chargement du profil.');
        setLoading(false);
        if (err.response?.status === 401) {
          localStorage.removeItem('access_token');
          navigate('/auth');
        }
      }
    };

    fetchUserProfile();
  }, [navigate]);

  const handleUpdateProfile = async () => {
    setUpdateLoading(true);
    try {
      const response = await updateUserProfile({ username, email });
      setUser(response.data);
      alert('Profil mis à jour avec succès !');
    } catch (err: any) {
      alert('Erreur lors de la mise à jour : ' + (err.response?.data?.detail || 'Vérifiez votre connexion.'));
    } finally {
      setUpdateLoading(false);
    }
  };

  const handleChangePassword = async () => {
    setPasswordLoading(true);
    try {
      await changePassword({ old_password: oldPassword, new_password: newPassword, confirm_password: confirmPassword });
      setOldPassword('');
      setNewPassword('');
      setConfirmPassword('');
      alert('Mot de passe modifié avec succès !');
    } catch (err: any) {
      alert('Erreur lors du changement de mot de passe : ' + (err.response?.data?.detail || 'Vérifiez vos entrées.'));
    } finally {
      setPasswordLoading(false);
    }
  };

  const handleDeleteAccount = async () => {
    if (!window.confirm('Êtes-vous sûr de vouloir supprimer votre compte ? Cette action est irréversible.')) return;
    setDeleteLoading(true);
    try {
      await deleteAccount();
      localStorage.removeItem('access_token');
      alert('Compte supprimé avec succès.');
      navigate('/');
    } catch (err: any) {
      alert('Erreur lors de la suppression : ' + (err.response?.data?.detail || 'Vérifiez votre connexion.'));
    } finally {
      setDeleteLoading(false);
    }
  };

  const handleAvatarUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;

    setIsUploading(true);
    const reader = new FileReader();
    reader.onload = (e) => {
      const result = e.target?.result as string;
      setAvatarUrl(result);
      setIsUploading(false);
      alert('Photo de profil mise à jour !');
    };
    reader.readAsDataURL(file);
  };

  const handleAccountSettings = () => {
    // Logique fictive pour sauvegarder les paramètres (à connecter à une API si disponible)
    alert('Paramètres du compte mis à jour : Notifications=' + notifications + ', Marketing=' + marketing);
  };

  if (loading) {
    return <div className="text-center py-16">Chargement...</div>;
  }

  if (error) {
    return (
      <div className="text-center py-16 text-powder-pink">
        {error} <Link to="/auth" className="underline">Connectez-vous</Link>
      </div>
    );
  }

  return (
    <>
      <NavBar />
      <PageContainer>
        <div className="max-w-6xl mx-auto py-10 flex flex-col lg:flex-row lg:space-x-12">
          {/* Sidebar */}
          <aside className="lg:w-1/4 mb-8 lg:mb-0">
            <div className="flex flex-col items-center space-y-4 pb-6">
              <div className="relative">
                <div className="h-24 w-24 rounded-full bg-light-beige flex items-center justify-center">
                  {avatarUrl ? (
                    <img src={avatarUrl} alt="Avatar" className="h-24 w-24 rounded-full object-cover" />
                  ) : (
                    <span className="text-2xl text-soft-brown">
                      {user?.username[0].toUpperCase()}
                    </span>
                  )}
                </div>
                <label
                  htmlFor="avatar-upload"
                  className="absolute bottom-0 right-0 h-8 w-8 flex items-center justify-center rounded-full bg-soft-green text-white cursor-pointer hover:bg-soft-green/90"
                >
                  {isUploading ? (
                    <svg className="animate-spin h-4 w-4" viewBox="0 0 24 24">
                      <circle cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4" fill="none" />
                    </svg>
                  ) : (
                    <Camera className="h-4 w-4" />
                  )}
                  <input
                    id="avatar-upload"
                    type="file"
                    accept="image/*"
                    className="hidden"
                    onChange={handleAvatarUpload}
                    disabled={isUploading}
                  />
                </label>
              </div>
              <div className="text-center">
                <h2 className="text-xl font-bold text-soft-brown">{user?.username}</h2>
                <p className="text-sm text-soft-brown/70">{user?.role}</p>
              </div>
            </div>
            <nav className="flex flex-col space-y-2">
              <button
                onClick={() => setActiveTab('profile')}
                className={`flex items-center justify-start p-2 rounded-md text-soft-brown hover:bg-soft-green/20 transition-colors ${activeTab === 'profile' ? 'bg-soft-green text-white' : ''}`}
              >
                <User className="h-4 w-4 mr-2" />
                Profil
              </button>
              <button
                onClick={() => setActiveTab('account')}
                className={`flex items-center justify-start p-2 rounded-md text-soft-brown hover:bg-soft-green/20 transition-colors ${activeTab === 'account' ? 'bg-soft-green text-white' : ''}`}
              >
                <ChevronsUpDown className="h-4 w-4 mr-2" />
                Compte
              </button>
              <button
                onClick={() => setActiveTab('security')}
                className={`flex items-center justify-start p-2 rounded-md text-soft-brown hover:bg-soft-green/20 transition-colors ${activeTab === 'security' ? 'bg-soft-green text-white' : ''}`}
              >
                <Shield className="h-4 w-4 mr-2" />
                Sécurité
              </button>
            </nav>
          </aside>

          {/* Main Content */}
          <div className="flex-1 lg:max-w-2xl">
            {activeTab === 'profile' && (
              <div className="bg-light-beige p-6 rounded-lg shadow-md">
                <h2 className="text-2xl font-medium text-soft-brown mb-4">Profil</h2>
                <p className="text-soft-brown/70 mb-6">Gérez les informations de votre profil public.</p>
                <div className="space-y-6">
                  <div>
                    <label className="block text-soft-brown font-medium mb-1">Nom d’utilisateur</label>
                    <input
                      type="text"
                      value={username}
                      onChange={(e) => setUsername(e.target.value)}
                      className="w-full p-2 border border-soft-brown/30 rounded-md focus:outline-none focus:ring-2 focus:ring-soft-green bg-white text-soft-brown"
                    />
                  </div>
                  <div>
                    <label className="block text-soft-brown font-medium mb-1">Email</label>
                    <input
                      type="email"
                      value={email}
                      onChange={(e) => setEmail(e.target.value)}
                      className="w-full p-2 border border-soft-brown/30 rounded-md focus:outline-none focus:ring-2 focus:ring-soft-green bg-white text-soft-brown"
                    />
                  </div>
                  <ButtonPrimary
                    onClick={handleUpdateProfile}
                    disabled={updateLoading}
                    className="bg-soft-green hover:bg-soft-green/90"
                  >
                    {updateLoading ? 'Mise à jour...' : 'Mettre à jour'}
                  </ButtonPrimary>
                </div>
              </div>
            )}

            {activeTab === 'account' && (
              <div className="bg-light-beige p-6 rounded-lg shadow-md">
                <h2 className="text-2xl font-medium text-soft-brown mb-4">Paramètres du compte</h2>
                <p className="text-soft-brown/70 mb-6">Gérez vos préférences de compte.</p>
                <div className="space-y-6">
                  <div className="flex items-center justify-between rounded-lg border border-soft-brown/30 p-4">
                    <div className="space-y-0.5">
                      <p className="text-base text-soft-brown font-medium">Notifications par email</p>
                      <p className="text-sm text-soft-brown/70">Recevoir des notifications sur les activités du compte.</p>
                    </div>
                    <input
                      type="checkbox"
                      checked={notifications}
                      onChange={(e) => setNotifications(e.target.checked)}
                      className="h-5 w-5 text-soft-green border-soft-brown/30 rounded focus:ring-soft-green"
                    />
                  </div>
                  <div className="flex items-center justify-between rounded-lg border border-soft-brown/30 p-4">
                    <div className="space-y-0.5">
                      <p className="text-base text-soft-brown font-medium">Emails marketing</p>
                      <p className="text-sm text-soft-brown/70">Recevoir des emails sur les nouveautés et promotions.</p>
                    </div>
                    <input
                      type="checkbox"
                      checked={marketing}
                      onChange={(e) => setMarketing(e.target.checked)}
                      className="h-5 w-5 text-soft-green border-soft-brown/30 rounded focus:ring-soft-green"
                    />
                  </div>
                  <ButtonPrimary
                    onClick={handleAccountSettings}
                    className="bg-soft-green hover:bg-soft-green/90"
                  >
                    Sauvegarder les préférences
                  </ButtonPrimary>
                </div>
              </div>
            )}

            {activeTab === 'security' && (
              <div className="bg-light-beige p-6 rounded-lg shadow-md">
                <h2 className="text-2xl font-medium text-soft-brown mb-4">Sécurité</h2>
                <p className="text-soft-brown/70 mb-6">Gérez la sécurité de votre compte et votre mot de passe.</p>

                {/* Changement de mot de passe */}
                <div className="space-y-4">
                  <div>
                    <label className="block text-soft-brown font-medium mb-1">Ancien mot de passe</label>
                    <input
                      type="password"
                      value={oldPassword}
                      onChange={(e) => setOldPassword(e.target.value)}
                      className="w-full p-2 border border-soft-brown/30 rounded-md focus:outline-none focus:ring-2 focus:ring-soft-green bg-white text-soft-brown"
                    />
                  </div>
                  <div>
                    <label className="block text-soft-brown font-medium mb-1">Nouveau mot de passe</label>
                    <input
                      type="password"
                      value={newPassword}
                      onChange={(e) => setNewPassword(e.target.value)}
                      className="w-full p-2 border border-soft-brown/30 rounded-md focus:outline-none focus:ring-2 focus:ring-soft-green bg-white text-soft-brown"
                    />
                  </div>
                  <div>
                    <label className="block text-soft-brown font-medium mb-1">Confirmer le mot de passe</label>
                    <input
                      type="password"
                      value={confirmPassword}
                      onChange={(e) => setConfirmPassword(e.target.value)}
                      className="w-full p-2 border border-soft-brown/30 rounded-md focus:outline-none focus:ring-2 focus:ring-soft-green bg-white text-soft-brown"
                    />
                  </div>
                  <ButtonPrimary
                    onClick={handleChangePassword}
                    disabled={passwordLoading}
                    className="bg-soft-green hover:bg-soft-green/90"
                  >
                    {passwordLoading ? 'Changement...' : 'Changer le mot de passe'}
                  </ButtonPrimary>
                </div>

                {/* Séparateur */}
                <div className="my-6 border-t border-soft-brown/30"></div>

                {/* Suppression du compte */}
                <div>
                  <h3 className="text-lg font-medium text-soft-brown mb-2">Zone de danger</h3>
                  <p className="text-soft-brown/70 mb-4">
                    Supprimez définitivement votre compte et toutes vos données.
                  </p>
                  <div className="bg-powder-pink/10 border border-powder-pink p-4 rounded-md flex items-start space-x-2">
                    <AlertCircle className="h-4 w-4 text-powder-pink mt-1" />
                    <div>
                      <p className="text-sm font-medium text-powder-pink">Attention</p>
                      <p className="text-sm text-soft-brown/70">
                        Cette action est irréversible et supprimera toutes vos données de nos serveurs.
                      </p>
                    </div>
                  </div>
                  <ButtonPrimary
                    onClick={handleDeleteAccount}
                    disabled={deleteLoading}
                    className="mt-4 bg-powder-pink hover:bg-powder-pink/90"
                  >
                    {deleteLoading ? 'Suppression...' : 'Supprimer mon compte'}
                  </ButtonPrimary>
                </div>
              </div>
            )}
          </div>
        </div>
      </PageContainer>
      <Footer />
    </>
  );
};

export default AccountPage;

--- pages\AdminAbonnementsPage.tsx ---
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import api from '../services/api';
import AdminLayout from '../components/AdminLayout';
import ButtonPrimary from '../components/ButtonPrimary';
import { Bar } from 'react-chartjs-2';
import { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend } from 'chart.js';
import { CreditCard, Search, Edit, ChevronLeft, ChevronRight } from 'lucide-react';

ChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);

interface Produit {
  id: string;
  nom: string;
}

interface Abonnement {
  id: string;
  client: string;
  type: string;
  produits: Produit[];
  date_debut: string;
  date_fin: string | null;
  prix: string;
  is_active: boolean;
  prochaine_livraison: string | null;
}

interface Stats {
  total_abonnements: number;
  active_abonnements: number;
  revenus: string;
  abonnements_by_type: { type: string; total: number }[];
}

interface ApiResponse {
  results: Abonnement[];
  count: number;
  next: string | null;
  previous: string | null;
}

const AdminAbonnementsPage: React.FC = () => {
  const navigate = useNavigate();
  const [abonnements, setAbonnements] = useState<Abonnement[]>([]);
  const [totalAbonnements, setTotalAbonnements] = useState(0);
  const [currentPage, setCurrentPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);
  const [stats, setStats] = useState<Stats | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [searchQuery, setSearchQuery] = useState('');
  const [filterType, setFilterType] = useState<string>('all');
  const [selectedAbonnement, setSelectedAbonnement] = useState<Abonnement | null>(null);
  const [isEditModalOpen, setIsEditModalOpen] = useState(false);
  const [editAbonnement, setEditAbonnement] = useState({ type: '', date_debut: '', date_fin: '', prix: '', is_active: true, prochaine_livraison: '' });
  const abonnementsPerPage = 10;

  useEffect(() => {
    fetchAbonnements();
    fetchStats();
  }, [currentPage, searchQuery, filterType]);

  const fetchAbonnements = async () => {
    setLoading(true);
    try {
      const response = await api.get<ApiResponse>('/abonnements/', {
        params: {
          page: currentPage,
          per_page: abonnementsPerPage,
          search: searchQuery || undefined,
          type: filterType !== 'all' ? filterType : undefined,
        },
      });
      setAbonnements(response.data.results);
      setTotalAbonnements(response.data.count);
      setTotalPages(Math.ceil(response.data.count / abonnementsPerPage));
      setLoading(false);
    } catch (err: any) {
      setError('Erreur lors du chargement des abonnements.');
      setLoading(false);
    }
  };

  const fetchStats = async () => {
    try {
      const response = await api.get('/abonnements/stats/');
      setStats(response.data);
    } catch (err: any) {
      setError('Erreur lors du chargement des statistiques.');
    }
  };

  const handleSearch = (e: React.ChangeEvent<HTMLInputElement>) => {
    setSearchQuery(e.target.value);
    setCurrentPage(1);
  };

  const handleFilterType = (e: React.ChangeEvent<HTMLSelectElement>) => {
    setFilterType(e.target.value);
    setCurrentPage(1);
  };

  const handlePrevPage = () => { if (currentPage > 1) setCurrentPage(currentPage - 1); };
  const handleNextPage = () => { if (currentPage < totalPages) setCurrentPage(currentPage + 1); };

  const openEditModal = (abonnement: Abonnement) => {
    setSelectedAbonnement(abonnement);
    setEditAbonnement({
      type: abonnement.type,
      date_debut: abonnement.date_debut.split('T')[0],
      date_fin: abonnement.date_fin ? abonnement.date_fin.split('T')[0] : '',
      prix: abonnement.prix,
      is_active: abonnement.is_active,
      prochaine_livraison: abonnement.prochaine_livraison ? abonnement.prochaine_livraison.split('T')[0] : '',
    });
    setIsEditModalOpen(true);
  };

  const closeEditModal = () => { setIsEditModalOpen(false); setSelectedAbonnement(null); };

  const handleEditAbonnement = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!selectedAbonnement) return;
    try {
      const data = {
        ...editAbonnement,
        prix: parseFloat(editAbonnement.prix).toString(),
        date_fin: editAbonnement.date_fin || null,
        prochaine_livraison: editAbonnement.prochaine_livraison || null,
      };
      await api.put(`/abonnements/${selectedAbonnement.id}/`, data);
      setIsEditModalOpen(false);
      fetchAbonnements();
      fetchStats();
    } catch (err: any) {
      setError('Erreur lors de la mise à jour de l’abonnement.');
    }
  };

  const abonnementsChartData = {
    labels: stats ? stats.abonnements_by_type.map((item) => item.type) : [],
    datasets: [
      {
        label: 'Abonnements par type',
        data: stats ? stats.abonnements_by_type.map((item) => item.total) : [],
        backgroundColor: '#2196F3',
      },
    ],
  };

  const chartOptions = {
    responsive: true,
    maintainAspectRatio: false,
    plugins: { legend: { position: 'top' as const }, title: { display: true, text: 'Abonnements actifs par type' } },
  };

  if (loading) return <div className="text-center py-16 text-lightText dark:text-darkText">Chargement...</div>;
  if (error) return <div className="text-center py-16 text-red-500">{error}</div>;

  return (
    <AdminLayout>
      <div className="max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8">
        <h1 className="text-2xl sm:text-3xl font-serif font-medium text-lightText dark:text-darkText mb-6 flex items-center">
          <CreditCard className="h-6 w-6 mr-2" /> Gestion des Abonnements
        </h1>

        <div className="grid grid-cols-1 sm:grid-cols-3 gap-4 mb-6">
          <div className="bg-lightCard dark:bg-darkCard p-4 rounded-lg shadow-md">
            <h2 className="text-lg font-medium text-lightText dark:text-darkText mb-2">Total Abonnements</h2>
            <p className="text-2xl font-bold text-gray-700 dark:text-gray-300">{stats?.total_abonnements}</p>
          </div>
          <div className="bg-lightCard dark:bg-darkCard p-4 rounded-lg shadow-md">
            <h2 className="text-lg font-medium text-lightText dark:text-darkText mb-2">Abonnements Actifs</h2>
            <p className="text-2xl font-bold text-gray-700 dark:text-gray-300">{stats?.active_abonnements}</p>
          </div>
          <div className="bg-lightCard dark:bg-darkCard p-4 rounded-lg shadow-md">
            <h2 className="text-lg font-medium text-lightText dark:text-darkText mb-2">Revenus (FCFA)</h2>
            <p className="text-2xl font-bold text-gray-700 dark:text-gray-300">{stats?.revenus}</p>
          </div>
        </div>

        <div className="mb-6 flex flex-col sm:flex-row gap-4 items-center justify-between">
          <div className="flex flex-col sm:flex-row gap-4 w-full sm:w-auto">
            <div className="relative w-full sm:w-64">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400" />
              <input
                type="text"
                value={searchQuery}
                onChange={handleSearch}
                placeholder="Rechercher par client..."
                className="w-full pl-10 pr-4 py-2 border border-lightBorder dark:border-darkBorder rounded-lg bg-lightBg dark:bg-darkBg text-lightText dark:text-darkText focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
            </div>
            <select
              value={filterType}
              onChange={handleFilterType}
              className="px-4 py-2 border border-lightBorder dark:border-darkBorder rounded-lg bg-lightBg dark:bg-darkBg text-lightText dark:text-darkText focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              <option value="all">Tous les types</option>
              <option value="mensuel">Mensuel</option>
              <option value="hebdomadaire">Hebdomadaire</option>
              <option value="annuel">Annuel</option>
            </select>
          </div>
        </div>

        <div className="bg-lightCard dark:bg-darkCard p-4 rounded-lg shadow-md mb-6">
          <h2 className="text-lg font-medium text-lightText dark:text-darkText mb-2">Abonnements par type</h2>
          <div className="h-48 sm:h-64">
            <Bar data={abonnementsChartData} options={chartOptions} />
          </div>
        </div>

        <div className="overflow-x-auto">
          <table className="w-full text-left text-sm">
            <thead className="bg-lightCard dark:bg-darkCard">
              <tr className="border-b border-lightBorder dark:bordergimdarkBorder">
                <th className="py-3 px-4">ID</th>
                <th className="py-3 px-4">Client</th>
                <th className="py-3 px-4">Type</th>
                <th className="py-3 px-4">Produits</th>
                <th className="py-3 px-4">Début</th>
                <th className="py-3 px-4">Fin</th>
                <th className="py-3 px-4">Prix (FCFA)</th>
                <th className="py-3 px-4">Prochaine Livraison</th>
                <th className="py-3 px-4">Actif</th>
                <th className="py-3 px-4">Actions</th>
              </tr>
            </thead>
            <tbody>
              {abonnements.map((abonnement) => (
                <tr key={abonnement.id} className="border-b border-lightBorder dark:border-darkBorder hover:bg-gray-100 dark:hover:bg-gray-700">
                  <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{abonnement.id}</td>
                  <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{abonnement.client}</td>
                  <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{abonnement.type}</td>
                  <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{abonnement.produits.length}</td>
                  <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{new Date(abonnement.date_debut).toLocaleDateString()}</td>
                  <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{abonnement.date_fin ? new Date(abonnement.date_fin).toLocaleDateString() : 'N/A'}</td>
                  <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{abonnement.prix}</td>
                  <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{abonnement.prochaine_livraison ? new Date(abonnement.prochaine_livraison).toLocaleDateString() : 'N/A'}</td>
                  <td className="py-3 px-4">
                    <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${abonnement.is_active ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200' : 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200'}`}>
                      {abonnement.is_active ? 'Oui' : 'Non'}
                    </span>
                  </td>
                  <td className="py-3 px-4">
                    <ButtonPrimary onClick={() => openEditModal(abonnement)} className="px-2 py-1 bg-blue-500 text-white hover:bg-blue-600 flex items-center text-sm">
                      <Edit className="h-4 w-4 mr-1" /> Modifier
                    </ButtonPrimary>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>

        <div className="mt-6 flex flex-col sm:flex-row items-center justify-between gap-4">
          <p className="text-sm text-gray-700 dark:text-gray-300">
            Affichage de {(currentPage - 1) * abonnementsPerPage + 1} à {Math.min(currentPage * abonnementsPerPage, totalAbonnements)} sur {totalAbonnements} abonnements
          </p>
          <div className="flex gap-2">
            <ButtonPrimary onClick={handlePrevPage} disabled={currentPage === 1} className="px-3 py-2 bg-lightCard dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600 disabled:opacity-50 flex items-center">
              <ChevronLeft className="h-5 w-5 mr-1" /> Précédent
            </ButtonPrimary>
            <ButtonPrimary onClick={handleNextPage} disabled={currentPage === totalPages} className="px-3 py-2 bg-lightCard dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600 disabled:opacity-50 flex items-center">
              Suivant <ChevronRight className="h-5 w-5 ml-1" />
            </ButtonPrimary>
          </div>
        </div>

        {isEditModalOpen && selectedAbonnement && (
          <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center">
            <div className="bg-lightBg dark:bg-darkBg p-6 rounded-lg shadow-lg w-full max-w-md">
              <h2 className="text-xl font-medium text-lightText dark:text-darkText mb-4 flex items-center">
                <Edit className="h-5 w-5 mr-2" /> Modifier l’abonnement
              </h2>
              <form onSubmit={handleEditAbonnement} className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-lightText dark:text-darkText mb-1">Type</label>
                  <select
                    value={editAbonnement.type}
                    onChange={(e) => setEditAbonnement({ ...editAbonnement, type: e.target.value })}
                    className="w-full px-3 py-2 border border-lightBorder dark:border-darkBorder rounded-lg bg-lightCard dark:bg-darkCard text-lightText dark:text-darkText focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="mensuel">Mensuel</option>
                    <option value="hebdomadaire">Hebdomadaire</option>
                    <option value="annuel">Annuel</option>
                  </select>
                </div>
                <div>
                  <label className="block text-sm font-medium text-lightText dark:text-darkText mb-1">Date de début</label>
                  <input type="date" value={editAbonnement.date_debut} onChange={(e) => setEditAbonnement({ ...editAbonnement, date_debut: e.target.value })} className="w-full px-3 py-2 border border-lightBorder dark:border-darkBorder rounded-lg bg-lightCard dark:bg-darkCard text-lightText dark:text-darkText focus:outline-none focus:ring-2 focus:ring-blue-500" required />
                </div>
                <div>
                  <label className="block text-sm font-medium text-lightText dark:text-darkText mb-1">Date de fin</label>
                  <input type="date" value={editAbonnement.date_fin} onChange={(e) => setEditAbonnement({ ...editAbonnement, date_fin: e.target.value })} className="w-full px-3 py-2 border border-lightBorder dark:border-darkBorder rounded-lg bg-lightCard dark:bg-darkCard text-lightText dark:text-darkText focus:outline-none focus:ring-2 focus:ring-blue-500" />
                </div>
                <div>
                  <label className="block text-sm font-medium text-lightText dark:text-darkText mb-1">Prix (FCFA)</label>
                  <input type="number" step="0.01" value={editAbonnement.prix} onChange={(e) => setEditAbonnement({ ...editAbonnement, prix: e.target.value })} className="w-full px-3 py-2 border border-lightBorder dark:border-darkBorder rounded-lg bg-lightCard dark:bg-darkCard text-lightText dark:text-darkText focus:outline-none focus:ring-2 focus:ring-blue-500" required />
                </div>
                <div>
                  <label className="block text-sm font-medium text-lightText dark:text-darkText mb-1">Prochaine livraison</label>
                  <input type="date" value={editAbonnement.prochaine_livraison} onChange={(e) => setEditAbonnement({ ...editAbonnement, prochaine_livraison: e.target.value })} className="w-full px-3 py-2 border border-lightBorder dark:border-darkBorder rounded-lg bg-lightCard dark:bg-darkCard text-lightText dark:text-darkText focus:outline-none focus:ring-2 focus:ring-blue-500" />
                </div>
                <div>
                  <label className="block text-sm font-medium text-lightText dark:text-darkText mb-1">Actif</label>
                  <input type="checkbox" checked={editAbonnement.is_active} onChange={(e) => setEditAbonnement({ ...editAbonnement, is_active: e.target.checked })} className="h-5 w-5 text-blue-500 focus:ring-blue-500 border-lightBorder dark:border-darkBorder rounded" />
                </div>
                <div className="flex gap-2 justify-end">
                  <ButtonPrimary type="button" onClick={closeEditModal} className="px-4 py-2 bg-lightCard dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600">Annuler</ButtonPrimary>
                  <ButtonPrimary type="submit" className="px-4 py-2 bg-blue-500 text-white hover:bg-blue-600">Enregistrer</ButtonPrimary>
                </div>
              </form>
            </div>
          </div>
        )}
      </div>
    </AdminLayout>
  );
};

export default AdminAbonnementsPage;

--- pages\AdminAddressesPage.tsx ---
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import api from '../services/api'; // Utilisation de l’instance axios existante
import AdminLayout from '../components/AdminLayout';
import ButtonPrimary from '../components/ButtonPrimary';
import { MapPin, Search, Edit, Trash2, ChevronLeft, ChevronRight } from 'lucide-react';

interface Address {
  id: string;
  client: {
    id: string;
    username: string;
    email: string;
  };
  nom: string;
  rue: string;
  ville: string;
  code_postal: string;
  pays: string;
}

interface ApiResponse {
  results: Address[];
  count: number;
  next: string | null;
  previous: string | null;
}

const AdminAddressesPage: React.FC = () => {
  const navigate = useNavigate();
  const [addresses, setAddresses] = useState<Address[]>([]);
  const [totalAddresses, setTotalAddresses] = useState(0);
  const [currentPage, setCurrentPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedAddress, setSelectedAddress] = useState<Address | null>(null);
  const [isEditModalOpen, setIsEditModalOpen] = useState(false);
  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);
  const [editAddress, setEditAddress] = useState({
    nom: '',
    rue: '',
    ville: '',
    code_postal: '',
    pays: '',
  });
  const addressesPerPage = 10;

  useEffect(() => {
    fetchAddresses();
  }, [currentPage, searchQuery]);

  const fetchAddresses = async () => {
    setLoading(true);
    try {
      const response = await api.get<ApiResponse>('/adresses/', {
        params: {
          page: currentPage,
          per_page: addressesPerPage,
          search: searchQuery || undefined, // Recherche par email ou nom d’utilisateur du client
        },
      });
      setAddresses(response.data.results);
      setTotalAddresses(response.data.count);
      setTotalPages(Math.ceil(response.data.count / addressesPerPage));
      setLoading(false);
    } catch (err: any) {
      console.error('Erreur lors du chargement des adresses:', err.response?.data);
      setError('Erreur lors du chargement des adresses.');
      setLoading(false);
    }
  };

  const handleSearch = (e: React.ChangeEvent<HTMLInputElement>) => {
    setSearchQuery(e.target.value);
    setCurrentPage(1);
  };

  const handlePrevPage = () => {
    if (currentPage > 1) setCurrentPage(currentPage - 1);
  };

  const handleNextPage = () => {
    if (currentPage < totalPages) setCurrentPage(currentPage + 1);
  };

  const openEditModal = (address: Address) => {
    setSelectedAddress(address);
    setEditAddress({
      nom: address.nom,
      rue: address.rue,
      ville: address.ville,
      code_postal: address.code_postal,
      pays: address.pays,
    });
    setIsEditModalOpen(true);
  };

  const closeEditModal = () => {
    setIsEditModalOpen(false);
    setSelectedAddress(null);
  };

  const handleEditAddress = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!selectedAddress) return;

    try {
      await api.put(`/adresses/${selectedAddress.id}/`, editAddress);
      setIsEditModalOpen(false);
      fetchAddresses();
    } catch (err: any) {
      console.error('Erreur lors de la mise à jour de l’adresse:', err.response?.data);
      setError('Erreur lors de la mise à jour de l’adresse.');
    }
  };

  const openDeleteModal = (address: Address) => {
    setSelectedAddress(address);
    setIsDeleteModalOpen(true);
  };

  const closeDeleteModal = () => {
    setIsDeleteModalOpen(false);
    setSelectedAddress(null);
  };

  const handleDeleteAddress = async () => {
    if (!selectedAddress) return;

    try {
      await api.delete(`/adresses/${selectedAddress.id}/`);
      setIsDeleteModalOpen(false);
      fetchAddresses();
    } catch (err: any) {
      console.error('Erreur lors de la suppression de l’adresse:', err.response?.data);
      setError('Erreur lors de la suppression de l’adresse.');
    }
  };

  if (loading) {
    return <div className="text-center py-16 text-lightText dark:text-darkText">Chargement...</div>;
  }

  if (error) {
    return <div className="text-center py-16 text-red-500">{error}</div>;
  }

  return (
    <AdminLayout>
      <div className="max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8">
        <h1 className="text-2xl sm:text-3xl font-serif font-medium text-lightText dark:text-darkText mb-4 sm:mb-6 flex items-center">
          <MapPin className="h-6 w-6 mr-2" /> Gestion des Adresses
        </h1>

        {/* Recherche */}
        <div className="mb-6 flex flex-col sm:flex-row gap-4 items-center justify-between">
          <div className="relative w-full sm:w-64">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400" />
            <input
              type="text"
              value={searchQuery}
              onChange={handleSearch}
              placeholder="Rechercher par email ou nom d’utilisateur..."
              className="w-full pl-10 pr-4 py-2 border border-lightBorder dark:border-darkBorder rounded-lg bg-lightBg dark:bg-darkBg text-lightText dark:text-darkText focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
          </div>
        </div>

        {/* Liste des adresses */}
        <div className="overflow-x-auto">
          <table className="w-full text-left text-sm">
            <thead className="bg-lightCard dark:bg-darkCard">
              <tr className="border-b border-lightBorder dark:border-darkBorder">
                <th className="py-3 px-4 text-lightText dark:text-darkText">ID</th>
                <th className="py-3 px-4 text-lightText dark:text-darkText">Utilisateur</th>
                <th className="py-3 px-4 text-lightText dark:text-darkText">Email</th>
                <th className="py-3 px-4 text-lightText dark:text-darkText">Nom</th>
                <th className="py-3 px-4 text-lightText dark:text-darkText">Rue</th>
                <th className="py-3 px-4 text-lightText dark:text-darkText">Ville</th>
                <th className="py-3 px-4 text-lightText dark:text-darkText">Code Postal</th>
                <th className="py-3 px-4 text-lightText dark:text-darkText">Pays</th>
                <th className="py-3 px-4 text-lightText dark:text-darkText">Actions</th>
              </tr>
            </thead>
            <tbody>
              {addresses.map((address) => (
                <tr key={address.id} className="border-b border-lightBorder dark:border-darkBorder hover:bg-gray-100 dark:hover:bg-gray-700">
                  <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{address.id}</td>
                  <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{address.client.username}</td>
                  <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{address.client.email}</td>
                  <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{address.nom}</td>
                  <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{address.rue}</td>
                  <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{address.ville}</td>
                  <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{address.code_postal}</td>
                  <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{address.pays}</td>
                  <td className="py-3 px-4 flex gap-2">
                    <ButtonPrimary
                      onClick={() => openEditModal(address)}
                      className="px-2 py-1 bg-blue-500 text-white hover:bg-blue-600 flex items-center text-sm"
                    >
                      <Edit className="h-4 w-4 mr-1" /> Modifier
                    </ButtonPrimary>
                    <ButtonPrimary
                      onClick={() => openDeleteModal(address)}
                      className="px-2 py-1 bg-red-500 text-white hover:bg-red-600 flex items-center text-sm"
                    >
                      <Trash2 className="h-4 w-4 mr-1" /> Supprimer
                    </ButtonPrimary>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>

        {/* Pagination */}
        <div className="mt-6 flex flex-col sm:flex-row items-center justify-between gap-4">
          <p className="text-sm text-gray-700 dark:text-gray-300">
            Affichage de {(currentPage - 1) * addressesPerPage + 1} à{' '}
            {Math.min(currentPage * addressesPerPage, totalAddresses)} sur {totalAddresses} adresses
          </p>
          <div className="flex gap-2">
            <ButtonPrimary
              onClick={handlePrevPage}
              disabled={currentPage === 1}
              className="px-3 py-2 bg-lightCard dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600 disabled:opacity-50 flex items-center"
            >
              <ChevronLeft className="h-5 w-5 mr-1" /> Précédent
            </ButtonPrimary>
            <ButtonPrimary
              onClick={handleNextPage}
              disabled={currentPage === totalPages}
              className="px-3 py-2 bg-lightCard dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600 disabled:opacity-50 flex items-center"
            >
              Suivant <ChevronRight className="h-5 w-5 ml-1" />
            </ButtonPrimary>
          </div>
        </div>

        {/* Modal pour modifier une adresse */}
        {isEditModalOpen && selectedAddress && (
          <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center">
            <div className="bg-lightBg dark:bg-darkBg p-6 rounded-lg shadow-lg w-full max-w-md">
              <h2 className="text-xl font-medium text-lightText dark:text-darkText mb-4 flex items-center">
                <Edit className="h-5 w-5 mr-2" /> Modifier l’adresse
              </h2>
              <form onSubmit={handleEditAddress} className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-lightText dark:text-darkText mb-1">Nom</label>
                  <input
                    type="text"
                    value={editAddress.nom}
                    onChange={(e) => setEditAddress({ ...editAddress, nom: e.target.value })}
                    className="w-full px-3 py-2 border border-lightBorder dark:border-darkBorder rounded-lg bg-lightCard dark:bg-darkCard text-lightText dark:text-darkText focus:outline-none focus:ring-2 focus:ring-blue-500"
                    required
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-lightText dark:text-darkText mb-1">Rue</label>
                  <input
                    type="text"
                    value={editAddress.rue}
                    onChange={(e) => setEditAddress({ ...editAddress, rue: e.target.value })}
                    className="w-full px-3 py-2 border border-lightBorder dark:border-darkBorder rounded-lg bg-lightCard dark:bg-darkCard text-lightText dark:text-darkText focus:outline-none focus:ring-2 focus:ring-blue-500"
                    required
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-lightText dark:text-darkText mb-1">Ville</label>
                  <input
                    type="text"
                    value={editAddress.ville}
                    onChange={(e) => setEditAddress({ ...editAddress, ville: e.target.value })}
                    className="w-full px-3 py-2 border border-lightBorder dark:border-darkBorder rounded-lg bg-lightCard dark:bg-darkCard text-lightText dark:text-darkText focus:outline-none focus:ring-2 focus:ring-blue-500"
                    required
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-lightText dark:text-darkText mb-1">Code Postal</label>
                  <input
                    type="text"
                    value={editAddress.code_postal}
                    onChange={(e) => setEditAddress({ ...editAddress, code_postal: e.target.value })}
                    className="w-full px-3 py-2 border border-lightBorder dark:border-darkBorder rounded-lg bg-lightCard dark:bg-darkCard text-lightText dark:text-darkText focus:outline-none focus:ring-2 focus:ring-blue-500"
                    required
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-lightText dark:text-darkText mb-1">Pays</label>
                  <input
                    type="text"
                    value={editAddress.pays}
                    onChange={(e) => setEditAddress({ ...editAddress, pays: e.target.value })}
                    className="w-full px-3 py-2 border border-lightBorder dark:border-darkBorder rounded-lg bg-lightCard dark:bg-darkCard text-lightText dark:text-darkText focus:outline-none focus:ring-2 focus:ring-blue-500"
                    required
                  />
                </div>
                <div className="flex gap-2 justify-end">
                  <ButtonPrimary
                    type="button"
                    onClick={closeEditModal}
                    className="px-4 py-2 bg-lightCard dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600"
                  >
                    Annuler
                  </ButtonPrimary>
                  <ButtonPrimary type="submit" className="px-4 py-2 bg-blue-500 text-white hover:bg-blue-600">
                    Enregistrer
                  </ButtonPrimary>
                </div>
              </form>
            </div>
          </div>
        )}

        {/* Modal pour supprimer une adresse */}
        {isDeleteModalOpen && selectedAddress && (
          <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center">
            <div className="bg-lightBg dark:bg-darkBg p-6 rounded-lg shadow-lg w-full max-w-md">
              <h2 className="text-xl font-medium text-lightText dark:text-darkText mb-4 flex items-center">
                <Trash2 className="h-5 w-5 mr-2" /> Supprimer l’adresse
              </h2>
              <p className="text-gray-700 dark:text-gray-300 mb-4">
                Êtes-vous sûr de vouloir supprimer l’adresse de <span className="font-medium">{selectedAddress.client.email}</span> ({selectedAddress.nom}) ?
              </p>
              <div className="flex gap-2 justify-end">
                <ButtonPrimary
                  type="button"
                  onClick={closeDeleteModal}
                  className="px-4 py-2 bg-lightCard dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600"
                >
                  Annuler
                </ButtonPrimary>
                <ButtonPrimary
                  onClick={handleDeleteAddress}
                  className="px-4 py-2 bg-red-500 text-white hover:bg-red-600"
                >
                  Supprimer
                </ButtonPrimary>
              </div>
            </div>
          </div>
        )}
      </div>
    </AdminLayout>
  );
};

export default AdminAddressesPage;

--- pages\AdminArticlesPage.tsx ---
import React, { useState, useEffect } from 'react';
import api from '../services/api';
import AdminLayout from '../components/AdminLayout';
import ButtonPrimary from '../components/ButtonPrimary';
import { FileText, Search, Edit, Trash2, PlusCircle, ChevronLeft, ChevronRight } from 'lucide-react';

interface Article {
  id: string;
  titre: string;
  contenu: string;
  cover: string | null;
  auteur: string;
  date_publication: string;
  is_active: boolean;
}

interface ApiResponse {
  results: Article[];
  count: number;
  next: string | null;
  previous: string | null;
}

const AdminArticlesPage: React.FC = () => {
  const [articles, setArticles] = useState<Article[]>([]);
  const [totalArticles, setTotalArticles] = useState(0);
  const [currentPage, setCurrentPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedArticle, setSelectedArticle] = useState<Article | null>(null);
  const [isAddModalOpen, setIsAddModalOpen] = useState(false);
  const [isEditModalOpen, setIsEditModalOpen] = useState(false);
  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);
  const [newArticle, setNewArticle] = useState({ titre: '', contenu: '', cover: null as File | null, is_active: true });
  const [editArticle, setEditArticle] = useState({ titre: '', contenu: '', cover: null as File | null, is_active: true });
  const articlesPerPage = 10;

  useEffect(() => {
    fetchArticles();
  }, [currentPage, searchQuery]);

  const fetchArticles = async () => {
    setLoading(true);
    try {
      const response = await api.get<ApiResponse>('/articles/', {
        params: { page: currentPage, per_page: articlesPerPage, search: searchQuery || undefined },
      });
      setArticles(response.data.results);
      setTotalArticles(response.data.count);
      setTotalPages(Math.ceil(response.data.count / articlesPerPage));
      setLoading(false);
    } catch (err: any) {
      setError('Erreur lors du chargement des articles.');
      setLoading(false);
    }
  };

  const handleSearch = (e: React.ChangeEvent<HTMLInputElement>) => {
    setSearchQuery(e.target.value);
    setCurrentPage(1);
  };

  const handlePrevPage = () => { if (currentPage > 1) setCurrentPage(currentPage - 1); };
  const handleNextPage = () => { if (currentPage < totalPages) setCurrentPage(currentPage + 1); };

  const openAddModal = () => {
    setNewArticle({ titre: '', contenu: '', cover: null, is_active: true });
    setIsAddModalOpen(true);
  };

  const closeAddModal = () => { setIsAddModalOpen(false); };

  const handleAddArticle = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      const formData = new FormData();
      formData.append('titre', newArticle.titre);
      formData.append('contenu', newArticle.contenu);
      if (newArticle.cover) formData.append('cover', newArticle.cover);
      formData.append('is_active', newArticle.is_active.toString());
      await api.post('/articles/', formData, { headers: { 'Content-Type': 'multipart/form-data' } });
      setIsAddModalOpen(false);
      fetchArticles();
    } catch (err: any) {
      setError('Erreur lors de l’ajout de l’article.');
    }
  };

  const openEditModal = (article: Article) => {
    setSelectedArticle(article);
    setEditArticle({ titre: article.titre, contenu: article.contenu, cover: null, is_active: article.is_active });
    setIsEditModalOpen(true);
  };

  const closeEditModal = () => { setIsEditModalOpen(false); setSelectedArticle(null); };

  const handleEditArticle = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!selectedArticle) return;
    try {
      const formData = new FormData();
      formData.append('titre', editArticle.titre);
      formData.append('contenu', editArticle.contenu);
      if (editArticle.cover) formData.append('cover', editArticle.cover);
      formData.append('is_active', editArticle.is_active.toString());
      await api.put(`/articles/${selectedArticle.id}/`, formData, { headers: { 'Content-Type': 'multipart/form-data' } });
      setIsEditModalOpen(false);
      fetchArticles();
    } catch (err: any) {
      setError('Erreur lors de la mise à jour de l’article.');
    }
  };

  const openDeleteModal = (article: Article) => { setSelectedArticle(article); setIsDeleteModalOpen(true); };
  const closeDeleteModal = () => { setIsDeleteModalOpen(false); setSelectedArticle(null); };

  const handleDeleteArticle = async () => {
    if (!selectedArticle) return;
    try {
      await api.delete(`/articles/${selectedArticle.id}/`);
      setIsDeleteModalOpen(false);
      fetchArticles();
    } catch (err: any) {
      setError('Erreur lors de la suppression de l’article.');
    }
  };

  if (loading) return <div className="text-center py-16 text-lightText dark:text-darkText">Chargement...</div>;
  if (error) return <div className="text-center py-16 text-red-500">{error}</div>;

  return (
    <AdminLayout>
      <div className="max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8">
        <h1 className="text-2xl sm:text-3xl font-serif font-medium text-lightText dark:text-darkText mb-6 flex items-center">
          <FileText className="h-6 w-6 mr-2" /> Gestion des Articles
        </h1>

        <div className="mb-6 flex flex-col sm:flex-row gap-4 items-center justify-between">
          <div className="relative w-full sm:w-64">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400" />
            <input
              type="text"
              value={searchQuery}
              onChange={handleSearch}
              placeholder="Rechercher par titre..."
              className="w-full pl-10 pr-4 py-2 border border-lightBorder dark:border-darkBorder rounded-lg bg-lightBg dark:bg-darkBg text-lightText dark:text-darkText focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
          </div>
          <ButtonPrimary onClick={openAddModal} className="px-4 py-2 bg-blue-500 text-white hover:bg-blue-600 flex items-center">
            <PlusCircle className="h-5 w-5 mr-2" /> Ajouter un article
          </ButtonPrimary>
        </div>

        <div className="overflow-x-auto">
          <table className="w-full text-left text-sm">
            <thead className="bg-lightCard dark:bg-darkCard">
              <tr className="border-b border-lightBorder dark:border-darkBorder">
                <th className="py-3 px-4">ID</th>
                <th className="py-3 px-4">Titre</th>
                <th className="py-3 px-4">Auteur</th>
                <th className="py-3 px-4">Date</th>
                <th className="py-3 px-4">Statut</th>
                <th className="py-3 px-4">Actions</th>
              </tr>
            </thead>
            <tbody>
              {articles.map((article) => (
                <tr key={article.id} className="border-b border-lightBorder dark:border-darkBorder hover:bg-gray-100 dark:hover:bg-gray-700">
                  <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{article.id}</td>
                  <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{article.titre}</td>
                  <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{article.auteur}</td>
                  <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{new Date(article.date_publication).toLocaleDateString()}</td>
                  <td className="py-3 px-4">
                    <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${article.is_active ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200' : 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200'}`}>
                      {article.is_active ? 'Actif' : 'Inactif'}
                    </span>
                  </td>
                  <td className="py-3 px-4 flex gap-2">
                    <ButtonPrimary onClick={() => openEditModal(article)} className="px-2 py-1 bg-blue-500 text-white hover:bg-blue-600 flex items-center text-sm">
                      <Edit className="h-4 w-4 mr-1" /> Modifier
                    </ButtonPrimary>
                    <ButtonPrimary onClick={() => openDeleteModal(article)} className="px-2 py-1 bg-red-500 text-white hover:bg-red-600 flex items-center text-sm">
                      <Trash2 className="h-4 w-4 mr-1" /> Supprimer
                    </ButtonPrimary>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>

        <div className="mt-6 flex flex-col sm:flex-row items-center justify-between gap-4">
          <p className="text-sm text-gray-700 dark:text-gray-300">
            Affichage de {(currentPage - 1) * articlesPerPage + 1} à {Math.min(currentPage * articlesPerPage, totalArticles)} sur {totalArticles} articles
          </p>
          <div className="flex gap-2">
            <ButtonPrimary onClick={handlePrevPage} disabled={currentPage === 1} className="px-3 py-2 bg-lightCard dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600 disabled:opacity-50 flex items-center">
              <ChevronLeft className="h-5 w-5 mr-1" /> Précédent
            </ButtonPrimary>
            <ButtonPrimary onClick={handleNextPage} disabled={currentPage === totalPages} className="px-3 py-2 bg-lightCard dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600 disabled:opacity-50 flex items-center">
              Suivant <ChevronRight className="h-5 w-5 ml-1" />
            </ButtonPrimary>
          </div>
        </div>

        {isAddModalOpen && (
          <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center">
            <div className="bg-lightBg dark:bg-darkBg p-6 rounded-lg shadow-lg w-full max-w-md">
              <h2 className="text-xl font-medium text-lightText dark:text-darkText mb-4 flex items-center">
                <PlusCircle className="h-5 w-5 mr-2" /> Ajouter un article
              </h2>
              <form onSubmit={handleAddArticle} className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-lightText dark:text-darkText mb-1">Titre</label>
                  <input type="text" value={newArticle.titre} onChange={(e) => setNewArticle({ ...newArticle, titre: e.target.value })} className="w-full px-3 py-2 border border-lightBorder dark:border-darkBorder rounded-lg bg-lightCard dark:bg-darkCard text-lightText dark:text-darkText focus:outline-none focus:ring-2 focus:ring-blue-500" required />
                </div>
                <div>
                  <label className="block text-sm font-medium text-lightText dark:text-darkText mb-1">Contenu</label>
                  <textarea value={newArticle.contenu} onChange={(e) => setNewArticle({ ...newArticle, contenu: e.target.value })} className="w-full px-3 py-2 border border-lightBorder dark:border-darkBorder rounded-lg bg-lightCard dark:bg-darkCard text-lightText dark:text-darkText focus:outline-none focus:ring-2 focus:ring-blue-500" rows={5} required />
                </div>
                <div>
                  <label className="block text-sm font-medium text-lightText dark:text-darkText mb-1">Image de couverture</label>
                  <input type="file" onChange={(e) => setNewArticle({ ...newArticle, cover: e.target.files?.[0] || null })} className="w-full px-3 py-2 border border-lightBorder dark:border-darkBorder rounded-lg bg-lightCard dark:bg-darkCard text-lightText dark:text-darkText" />
                </div>
                <div>
                  <label className="block text-sm font-medium text-lightText dark:text-darkText mb-1">Actif</label>
                  <input type="checkbox" checked={newArticle.is_active} onChange={(e) => setNewArticle({ ...newArticle, is_active: e.target.checked })} className="h-5 w-5 text-blue-500 focus:ring-blue-500 border-lightBorder dark:border-darkBorder rounded" />
                </div>
                <div className="flex gap-2 justify-end">
                  <ButtonPrimary type="button" onClick={closeAddModal} className="px-4 py-2 bg-lightCard dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600">Annuler</ButtonPrimary>
                  <ButtonPrimary type="submit" className="px-4 py-2 bg-blue-500 text-white hover:bg-blue-600">Ajouter</ButtonPrimary>
                </div>
              </form>
            </div>
          </div>
        )}

        {isEditModalOpen && selectedArticle && (
          <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center">
            <div className="bg-lightBg dark:bg-darkBg p-6 rounded-lg shadow-lg w-full max-w-md">
              <h2 className="text-xl font-medium text-lightText dark:text-darkText mb-4 flex items-center">
                <Edit className="h-5 w-5 mr-2" /> Modifier l’article
              </h2>
              <form onSubmit={handleEditArticle} className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-lightText dark:text-darkText mb-1">Titre</label>
                  <input type="text" value={editArticle.titre} onChange={(e) => setEditArticle({ ...editArticle, titre: e.target.value })} className="w-full px-3 py-2 border border-lightBorder dark:border-darkBorder rounded-lg bg-lightCard dark:bg-darkCard text-lightText dark:text-darkText focus:outline-none focus:ring-2 focus:ring-blue-500" required />
                </div>
                <div>
                  <label className="block text-sm font-medium text-lightText dark:text-darkText mb-1">Contenu</label>
                  <textarea value={editArticle.contenu} onChange={(e) => setEditArticle({ ...editArticle, contenu: e.target.value })} className="w-full px-3 py-2 border border-lightBorder dark:border-darkBorder rounded-lg bg-lightCard dark:bg-darkCard text-lightText dark:text-darkText focus:outline-none focus:ring-2 focus:ring-blue-500" rows={5} required />
                </div>
                <div>
                  <label className="block text-sm font-medium text-lightText dark:text-darkText mb-1">Image de couverture</label>
                  <input type="file" onChange={(e) => setEditArticle({ ...editArticle, cover: e.target.files?.[0] || null })} className="w-full px-3 py-2 border border-lightBorder dark:border-darkBorder rounded-lg bg-lightCard dark:bg-darkCard text-lightText dark:text-darkText" />
                  {selectedArticle.cover && !editArticle.cover && <img src={selectedArticle.cover} alt="Cover" className="mt-2 h-16 w-16 object-cover rounded" />}
                </div>
                <div>
                  <label className="block text-sm font-medium text-lightText dark:text-darkText mb-1">Actif</label>
                  <input type="checkbox" checked={editArticle.is_active} onChange={(e) => setEditArticle({ ...editArticle, is_active: e.target.checked })} className="h-5 w-5 text-blue-500 focus:ring-blue-500 border-lightBorder dark:border-darkBorder rounded" />
                </div>
                <div className="flex gap-2 justify-end">
                  <ButtonPrimary type="button" onClick={closeEditModal} className="px-4 py-2 bg-lightCard dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600">Annuler</ButtonPrimary>
                  <ButtonPrimary type="submit" class drainage="px-4 py-2 bg-blue-500 text-white hover:bg-blue-600">Enregistrer</ButtonPrimary>
                </div>
              </form>
            </div>
          </div>
        )}

        {isDeleteModalOpen && selectedArticle && (
          <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center">
            <div className="bg-lightBg dark:bg-darkBg p-6 rounded-lg shadow-lg w-full max-w-md">
              <h2 className="text-xl font-medium text-lightText dark:text-darkText mb-4 flex items-center">
                <Trash2 className="h-5 w-5 mr-2" /> Supprimer l’article
              </h2>
              <p className="text-gray-700 dark:text-gray-300 mb-4">
                Êtes-vous sûr de vouloir supprimer l’article <span className="font-medium">{selectedArticle.titre}</span> ?
              </p>
              <div className="flex gap-2 justify-end">
                <ButtonPrimary type="button" onClick={closeDeleteModal} className="px-4 py-2 bg-lightCard dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600">Annuler</ButtonPrimary>
                <ButtonPrimary onClick={handleDeleteArticle} className="px-4 py-2 bg-red-500 text-white hover:bg-red-600">Supprimer</ButtonPrimary>
              </div>
            </div>
          </div>
        )}
      </div>
    </AdminLayout>
  );
};

export default AdminArticlesPage;

--- pages\AdminAteliersPage.tsx ---
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import api from '../services/api';
import AdminLayout from '../components/AdminLayout';
import ButtonPrimary from '../components/ButtonPrimary';
import { Calendar, Search, Edit, Trash2, PlusCircle, ChevronLeft, ChevronRight } from 'lucide-react';

interface Atelier {
  id: string;
  nom: string;
  description: string;
  date: string;
  duree: number;
  prix: string;
  places_totales: number;
  is_active: boolean;
  places_disponibles: number;
}

interface ApiResponse {
  results: Atelier[];
  count: number;
  next: string | null;
  previous: string | null;
}

const AdminAteliersPage: React.FC = () => {
  const navigate = useNavigate();
  const [ateliers, setAteliers] = useState<Atelier[]>([]);
  const [totalAteliers, setTotalAteliers] = useState(0);
  const [currentPage, setCurrentPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedAtelier, setSelectedAtelier] = useState<Atelier | null>(null);
  const [isAddModalOpen, setIsAddModalOpen] = useState(false);
  const [isEditModalOpen, setIsEditModalOpen] = useState(false);
  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);
  const [newAtelier, setNewAtelier] = useState({
    nom: '', description: '', date: '', duree: '', prix: '', places_totales: '', is_active: true,
  });
  const [editAtelier, setEditAtelier] = useState({
    nom: '', description: '', date: '', duree: '', prix: '', places_totales: '', is_active: true,
  });
  const ateliersPerPage = 10;

  useEffect(() => {
    fetchAteliers();
  }, [currentPage, searchQuery]);

  const fetchAteliers = async () => {
    setLoading(true);
    try {
      const response = await api.get<ApiResponse>('/ateliers/', {
        params: { page: currentPage, per_page: ateliersPerPage, search: searchQuery || undefined },
      });
      setAteliers(response.data.results);
      setTotalAteliers(response.data.count);
      setTotalPages(Math.ceil(response.data.count / ateliersPerPage));
      setLoading(false);
    } catch (err: any) {
      setError('Erreur lors du chargement des ateliers.');
      setLoading(false);
    }
  };

  const handleSearch = (e: React.ChangeEvent<HTMLInputElement>) => {
    setSearchQuery(e.target.value);
    setCurrentPage(1);
  };

  const handlePrevPage = () => { if (currentPage > 1) setCurrentPage(currentPage - 1); };
  const handleNextPage = () => { if (currentPage < totalPages) setCurrentPage(currentPage + 1); };

  const openAddModal = () => {
    setNewAtelier({ nom: '', description: '', date: '', duree: '', prix: '', places_totales: '', is_active: true });
    setIsAddModalOpen(true);
  };

  const closeAddModal = () => { setIsAddModalOpen(false); };

  const handleAddAtelier = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      const atelierData = {
        ...newAtelier,
        duree: parseInt(newAtelier.duree),
        prix: parseFloat(newAtelier.prix).toString(),
        places_totales: parseInt(newAtelier.places_totales),
      };
      await api.post('/ateliers/', atelierData);
      setIsAddModalOpen(false);
      fetchAteliers();
    } catch (err: any) {
      setError('Erreur lors de l’ajout de l’atelier.');
    }
  };

  const openEditModal = (atelier: Atelier) => {
    setSelectedAtelier(atelier);
    setEditAtelier({
      nom: atelier.nom,
      description: atelier.description,
      date: atelier.date.split('T')[0],
      duree: atelier.duree.toString(),
      prix: atelier.prix,
      places_totales: atelier.places_totales.toString(),
      is_active: atelier.is_active,
    });
    setIsEditModalOpen(true);
  };

  const closeEditModal = () => { setIsEditModalOpen(false); setSelectedAtelier(null); };

  const handleEditAtelier = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!selectedAtelier) return;
    try {
      const atelierData = {
        ...editAtelier,
        duree: parseInt(editAtelier.duree),
        prix: parseFloat(editAtelier.prix).toString(),
        places_totales: parseInt(editAtelier.places_totales),
      };
      await api.put(`/ateliers/${selectedAtelier.id}/`, atelierData);
      setIsEditModalOpen(false);
      fetchAteliers();
    } catch (err: any) {
      setError('Erreur lors de la mise à jour de l’atelier.');
    }
  };

  console.log(ateliers)

  const openDeleteModal = (atelier: Atelier) => { setSelectedAtelier(atelier); setIsDeleteModalOpen(true); };
  const closeDeleteModal = () => { setIsDeleteModalOpen(false); setSelectedAtelier(null); };

  const handleDeleteAtelier = async () => {
    if (!selectedAtelier) return;
    try {
      await api.delete(`/ateliers/${selectedAtelier.id}/`);
      setIsDeleteModalOpen(false);
      fetchAteliers();
    } catch (err: any) {
      setError('Erreur lors de la suppression de l’atelier.');
    }
  };

  if (loading) return <div className="text-center py-16 text-lightText dark:text-darkText">Chargement...</div>;
  if (error) return <div className="text-center py-16 text-red-500">{error}</div>;

  return (
    <AdminLayout>
      <div className="max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8">
        <h1 className="text-2xl sm:text-3xl font-serif font-medium text-lightText dark:text-darkText mb-6 flex items-center">
          <Calendar className="h-6 w-6 mr-2" /> Gestion des Ateliers
        </h1>

        <div className="mb-6 flex flex-col sm:flex-row gap-4 items-center justify-between">
          <div className="relative w-full sm:w-64">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400" />
            <input
              type="text"
              value={searchQuery}
              onChange={handleSearch}
              placeholder="Rechercher par nom..."
              className="w-full pl-10 pr-4 py-2 border border-lightBorder dark:border-darkBorder rounded-lg bg-lightBg dark:bg-darkBg text-lightText dark:text-darkText focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
          </div>
          <ButtonPrimary onClick={openAddModal} className="px-4 py-2 bg-blue-500 text-white hover:bg-blue-600 flex items-center">
            <PlusCircle className="h-5 w-5 mr-2" /> Ajouter un atelier
          </ButtonPrimary>
        </div>

        <div className="overflow-x-auto">
          <table className="w-full text-left text-sm">
            <thead className="bg-lightCard dark:bg-darkCard">
              <tr className="border-b border-lightBorder dark:border-darkBorder">
                <th className="py-3 px-4">ID</th>
                <th className="py-3 px-4">Nom</th>
                <th className="py-3 px-4">Date</th>
                <th className="py-3 px-4">Durée (min)</th>
                <th className="py-3 px-4">Prix (FCFA)</th>
                <th className="py-3 px-4">Places Totales</th>
                <th className="py-3 px-4">Places Disponibles</th>
                <th className="py-3 px-4">Statut</th>
                <th className="py-3 px-4">Actions</th>
              </tr>
            </thead>
            <tbody>
              {ateliers.map((atelier) => (
                <tr key={atelier.id} className="border-b border-lightBorder dark:border-darkBorder hover:bg-gray-100 dark:hover:bg-gray-700">
                  <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{atelier.id}</td>
                  <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{atelier.nom}</td>
                  <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{new Date(atelier.date).toLocaleString()}</td>
                  <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{atelier.duree}</td>
                  <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{atelier.prix}</td>
                  <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{atelier.places_totales}</td>
                  <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{atelier.places_disponibles}</td>                  
                  <td className="py-3 px-4">
                    <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${atelier.is_active ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200' : 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200'}`}>
                      {atelier.is_active ? 'Actif' : 'Inactif'}
                    </span>
                  </td>
                  <td className="py-3 px-4 flex gap-2">
                    <ButtonPrimary onClick={() => openEditModal(atelier)} className="px-2 py-1 bg-blue-500 text-white hover:bg-blue-600 flex items-center text-sm">
                      <Edit className="h-4 w-4 mr-1" /> Modifier
                    </ButtonPrimary>
                    <ButtonPrimary onClick={() => openDeleteModal(atelier)} className="px-2 py-1 bg-red-500 text-white hover:bg-red-600 flex items-center text-sm">
                      <Trash2 className="h-4 w-4 mr-1" /> Supprimer
                    </ButtonPrimary>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>

        <div className="mt-6 flex flex-col sm:flex-row items-center justify-between gap-4">
          <p className="text-sm text-gray-700 dark:text-gray-300">
            Affichage de {(currentPage - 1) * ateliersPerPage + 1} à {Math.min(currentPage * ateliersPerPage, totalAteliers)} sur {totalAteliers} ateliers
          </p>
          <div className="flex gap-2">
            <ButtonPrimary onClick={handlePrevPage} disabled={currentPage === 1} className="px-3 py-2 bg-lightCard dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600 disabled:opacity-50 flex items-center">
              <ChevronLeft className="h-5 w-5 mr-1" /> Précédent
            </ButtonPrimary>
            <ButtonPrimary onClick={handleNextPage} disabled={currentPage === totalPages} className="px-3 py-2 bg-lightCard dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600 disabled:opacity-50 flex items-center">
              Suivant <ChevronRight className="h-5 w-5 ml-1" />
            </ButtonPrimary>
          </div>
        </div>

        {isAddModalOpen && (
          <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center">
            <div className="bg-lightBg dark:bg-darkBg p-6 rounded-lg shadow-lg w-full max-w-md">
              <h2 className="text-xl font-medium text-lightText dark:text-darkText mb-4 flex items-center">
                <PlusCircle className="h-5 w-5 mr-2" /> Ajouter un atelier
              </h2>
              <form onSubmit={handleAddAtelier} className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-lightText dark:text-darkText mb-1">Nom</label>
                  <input type="text" value={newAtelier.nom} onChange={(e) => setNewAtelier({ ...newAtelier, nom: e.target.value })} className="w-full px-3 py-2 border border-lightBorder dark:border-darkBorder rounded-lg bg-lightCard dark:bg-darkCard text-lightText dark:text-darkText focus:outline-none focus:ring-2 focus:ring-blue-500" required />
                </div>
                <div>
                  <label className="block text-sm font-medium text-lightText dark:text-darkText mb-1">Description</label>
                  <textarea value={newAtelier.description} onChange={(e) => setNewAtelier({ ...newAtelier, description: e.target.value })} className="w-full px-3 py-2 border border-lightBorder dark:border-darkBorder rounded-lg bg-lightCard dark:bg-darkCard text-lightText dark:text-darkText focus:outline-none focus:ring-2 focus:ring-blue-500" rows={3} />
                </div>
                <div>
                  <label className="block text-sm font-medium text-lightText dark:text-darkText mb-1">Date</label>
                  <input type="datetime-local" value={newAtelier.date} onChange={(e) => setNewAtelier({ ...newAtelier, date: e.target.value })} className="w-full px-3 py-2 border border-lightBorder dark:border-darkBorder rounded-lg bg-lightCard dark:bg-darkCard text-lightText dark:text-darkText focus:outline-none focus:ring-2 focus:ring-blue-500" required />
                </div>
                <div>
                  <label className="block text-sm font-medium text-lightText dark:text-darkText mb-1">Durée (minutes)</label>
                  <input type="number" value={newAtelier.duree} onChange={(e) => setNewAtelier({ ...newAtelier, duree: e.target.value })} className="w-full px-3 py-2 border border-lightBorder dark:border-darkBorder rounded-lg bg-lightCard dark:bg-darkCard text-lightText dark:text-darkText focus:outline-none focus:ring-2 focus:ring-blue-500" required />
                </div>
                <div>
                  <label className="block text-sm font-medium text-lightText dark:text-darkText mb-1">Prix (FCFA)</label>
                  <input type="number" step="0.01" value={newAtelier.prix} onChange={(e) => setNewAtelier({ ...newAtelier, prix: e.target.value })} className="w-full px-3 py-2 border border-lightBorder dark:border-darkBorder rounded-lg bg-lightCard dark:bg-darkCard text-lightText dark:text-darkText focus:outline-none focus:ring-2 focus:ring-blue-500" required />
                </div>
                <div>
                  <label className="block text-sm font-medium text-lightText dark:text-darkText mb-1">Places totales</label>
                  <input type="number" value={newAtelier.places_totales} onChange={(e) => setNewAtelier({ ...newAtelier, places_totales: e.target.value })} className="w-full px-3 py-2 border border-lightBorder dark:border-darkBorder rounded-lg bg-lightCard dark:bg-darkCard text-lightText dark:text-darkText focus:outline-none focus:ring-2 focus:ring-blue-500" required />
                </div>
                <div>
                  <label className="block text-sm font-medium text-lightText dark:text-darkText mb-1">Actif</label>
                  <input type="checkbox" checked={newAtelier.is_active} onChange={(e) => setNewAtelier({ ...newAtelier, is_active: e.target.checked })} className="h-5 w-5 text-blue-500 focus:ring-blue-500 border-lightBorder dark:border-darkBorder rounded" />
                </div>
                <div className="flex gap-2 justify-end">
                  <ButtonPrimary type="button" onClick={closeAddModal} className="px-4 py-2 bg-lightCard dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600">Annuler</ButtonPrimary>
                  <ButtonPrimary type="submit" className="px-4 py-2 bg-blue-500 text-white hover:bg-blue-600">Ajouter</ButtonPrimary>
                </div>
              </form>
            </div>
          </div>
        )}

        {isEditModalOpen && selectedAtelier && (
          <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center">
            <div className="bg-lightBg dark:bg-darkBg p-6 rounded-lg shadow-lg w-full max-w-md">
              <h2 className="text-xl font-medium text-lightText dark:text-darkText mb-4 flex items-center">
                <Edit className="h-5 w-5 mr-2" /> Modifier l’atelier
              </h2>
              <form onSubmit={handleEditAtelier} className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-lightText dark:text-darkText mb-1">Nom</label>
                  <input type="text" value={editAtelier.nom} onChange={(e) => setEditAtelier({ ...editAtelier, nom: e.target.value })} className="w-full px-3 py-2 border border-lightBorder dark:border-darkBorder rounded-lg bg-lightCard dark:bg-darkCard text-lightText dark:text-darkText focus:outline-none focus:ring-2 focus:ring-blue-500" required />
                </div>
                <div>
                  <label className="block text-sm font-medium text-lightText dark:text-darkText mb-1">Description</label>
                  <textarea value={editAtelier.description} onChange={(e) => setEditAtelier({ ...editAtelier, description: e.target.value })} className="w-full px-3 py-2 border border-lightBorder dark:border-darkBorder rounded-lg bg-lightCard dark:bg-darkCard text-lightText dark:text-darkText focus:outline-none focus:ring-2 focus:ring-blue-500" rows={3} />
                </div>
                <div>
                  <label className="block text-sm font-medium text-lightText dark:text-darkText mb-1">Date</label>
                  <input type="date" value={editAtelier.date} onChange={(e) => setEditAtelier({ ...editAtelier, date: e.target.value })} className="w-full px-3 py-2 border border-lightBorder dark:border-darkBorder rounded-lg bg-lightCard dark:bg-darkCard text-lightText dark:text-darkText focus:outline-none focus:ring-2 focus:ring-blue-500" required />
                </div>
                <div>
                  <label className="block text-sm font-medium text-lightText dark:text-darkText mb-1">Durée (minutes)</label>
                  <input type="number" value={editAtelier.duree} onChange={(e) => setEditAtelier({ ...editAtelier, duree: e.target.value })} className="w-full px-3 py-2 border border-lightBorder dark:border-darkBorder rounded-lg bg-lightCard dark:bg-darkCard text-lightText dark:text-darkText focus:outline-none focus:ring-2 focus:ring-blue-500" required />
                </div>
                <div>
                  <label className="block text-sm font-medium text-lightText dark:text-darkText mb-1">Prix (FCFA)</label>
                  <input type="number" step="0.01" value={editAtelier.prix} onChange={(e) => setEditAtelier({ ...editAtelier, prix: e.target.value })} className="w-full px-3 py-2 border border-lightBorder dark:border-darkBorder rounded-lg bg-lightCard dark:bg-darkCard text-lightText dark:text-darkText focus:outline-none focus:ring-2 focus:ring-blue-500" required />
                </div>
                <div>
                  <label className="block text-sm font-medium text-lightText dark:text-darkText mb-1">Places totales</label>
                  <input type="number" value={editAtelier.places_totales} onChange={(e) => setEditAtelier({ ...editAtelier, places_totales: e.target.value })} className="w-full px-3 py-2 border border-lightBorder dark:border-darkBorder rounded-lg bg-lightCard dark:bg-darkCard text-lightText dark:text-darkText focus:outline-none focus:ring-2 focus:ring-blue-500" required />
                </div>
                <div>
                  <label className="block text-sm font-medium text-lightText dark:text-darkText mb-1">Actif</label>
                  <input type="checkbox" checked={editAtelier.is_active} onChange={(e) => setEditAtelier({ ...editAtelier, is_active: e.target.checked })} className="h-5 w-5 text-blue-500 focus:ring-blue-500 border-lightBorder dark:border-darkBorder rounded" />
                </div>
                <div className="flex gap-2 justify-end">
                  <ButtonPrimary type="button" onClick={closeEditModal} className="px-4 py-2 bg-lightCard dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600">Annuler</ButtonPrimary>
                  <ButtonPrimary type="submit" className="px-4 py-2 bg-blue-500 text-white hover:bg-blue-600">Enregistrer</ButtonPrimary>
                </div>
              </form>
            </div>
          </div>
        )}

        {isDeleteModalOpen && selectedAtelier && (
          <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center">
            <div className="bg-lightBg dark:bg-darkBg p-6 rounded-lg shadow-lg w-full max-w-md">
              <h2 className="text-xl font-medium text-lightText dark:text-darkText mb-4 flex items-center">
                <Trash2 className="h-5 w-5 mr-2" /> Supprimer l’atelier
              </h2>
              <p className="text-gray-700 dark:text-gray-300 mb-4">
                Êtes-vous sûr de vouloir supprimer l’atelier <span className="font-medium">{selectedAtelier.nom}</span> ?
              </p>
              <div className="flex gap-2 justify-end">
                <ButtonPrimary type="button" onClick={closeDeleteModal} className="px-4 py-2 bg-lightCard dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600">Annuler</ButtonPrimary>
                <ButtonPrimary onClick={handleDeleteAtelier} className="px-4 py-2 bg-red-500 text-white hover:bg-red-600">Supprimer</ButtonPrimary>
              </div>
            </div>
          </div>
        )}
      </div>
    </AdminLayout>
  );
};

export default AdminAteliersPage;

--- pages\AdminAteliersParticipantsPage.tsx ---
import React, { useState, useEffect } from 'react';
import { useNavigate, useParams } from 'react-router-dom';
import api from '../services/api';
import AdminLayout from '../components/AdminLayout';
import ButtonPrimary from '../components/ButtonPrimary';
import { Users, Search, ChevronLeft, ChevronRight, ArrowLeft } from 'lucide-react';

interface Participant {
  id: string;
  utilisateur: string;
  date_inscription: string;
  statut: string;
}

interface Atelier {
  id: string;
  nom: string;
}

interface ApiResponse {
  results: Participant[];
  count: number;
  next: string | null;
  previous: string | null;
}

const AdminAteliersParticipantsPage: React.FC = () => {
  const navigate = useNavigate();
  const { atelierId } = useParams<{ atelierId: string }>();
  const [atelier, setAtelier] = useState<Atelier | null>(null);
  const [participants, setParticipants] = useState<Participant[]>([]);
  const [totalParticipants, setTotalParticipants] = useState(0);
  const [currentPage, setCurrentPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [searchQuery, setSearchQuery] = useState('');
  const participantsPerPage = 10;

  useEffect(() => {
    fetchAtelier();
    fetchParticipants();
  }, [atelierId, currentPage, searchQuery]);

  const fetchAtelier = async () => {
    try {
      const response = await api.get(`/ateliers/${atelierId}/`);
      setAtelier(response.data);
    } catch (err: any) {
      setError('Erreur lors du chargement de l’atelier.');
    }
  };

  const fetchParticipants = async () => {
    setLoading(true);
    try {
      const response = await api.get(`/ateliers/${atelierId}/participants/`, {
        params: { page: currentPage, per_page: participantsPerPage, search: searchQuery || undefined },
      });
      setParticipants(response.data);
      setTotalParticipants(response.data.length); // Ajuster si pagination côté serveur
      setTotalPages(Math.ceil(response.data.length / participantsPerPage));
      setLoading(false);
    } catch (err: any) {
      setError('Erreur lors du chargement des participants.');
      setLoading(false);
    }
  };

  const handleSearch = (e: React.ChangeEvent<HTMLInputElement>) => {
    setSearchQuery(e.target.value);
    setCurrentPage(1);
  };

  const handlePrevPage = () => { if (currentPage > 1) setCurrentPage(currentPage - 1); };
  const handleNextPage = () => { if (currentPage < totalPages) setCurrentPage(currentPage + 1); };

  const handleBack = () => { navigate('/admin/ateliers'); };

  if (loading) return <div className="text-center py-16 text-lightText dark:text-darkText">Chargement...</div>;
  if (error) return <div className="text-center py-16 text-red-500">{error}</div>;

  return (
    <AdminLayout>
      <div className="max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8">
        <div className="flex items-center justify-between mb-6">
          <h1 className="text-2xl sm:text-3xl font-serif font-medium text-lightText dark:text-darkText flex items-center">
            <Users className="h-6 w-6 mr-2" /> Participants - {atelier?.nom}
          </h1>
          <ButtonPrimary onClick={handleBack} className="px-4 py-2 bg-gray-500 text-white hover:bg-gray-600 flex items-center">
            <ArrowLeft className="h-5 w-5 mr-2" /> Retour
          </ButtonPrimary>
        </div>

        <div className="mb-6 flex flex-col sm:flex-row gap-4 items-center justify-between">
          <div className="relative w-full sm:w-64">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400" />
            <input
              type="text"
              value={searchQuery}
              onChange={handleSearch}
              placeholder="Rechercher par utilisateur..."
              className="w-full pl-10 pr-4 py-2 border border-lightBorder dark:border-darkBorder rounded-lg bg-lightBg dark:bg-darkBg text-lightText dark:text-darkText focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
          </div>
        </div>

        <div className="overflow-x-auto">
          <table className="w-full text-left text-sm">
            <thead className="bg-lightCard dark:bg-darkCard">
              <tr className="border-b border-lightBorder dark:border-darkBorder">
                <th className="py-3 px-4">ID</th>
                <th className="py-3 px-4">Utilisateur</th>
                <th className="py-3 px-4">Date d’inscription</th>
                <th className="py-3 px-4">Statut</th>
              </tr>
            </thead>
            <tbody>
              {participants.map((participant) => (
                <tr key={participant.id} className="border-b border-lightBorder dark:border-darkBorder hover:bg-gray-100 dark:hover:bg-gray-700">
                  <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{participant.id}</td>
                  <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{participant.utilisateur}</td>
                  <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{new Date(participant.date_inscription).toLocaleString()}</td>
                  <td className="py-3 px-4">
                    <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${participant.statut === 'present' ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200' : participant.statut === 'annule' ? 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200' : 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200'}`}>
                      {participant.statut}
                    </span>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>

        <div className="mt-6 flex flex-col sm:flex-row items-center justify-between gap-4">
          <p className="text-sm text-gray-700 dark:text-gray-300">
            Affichage de {(currentPage - 1) * participantsPerPage + 1} à {Math.min(currentPage * participantsPerPage, totalParticipants)} sur {totalParticipants} participants
          </p>
          <div className="flex gap-2">
            <ButtonPrimary onClick={handlePrevPage} disabled={currentPage === 1} className="px-3 py-2 bg-lightCard dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600 disabled:opacity-50 flex items-center">
              <ChevronLeft className="h-5 w-5 mr-1" /> Précédent
            </ButtonPrimary>
            <ButtonPrimary onClick={handleNextPage} disabled={currentPage === totalPages} className="px-3 py-2 bg-lightCard dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600 disabled:opacity-50 flex items-center">
              Suivant <ChevronRight className="h-5 w-5 ml-1" />
            </ButtonPrimary>
          </div>
        </div>
      </div>
    </AdminLayout>
  );
};

export default AdminAteliersParticipantsPage;

--- pages\AdminAteliersStatsPage.tsx ---
import React, { useState, useEffect } from 'react';
import api from '../services/api';
import AdminLayout from '../components/AdminLayout';
import ButtonPrimary from '../components/ButtonPrimary';
import { Bar } from 'react-chartjs-2';
import { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend } from 'chart.js';
import { BarChart2, Calendar, DollarSign, Users } from 'lucide-react';

ChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);

interface AtelierStats {
  total_ateliers: number;
  active_ateliers: number;
  total_revenus: string;
  inscriptions_by_atelier: { atelier__nom: string; total: number }[];
}

const AdminAteliersStatsPage: React.FC = () => {
  const [statsData, setStatsData] = useState<AtelierStats | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [daysFilter, setDaysFilter] = useState<number>(30);

  useEffect(() => {
    fetchStatsData();
  }, [daysFilter]);

  const fetchStatsData = async () => {
    setLoading(true);
    try {
      const response = await api.get('/ateliers/stats/', { params: { days: daysFilter } });
      setStatsData(response.data);
      setLoading(false);
    } catch (err: any) {
      setError('Erreur lors du chargement des statistiques des ateliers.');
      setLoading(false);
    }
  };

  const handleFilterChange = (days: number) => {
    setDaysFilter(days);
  };

  const inscriptionsChartData = {
    labels: statsData ? statsData.inscriptions_by_atelier.map((item) => item.atelier__nom) : [],
    datasets: [
      {
        label: 'Inscriptions par atelier',
        data: statsData ? statsData.inscriptions_by_atelier.map((item) => item.total) : [],
        backgroundColor: '#2196F3',
      },
    ],
  };

  const chartOptions = {
    responsive: true,
    maintainAspectRatio: false,
    plugins: { legend: { position: 'top' as const }, title: { display: true, text: `Inscriptions sur ${daysFilter} jours` } },
  };

  if (loading) return <div className="text-center py-16 text-lightText dark:text-darkText">Chargement...</div>;
  if (error) return <div className="text-center py-16 text-red-500">{error}</div>;

  return (
    <AdminLayout>
      <div className="max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8">
        <h1 className="text-2xl sm:text-3xl font-serif font-medium text-lightText dark:text-darkText mb-6 flex items-center">
          <BarChart2 className="h-6 w-6 mr-2" /> Statistiques des Ateliers
        </h1>

        <div className="mb-6 flex flex-wrap gap-2">
          <ButtonPrimary onClick={() => handleFilterChange(7)} className={`px-4 py-2 ${daysFilter === 7 ? 'bg-blue-500 text-white' : 'bg-lightCard dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600'}`}>7 jours</ButtonPrimary>
          <ButtonPrimary onClick={() => handleFilterChange(30)} className={`px-4 py-2 ${daysFilter === 30 ? 'bg-blue-500 text-white' : 'bg-lightCard dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600'}`}>30 jours</ButtonPrimary>
          <ButtonPrimary onClick={() => handleFilterChange(90)} className={`px-4 py-2 ${daysFilter === 90 ? 'bg-blue-500 text-white' : 'bg-lightCard dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600'}`}>90 jours</ButtonPrimary>
        </div>

        <div className="grid grid-cols-1 sm:grid-cols-3 gap-4 mb-6">
          <div className="bg-lightCard dark:bg-darkCard p-4 rounded-lg shadow-md">
            <h2 className="text-lg font-medium text-lightText dark:text-darkText mb-2 flex items-center">
              <Calendar className="h-5 w-5 mr-2" /> Total Ateliers
            </h2>
            <p className="text-2xl font-bold text-gray-700 dark:text-gray-300">{statsData?.total_ateliers}</p>
          </div>
          <div className="bg-lightCard dark:bg-darkCard p-4 rounded-lg shadow-md">
            <h2 className="text-lg font-medium text-lightText dark:text-darkText mb-2 flex items-center">
              <Calendar className="h-5 w-5 mr-2" /> Ateliers Actifs
            </h2>
            <p className="text-2xl font-bold text-gray-700 dark:text-gray-300">{statsData?.active_ateliers}</p>
          </div>
          <div className="bg-lightCard dark:bg-darkCard p-4 rounded-lg shadow-md">
            <h2 className="text-lg font-medium text-lightText dark:text-darkText mb-2 flex items-center">
              <DollarSign className="h-5 w-5 mr-2" /> Total Revenus
            </h2>
            <p className="text-2xl font-bold text-gray-700 dark:text-gray-300">{statsData?.total_revenus} FCFA</p>
          </div>
        </div>

        <div className="bg-lightCard dark:bg-darkCard p-4 rounded-lg shadow-md">
          <h2 className="text-lg font-medium text-lightText dark:text-darkText mb-2">Inscriptions par atelier</h2>
          <div className="h-48 sm:h-64">
            <Bar data={inscriptionsChartData} options={chartOptions} />
          </div>
        </div>
      </div>
    </AdminLayout>
  );
};

export default AdminAteliersStatsPage;

--- pages\AdminCartsPage.tsx ---
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import api from '../services/api';
import AdminLayout from '../components/AdminLayout';
import ButtonPrimary from '../components/ButtonPrimary';
import { ShoppingBag, Search, Eye, Trash2, ChevronLeft, ChevronRight } from 'lucide-react';

interface Panier {
  id: string;
  client: { id: string; username: string; email: string };
  items: { id: string; produit: { id: string; nom: string; prix: string }; quantite: number }[];
}

interface ApiResponse {
  results: Panier[];
  count: number;
  next: string | null;
  previous: string | null;
}

const AdminCartsPage: React.FC = () => {
  const navigate = useNavigate();
  const [carts, setCarts] = useState<Panier[]>([]);
  const [totalCarts, setTotalCarts] = useState(0);
  const [currentPage, setCurrentPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedCart, setSelectedCart] = useState<Panier | null>(null);
  const [isDetailsModalOpen, setIsDetailsModalOpen] = useState(false);
  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);
  const cartsPerPage = 10;

  useEffect(() => {
    fetchCarts();
  }, [currentPage, searchQuery]);

  const fetchCarts = async () => {
    setLoading(true);
    try {
      const response = await api.get<ApiResponse>('/paniers/', {
        params: {
          page: currentPage,
          per_page: cartsPerPage,
          search: searchQuery || undefined,
        },
      });
      setCarts(response.data.results);
      setTotalCarts(response.data.count);
      setTotalPages(Math.ceil(response.data.count / cartsPerPage));
      setLoading(false);
    } catch (err: any) {
      console.error('Erreur lors du chargement des paniers:', err.response?.data);
      setError('Erreur lors du chargement des paniers.');
      setLoading(false);
    }
  };

  const handleSearch = (e: React.ChangeEvent<HTMLInputElement>) => {
    setSearchQuery(e.target.value);
    setCurrentPage(1);
  };

  const handlePrevPage = () => {
    if (currentPage > 1) setCurrentPage(currentPage - 1);
  };

  const handleNextPage = () => {
    if (currentPage < totalPages) setCurrentPage(currentPage + 1);
  };

  const openDetailsModal = (cart: Panier) => {
    setSelectedCart(cart);
    setIsDetailsModalOpen(true);
  };

  const closeDetailsModal = () => {
    setIsDetailsModalOpen(false);
    setSelectedCart(null);
  };

  const openDeleteModal = (cart: Panier) => {
    setSelectedCart(cart);
    setIsDeleteModalOpen(true);
  };

  const closeDeleteModal = () => {
    setIsDeleteModalOpen(false);
    setSelectedCart(null);
  };

  const handleDeleteCart = async () => {
    if (!selectedCart) return;

    try {
      await api.delete(`/paniers/${selectedCart.id}/`);
      setIsDeleteModalOpen(false);
      fetchCarts();
    } catch (err: any) {
      console.error('Erreur lors de la suppression du panier:', err.response?.data);
      setError('Erreur lors de la suppression du panier.');
    }
  };

  if (loading) {
    return <div className="text-center py-16 text-lightText dark:text-darkText">Chargement...</div>;
  }

  if (error) {
    return <div className="text-center py-16 text-red-500">{error}</div>;
  }

  return (
    <AdminLayout>
      <div className="max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8">
        <h1 className="text-2xl sm:text-3xl font-serif font-medium text-lightText dark:text-darkText mb-4 sm:mb-6 flex items-center">
          <ShoppingBag className="h-6 w-6 mr-2" /> Gestion des Paniers
        </h1>

        <div className="mb-6 flex flex-col sm:flex-row gap-4 items-center justify-between">
          <div className="relative w-full sm:w-64">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400" />
            <input
              type="text"
              value={searchQuery}
              onChange={handleSearch}
              placeholder="Rechercher par email ou nom d’utilisateur..."
              className="w-full pl-10 pr-4 py-2 border border-lightBorder dark:border-darkBorder rounded-lg bg-lightBg dark:bg-darkBg text-lightText dark:text-darkText focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
          </div>
        </div>

        <div className="overflow-x-auto">
          <table className="w-full text-left text-sm">
            <thead className="bg-lightCard dark:bg-darkCard">
              <tr className="border-b border-lightBorder dark:border-darkBorder">
                <th className="py-3 px-4 text-lightText dark:text-darkText">ID</th>
                <th className="py-3 px-4 text-lightText dark:text-darkText">Utilisateur</th>
                <th className="py-3 px-4 text-lightText dark:text-darkText">Email</th>
                <th className="py-3 px-4 text-lightText dark:text-darkText">Nb Articles</th>
                <th className="py-3 px-4 text-lightText dark:text-darkText">Total</th>
                <th className="py-3 px-4 text-lightText dark:text-darkText">Actions</th>
              </tr>
            </thead>
            <tbody>
              {carts.map((cart) => {
                const total = cart.items.reduce((sum, item) => sum + parseFloat(item.produit.prix) * item.quantite, 0);
                return (
                  <tr key={cart.id} className="border-b border-lightBorder dark:border-darkBorder hover:bg-gray-100 dark:hover:bg-gray-700">
                    <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{cart.id}</td>
                    <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{cart.client.username}</td>
                    <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{cart.client.email}</td>
                    <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{cart.items.length}</td>
                    <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{total.toFixed(2)} FCFA</td>
                    <td className="py-3 px-4 flex gap-2">
                      <ButtonPrimary
                        onClick={() => openDetailsModal(cart)}
                        className="px-2 py-1 bg-blue-500 text-white hover:bg-blue-600 flex items-center text-sm"
                      >
                        <Eye className="h-4 w-4 mr-1" /> Détails
                      </ButtonPrimary>
                      <ButtonPrimary
                        onClick={() => openDeleteModal(cart)}
                        className="px-2 py-1 bg-red-500 text-white hover:bg-red-600 flex items-center text-sm"
                      >
                        <Trash2 className="h-4 w-4 mr-1" /> Supprimer
                      </ButtonPrimary>
                    </td>
                  </tr>
                );
              })}
            </tbody>
          </table>
        </div>

        <div className="mt-6 flex flex-col sm:flex-row items-center justify-between gap-4">
          <p className="text-sm text-gray-700 dark:text-gray-300">
            Affichage de {(currentPage - 1) * cartsPerPage + 1} à{' '}
            {Math.min(currentPage * cartsPerPage, totalCarts)} sur {totalCarts} paniers
          </p>
          <div className="flex gap-2">
            <ButtonPrimary
              onClick={handlePrevPage}
              disabled={currentPage === 1}
              className="px-3 py-2 bg-lightCard dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600 disabled:opacity-50 flex items-center"
            >
              <ChevronLeft className="h-5 w-5 mr-1" /> Précédent
            </ButtonPrimary>
            <ButtonPrimary
              onClick={handleNextPage}
              disabled={currentPage === totalPages}
              className="px-3 py-2 bg-lightCard dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600 disabled:opacity-50 flex items-center"
            >
              Suivant <ChevronRight className="h-5 w-5 ml-1" />
            </ButtonPrimary>
          </div>
        </div>

        {isDetailsModalOpen && selectedCart && (
          <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center">
            <div className="bg-lightBg dark:bg-darkBg p-6 rounded-lg shadow-lg w-full max-w-2xl">
              <h2 className="text-xl font-medium text-lightText dark:text-darkText mb-4 flex items-center">
                <Eye className="h-5 w-5 mr-2" /> Détails du Panier de {selectedCart.client.username}
              </h2>
              <div className="overflow-x-auto">
                <table className="w-full text-left text-sm">
                  <thead className="bg-lightCard dark:bg-darkCard">
                    <tr className="border-b border-lightBorder dark:border-darkBorder">
                      <th className="py-3 px-4 text-lightText dark:text-darkText">ID Produit</th>
                      <th className="py-3 px-4 text-lightText dark:text-darkText">Nom</th>
                      <th className="py-3 px-4 text-lightText dark:text-darkText">Quantité</th>
                      <th className="py-3 px-4 text-lightText dark:text-darkText">Prix</th>
                      <th className="py-3 px-4 text-lightText dark:text-darkText">Total</th>
                    </tr>
                  </thead>
                  <tbody>
                    {selectedCart.items.map((item) => (
                      <tr key={item.id} className="border-b border-lightBorder dark:border-darkBorder">
                        <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{item.produit.id}</td>
                        <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{item.produit.nom}</td>
                        <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{item.quantite}</td>
                        <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{item.produit.prix} FCFA</td>
                        <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{(parseFloat(item.produit.prix) * item.quantite).toFixed(2)} FCFA</td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
              <div className="mt-4 flex justify-end">
                <ButtonPrimary
                  onClick={closeDetailsModal}
                  className="px-4 py-2 bg-lightCard dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600"
                >
                  Fermer
                </ButtonPrimary>
              </div>
            </div>
          </div>
        )}

        {isDeleteModalOpen && selectedCart && (
          <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center">
            <div className="bg-lightBg dark:bg-darkBg p-6 rounded-lg shadow-lg w-full max-w-md">
              <h2 className="text-xl font-medium text-lightText dark:text-darkText mb-4 flex items-center">
                <Trash2 className="h-5 w-5 mr-2" /> Supprimer le Panier
              </h2>
              <p className="text-gray-700 dark:text-gray-300 mb-4">
                Êtes-vous sûr de vouloir supprimer le panier de <span className="font-medium">{selectedCart.client.email}</span> ?
              </p>
              <div className="flex gap-2 justify-end">
                <ButtonPrimary
                  onClick={closeDeleteModal}
                  className="px-4 py-2 bg-lightCard dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600"
                >
                  Annuler
                </ButtonPrimary>
                <ButtonPrimary
                  onClick={handleDeleteCart}
                  className="px-4 py-2 bg-red-500 text-white hover:bg-red-600"
                >
                  Supprimer
                </ButtonPrimary>
              </div>
            </div>
          </div>
        )}
      </div>
    </AdminLayout>
  );
};

export default AdminCartsPage;

--- pages\AdminCategoriesPage.tsx ---
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import api from '../services/api';
import AdminLayout from '../components/AdminLayout';
import ButtonPrimary from '../components/ButtonPrimary';
import { Folder, Search, Filter, Edit, Trash2, PlusCircle, ChevronLeft, ChevronRight } from 'lucide-react';

interface Category {
  id: string;
  nom: string;
  is_active: boolean;
  date_creation: string;
}

interface ApiResponse {
  results: Category[];
  count: number;
  next: string | null;
  previous: string | null;
}

const AdminCategoriesPage: React.FC = () => {
  const navigate = useNavigate();
  const [categories, setCategories] = useState<Category[]>([]);
  const [totalCategories, setTotalCategories] = useState(0);
  const [currentPage, setCurrentPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [searchQuery, setSearchQuery] = useState('');
  const [filterStatus, setFilterStatus] = useState<string>('all');
  const [selectedCategory, setSelectedCategory] = useState<Category | null>(null);
  const [isAddModalOpen, setIsAddModalOpen] = useState(false);
  const [isEditModalOpen, setIsEditModalOpen] = useState(false);
  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);
  const [newCategory, setNewCategory] = useState({
    nom: '',
    is_active: true,
  });
  const [editCategory, setEditCategory] = useState({
    nom: '',
    is_active: true,
  });
  const categoriesPerPage = 10;

  useEffect(() => {
    fetchCategories();
  }, [currentPage, searchQuery, filterStatus]);

  const fetchCategories = async () => {
    setLoading(true);
    try {
      const response = await api.get<ApiResponse>('/categories/', {
        params: {
          page: currentPage,
          per_page: categoriesPerPage,
          search: searchQuery || undefined,
          is_active: filterStatus !== 'all' ? filterStatus : undefined,
        },
      });
      setCategories(response.data.results);
      setTotalCategories(response.data.count);
      setTotalPages(Math.ceil(response.data.count / categoriesPerPage));
      setLoading(false);
    } catch (err: any) {
      console.error('Erreur lors du chargement des catégories:', err.response?.data);
      setError('Erreur lors du chargement des catégories.');
      setLoading(false);
    }
  };

  const handleSearch = (e: React.ChangeEvent<HTMLInputElement>) => {
    setSearchQuery(e.target.value);
    setCurrentPage(1);
  };

  const handleFilterStatus = (e: React.ChangeEvent<HTMLSelectElement>) => {
    setFilterStatus(e.target.value);
    setCurrentPage(1);
  };

  const handlePrevPage = () => {
    if (currentPage > 1) setCurrentPage(currentPage - 1);
  };

  const handleNextPage = () => {
    if (currentPage < totalPages) setCurrentPage(currentPage + 1);
  };

  const openAddModal = () => {
    setNewCategory({ nom: '', is_active: true });
    setIsAddModalOpen(true);
  };

  const closeAddModal = () => {
    setIsAddModalOpen(false);
  };

  const handleAddCategory = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      await api.post('/categories/', newCategory);
      setIsAddModalOpen(false);
      fetchCategories();
    } catch (err: any) {
      console.error('Erreur lors de l’ajout de la catégorie:', err.response?.data);
      setError('Erreur lors de l’ajout de la catégorie.');
    }
  };

  const openEditModal = (category: Category) => {
    setSelectedCategory(category);
    setEditCategory({
      nom: category.nom,
      is_active: category.is_active,
    });
    setIsEditModalOpen(true);
  };

  const closeEditModal = () => {
    setIsEditModalOpen(false);
    setSelectedCategory(null);
  };

  const handleEditCategory = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!selectedCategory) return;

    try {
      await api.put(`/categories/${selectedCategory.id}/`, editCategory);
      setIsEditModalOpen(false);
      fetchCategories();
    } catch (err: any) {
      console.error('Erreur lors de la mise à jour de la catégorie:', err.response?.data);
      setError('Erreur lors de la mise à jour de la catégorie.');
    }
  };

  const openDeleteModal = (category: Category) => {
    setSelectedCategory(category);
    setIsDeleteModalOpen(true);
  };

  const closeDeleteModal = () => {
    setIsDeleteModalOpen(false);
    setSelectedCategory(null);
  };

  const handleDeleteCategory = async () => {
    if (!selectedCategory) return;

    try {
      await api.delete(`/categories/${selectedCategory.id}/`);
      setIsDeleteModalOpen(false);
      fetchCategories();
    } catch (err: any) {
      console.error('Erreur lors de la suppression de la catégorie:', err.response?.data);
      setError('Erreur lors de la suppression de la catégorie.');
    }
  };

  if (loading) {
    return <div className="text-center py-16 text-lightText dark:text-darkText">Chargement...</div>;
  }

  if (error) {
    return <div className="text-center py-16 text-red-500">{error}</div>;
  }

  return (
    <AdminLayout>
      <div className="max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8">
        <h1 className="text-2xl sm:text-3xl font-serif font-medium text-lightText dark:text-darkText mb-4 sm:mb-6 flex items-center">
          <Folder className="h-6 w-6 mr-2" /> Gestion des Catégories
        </h1>

        {/* Filtres et Recherche */}
        <div className="mb-6 flex flex-col sm:flex-row gap-4 items-center justify-between">
          <div className="flex flex-col sm:flex-row gap-4 w-full sm:w-auto">
            <div className="relative w-full sm:w-64">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400" />
              <input
                type="text"
                value={searchQuery}
                onChange={handleSearch}
                placeholder="Rechercher par nom..."
                className="w-full pl-10 pr-4 py-2 border border-lightBorder dark:border-darkBorder rounded-lg bg-lightBg dark:bg-darkBg text-lightText dark:text-darkText focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
            </div>
            <select
              value={filterStatus}
              onChange={handleFilterStatus}
              className="px-4 py-2 border border-lightBorder dark:border-darkBorder rounded-lg bg-lightBg dark:bg-darkBg text-lightText dark:text-darkText focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              <option value="all">Tous les statuts</option>
              <option value="true">Actif</option>
              <option value="false">Inactif</option>
            </select>
          </div>
          <ButtonPrimary
            onClick={openAddModal}
            className="px-4 py-2 bg-blue-500 text-white hover:bg-blue-600 flex items-center"
          >
            <PlusCircle className="h-5 w-5 mr-2" /> Ajouter une catégorie
          </ButtonPrimary>
        </div>

        {/* Liste des catégories */}
        <div className="overflow-x-auto">
          <table className="w-full text-left text-sm">
            <thead className="bg-lightCard dark:bg-darkCard">
              <tr className="border-b border-lightBorder dark:border-darkBorder">
                <th className="py-3 px-4 text-lightText dark:text-darkText">ID</th>
                <th className="py-3 px-4 text-lightText dark:text-darkText">Nom</th>
                <th className="py-3 px-4 text-lightText dark:text-darkText">Statut</th>
                <th className="py-3 px-4 text-lightText dark:text-darkText">Date de création</th>
                <th className="py-3 px-4 text-lightText dark:text-darkText">Actions</th>
              </tr>
            </thead>
            <tbody>
              {categories.map((category) => (
                <tr key={category.id} className="border-b border-lightBorder dark:border-darkBorder hover:bg-gray-100 dark:hover:bg-gray-700">
                  <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{category.id}</td>
                  <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{category.nom}</td>
                  <td className="py-3 px-4">
                    <span
                      className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${
                        category.is_active
                          ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200'
                          : 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200'
                      }`}
                    >
                      {category.is_active ? 'Actif' : 'Inactif'}
                    </span>
                  </td>
                  <td className="py-3 px-4 text-gray-700 dark:text-gray-300">
                    {new Date(category.date_creation).toLocaleDateString()}
                  </td>
                  <td className="py-3 px-4 flex gap-2">
                    <ButtonPrimary
                      onClick={() => openEditModal(category)}
                      className="px-2 py-1 bg-blue-500 text-white hover:bg-blue-600 flex items-center text-sm"
                    >
                      <Edit className="h-4 w-4 mr-1" /> Modifier
                    </ButtonPrimary>
                    <ButtonPrimary
                      onClick={() => openDeleteModal(category)}
                      className="px-2 py-1 bg-red-500 text-white hover:bg-red-600 flex items-center text-sm"
                    >
                      <Trash2 className="h-4 w-4 mr-1" /> Supprimer
                    </ButtonPrimary>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>

        {/* Pagination */}
        <div className="mt-6 flex flex-col sm:flex-row items-center justify-between gap-4">
          <p className="text-sm text-gray-700 dark:text-gray-300">
            Affichage de {(currentPage - 1) * categoriesPerPage + 1} à{' '}
            {Math.min(currentPage * categoriesPerPage, totalCategories)} sur {totalCategories} catégories
          </p>
          <div className="flex gap-2">
            <ButtonPrimary
              onClick={handlePrevPage}
              disabled={currentPage === 1}
              className="px-3 py-2 bg-lightCard dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600 disabled:opacity-50 flex items-center"
            >
              <ChevronLeft className="h-5 w-5 mr-1" /> Précédent
            </ButtonPrimary>
            <ButtonPrimary
              onClick={handleNextPage}
              disabled={currentPage === totalPages}
              className="px-3 py-2 bg-lightCard dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600 disabled:opacity-50 flex items-center"
            >
              Suivant <ChevronRight className="h-5 w-5 ml-1" />
            </ButtonPrimary>
          </div>
        </div>

        {/* Modal pour ajouter une catégorie */}
        {isAddModalOpen && (
          <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center">
            <div className="bg-lightBg dark:bg-darkBg p-6 rounded-lg shadow-lg w-full max-w-md">
              <h2 className="text-xl font-medium text-lightText dark:text-darkText mb-4 flex items-center">
                <PlusCircle className="h-5 w-5 mr-2" /> Ajouter une catégorie
              </h2>
              <form onSubmit={handleAddCategory} className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-lightText dark:text-darkText mb-1">Nom</label>
                  <input
                    type="text"
                    value={newCategory.nom}
                    onChange={(e) => setNewCategory({ ...newCategory, nom: e.target.value })}
                    className="w-full px-3 py-2 border border-lightBorder dark:border-darkBorder rounded-lg bg-lightCard dark:bg-darkCard text-lightText dark:text-darkText focus:outline-none focus:ring-2 focus:ring-blue-500"
                    required
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-lightText dark:text-darkText mb-1">Actif</label>
                  <input
                    type="checkbox"
                    checked={newCategory.is_active}
                    onChange={(e) => setNewCategory({ ...newCategory, is_active: e.target.checked })}
                    className="h-5 w-5 text-blue-500 focus:ring-blue-500 border-lightBorder dark:border-darkBorder rounded"
                  />
                </div>
                <div className="flex gap-2 justify-end">
                  <ButtonPrimary
                    type="button"
                    onClick={closeAddModal}
                    className="px-4 py-2 bg-lightCard dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600"
                  >
                    Annuler
                  </ButtonPrimary>
                  <ButtonPrimary type="submit" className="px-4 py-2 bg-blue-500 text-white hover:bg-blue-600">
                    Ajouter
                  </ButtonPrimary>
                </div>
              </form>
            </div>
          </div>
        )}

        {/* Modal pour modifier une catégorie */}
        {isEditModalOpen && selectedCategory && (
          <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center">
            <div className="bg-lightBg dark:bg-darkBg p-6 rounded-lg shadow-lg w-full max-w-md">
              <h2 className="text-xl font-medium text-lightText dark:text-darkText mb-4 flex items-center">
                <Edit className="h-5 w-5 mr-2" /> Modifier la catégorie
              </h2>
              <form onSubmit={handleEditCategory} className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-lightText dark:text-darkText mb-1">Nom</label>
                  <input
                    type="text"
                    value={editCategory.nom}
                    onChange={(e) => setEditCategory({ ...editCategory, nom: e.target.value })}
                    className="w-full px-3 py-2 border border-lightBorder dark:border-darkBorder rounded-lg bg-lightCard dark:bg-darkCard text-lightText dark:text-darkText focus:outline-none focus:ring-2 focus:ring-blue-500"
                    required
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-lightText dark:text-darkText mb-1">Actif</label>
                  <input
                    type="checkbox"
                    checked={editCategory.is_active}
                    onChange={(e) => setEditCategory({ ...editCategory, is_active: e.target.checked })}
                    className="h-5 w-5 text-blue-500 focus:ring-blue-500 border-lightBorder dark:border-darkBorder rounded"
                  />
                </div>
                <div className="flex gap-2 justify-end">
                  <ButtonPrimary
                    type="button"
                    onClick={closeEditModal}
                    className="px-4 py-2 bg-lightCard dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600"
                  >
                    Annuler
                  </ButtonPrimary>
                  <ButtonPrimary type="submit" className="px-4 py-2 bg-blue-500 text-white hover:bg-blue-600">
                    Enregistrer
                  </ButtonPrimary>
                </div>
              </form>
            </div>
          </div>
        )}

        {/* Modal pour supprimer une catégorie */}
        {isDeleteModalOpen && selectedCategory && (
          <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center">
            <div className="bg-lightBg dark:bg-darkBg p-6 rounded-lg shadow-lg w-full max-w-md">
              <h2 className="text-xl font-medium text-lightText dark:text-darkText mb-4 flex items-center">
                <Trash2 className="h-5 w-5 mr-2" /> Supprimer la catégorie
              </h2>
              <p className="text-gray-700 dark:text-gray-300 mb-4">
                Êtes-vous sûr de vouloir supprimer la catégorie <span className="font-medium">{selectedCategory.nom}</span> ?
              </p>
              <div className="flex gap-2 justify-end">
                <ButtonPrimary
                  type="button"
                  onClick={closeDeleteModal}
                  className="px-4 py-2 bg-lightCard dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600"
                >
                  Annuler
                </ButtonPrimary>
                <ButtonPrimary
                  onClick={handleDeleteCategory}
                  className="px-4 py-2 bg-red-500 text-white hover:bg-red-600"
                >
                  Supprimer
                </ButtonPrimary>
              </div>
            </div>
          </div>
        )}
      </div>
    </AdminLayout>
  );
};

export default AdminCategoriesPage;

--- pages\AdminCommandLinesPage.tsx ---
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import api from '../services/api';
import AdminLayout from '../components/AdminLayout';
import ButtonPrimary from '../components/ButtonPrimary';
import { ShoppingCart, Search, ChevronLeft, ChevronRight } from 'lucide-react';

interface LigneCommande {
  id: string;
  commande: {
    id: string;
    client: { username: string; email: string };
    total: string;
  };
  produit: { id: string; nom: string };
  quantite: number;
  prix_unitaire: string;
}

interface ApiResponse {
  results: LigneCommande[];
  count: number;
  next: string | null;
  previous: string | null;
}

const AdminCommandLinesPage: React.FC = () => {
  const navigate = useNavigate();
  const [lines, setLines] = useState<LigneCommande[]>([]);
  const [totalLines, setTotalLines] = useState(0);
  const [currentPage, setCurrentPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [searchQuery, setSearchQuery] = useState('');
  const linesPerPage = 10;

  useEffect(() => {
    fetchCommandLines();
  }, [currentPage, searchQuery]);

  const fetchCommandLines = async () => {
    setLoading(true);
    try {
      const response = await api.get<ApiResponse>('/lignes-commande/', {
        params: {
          page: currentPage,
          per_page: linesPerPage,
          search: searchQuery || undefined,
        },
      });
      setLines(response.data.results);
      setTotalLines(response.data.count);
      setTotalPages(Math.ceil(response.data.count / linesPerPage));
      setLoading(false);
    } catch (err: any) {
      console.error('Erreur lors du chargement des lignes de commande:', err.response?.data);
      setError('Erreur lors du chargement des lignes de commande.');
      setLoading(false);
    }
  };

  const handleSearch = (e: React.ChangeEvent<HTMLInputElement>) => {
    setSearchQuery(e.target.value);
    setCurrentPage(1);
  };

  const handlePrevPage = () => {
    if (currentPage > 1) setCurrentPage(currentPage - 1);
  };

  const handleNextPage = () => {
    if (currentPage < totalPages) setCurrentPage(currentPage + 1);
  };

  if (loading) {
    return <div className="text-center py-16 text-lightText dark:text-darkText">Chargement...</div>;
  }

  if (error) {
    return <div className="text-center py-16 text-red-500">{error}</div>;
  }

  return (
    <AdminLayout>
      <div className="max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8">
        <h1 className="text-2xl sm:text-3xl font-serif font-medium text-lightText dark:text-darkText mb-4 sm:mb-6 flex items-center">
          <ShoppingCart className="h-6 w-6 mr-2" /> Gestion des Lignes de Commande
        </h1>

        <div className="mb-6 flex flex-col sm:flex-row gap-4 items-center justify-between">
          <div className="relative w-full sm:w-64">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400" />
            <input
              type="text"
              value={searchQuery}
              onChange={handleSearch}
              placeholder="Rechercher par nom d’utilisateur..."
              className="w-full pl-10 pr-4 py-2 border border-lightBorder dark:border-darkBorder rounded-lg bg-lightBg dark:bg-darkBg text-lightText dark:text-darkText focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
          </div>
        </div>

        <div className="overflow-x-auto">
          <table className="w-full text-left text-sm">
            <thead className="bg-lightCard dark:bg-darkCard">
              <tr className="border-b border-lightBorder dark:border-darkBorder">
                <th className="py-3 px-4 text-lightText dark:text-darkText">ID</th>
                <th className="py-3 px-4 text-lightText dark:text-darkText">Commande</th>
                <th className="py-3 px-4 text-lightText dark:text-darkText">Produit</th>
                <th className="py-3 px-4 text-lightText dark:text-darkText">Quantité</th>
                <th className="py-3 px-4 text-lightText dark:text-darkText">Prix Unitaire</th>
                <th className="py-3 px-4 text-lightText dark:text-darkText">Total Ligne</th>
              </tr>
            </thead>
            <tbody>
              {lines.map((line) => (
                <tr key={line.id} className="border-b border-lightBorder dark:border-darkBorder hover:bg-gray-100 dark:hover:bg-gray-700">
                  <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{line.id}</td>
                  <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{line.commande}</td>
                  <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{line.produit.nom}</td>
                  <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{line.quantite}</td>
                  <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{line.prix_unitaire} FCFA</td>
                  <td className="py-3 px-4 text-gray-700 dark:text-gray-300">
                    {(parseFloat(line.prix_unitaire) * line.quantite).toFixed(2)} FCFA
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>

        <div className="mt-6 flex flex-col sm:flex-row items-center justify-between gap-4">
          <p className="text-sm text-gray-700 dark:text-gray-300">
            Affichage de {(currentPage - 1) * linesPerPage + 1} à{' '}
            {Math.min(currentPage * linesPerPage, totalLines)} sur {totalLines} lignes de commande
          </p>
          <div className="flex gap-2">
            <ButtonPrimary
              onClick={handlePrevPage}
              disabled={currentPage === 1}
              className="px-3 py-2 bg-lightCard dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600 disabled:opacity-50 flex items-center"
            >
              <ChevronLeft className="h-5 w-5 mr-1" /> Précédent
            </ButtonPrimary>
            <ButtonPrimary
              onClick={handleNextPage}
              disabled={currentPage === totalPages}
              className="px-3 py-2 bg-lightCard dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600 disabled:opacity-50 flex items-center"
            >
              Suivant <ChevronRight className="h-5 w-5 ml-1" />
            </ButtonPrimary>
          </div>
        </div>
      </div>
    </AdminLayout>
  );
};

export default AdminCommandLinesPage;

--- pages\AdminCommandsPage.tsx ---
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import api from '../services/api'; // Utilisation de l’instance axios existante
import AdminLayout from '../components/AdminLayout';
import ButtonPrimary from '../components/ButtonPrimary';
import { ShoppingCart, Search, Filter, Eye, XCircle, ChevronLeft, ChevronRight } from 'lucide-react';

interface Commande {
  id: string;
  client: {
    id: string;
    username: string;
    email: string;
  };
  total: string;
  statut: 'en_attente' | 'en_cours' | 'expediee' | 'livree' | 'annulee';
  date: string;
  adresse: {
    nom: string;
    rue: string;
    ville: string;
    code_postal: string;
    pays: string;
  };
  lignes: {
    id: string;
    produit: {
      id: string;
      nom: string;
    };
    quantite: number;
    prix_unitaire: string;
  }[];
}

interface ApiResponse {
  results: Commande[];
  count: number;
  next: string | null;
  previous: string | null;
}

const AdminCommandsPage: React.FC = () => {
  const navigate = useNavigate();
  const [commands, setCommands] = useState<Commande[]>([]);
  const [totalCommands, setTotalCommands] = useState(0);
  const [currentPage, setCurrentPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [searchQuery, setSearchQuery] = useState('');
  const [filterStatus, setFilterStatus] = useState<string>('all');
  const [selectedCommand, setSelectedCommand] = useState<Commande | null>(null);
  const [isDetailsModalOpen, setIsDetailsModalOpen] = useState(false);
  const [isCancelModalOpen, setIsCancelModalOpen] = useState(false);
  const commandsPerPage = 10;

  useEffect(() => {
    fetchCommands();
  }, [currentPage, searchQuery, filterStatus]);

  const fetchCommands = async () => {
    setLoading(true);
    try {
      const response = await api.get<ApiResponse>('/commandes/', {
        params: {
          page: currentPage,
          per_page: commandsPerPage,
          search: searchQuery || undefined,
          statut: filterStatus !== 'all' ? filterStatus : undefined,
        },
      });
      setCommands(response.data.results);
      setTotalCommands(response.data.count);
      setTotalPages(Math.ceil(response.data.count / commandsPerPage));
      setLoading(false);
    } catch (err: any) {
      console.error('Erreur lors du chargement des commandes:', err.response?.data);
      setError('Erreur lors du chargement des commandes.');
      setLoading(false);
    }
  };

  const handleSearch = (e: React.ChangeEvent<HTMLInputElement>) => {
    setSearchQuery(e.target.value);
    setCurrentPage(1);
  };

  const handleFilterStatus = (e: React.ChangeEvent<HTMLSelectElement>) => {
    setFilterStatus(e.target.value);
    setCurrentPage(1);
  };

  const handlePrevPage = () => {
    if (currentPage > 1) setCurrentPage(currentPage - 1);
  };

  const handleNextPage = () => {
    if (currentPage < totalPages) setCurrentPage(currentPage + 1);
  };

  const openDetailsModal = (command: Commande) => {
    setSelectedCommand(command);
    setIsDetailsModalOpen(true);
  };

  const closeDetailsModal = () => {
    setIsDetailsModalOpen(false);
    setSelectedCommand(null);
  };

  const openCancelModal = (command: Commande) => {
    setSelectedCommand(command);
    setIsCancelModalOpen(true);
  };

  const closeCancelModal = () => {
    setIsCancelModalOpen(false);
    setSelectedCommand(null);
  };

  const handleCancelCommand = async () => {
    if (!selectedCommand) return;

    try {
      await api.post(`/commandes/${selectedCommand.id}/cancel/`);
      setIsCancelModalOpen(false);
      fetchCommands();
    } catch (err: any) {
      console.error('Erreur lors de l’annulation de la commande:', err.response?.data);
      setError('Erreur lors de l’annulation de la commande.');
    }
  };

  if (loading) {
    return <div className="text-center py-16 text-lightText dark:text-darkText">Chargement...</div>;
  }

  if (error) {
    return <div className="text-center py-16 text-red-500">{error}</div>;
  }

  return (
    <AdminLayout>
      <div className="max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8">
        <h1 className="text-2xl sm:text-3xl font-serif font-medium text-lightText dark:text-darkText mb-4 sm:mb-6 flex items-center">
          <ShoppingCart className="h-6 w-6 mr-2" /> Gestion des Commandes
        </h1>

        {/* Filtres et Recherche */}
        <div className="mb-6 flex flex-col sm:flex-row gap-4 items-center justify-between">
          <div className="flex flex-col sm:flex-row gap-4 w-full sm:w-auto">
            <div className="relative w-full sm:w-64">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400" />
              <input
                type="text"
                value={searchQuery}
                onChange={handleSearch}
                placeholder="Rechercher par nom d’utilisateur..."
                className="w-full pl-10 pr-4 py-2 border border-lightBorder dark:border-darkBorder rounded-lg bg-lightBg dark:bg-darkBg text-lightText dark:text-darkText focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
            </div>
            <select
              value={filterStatus}
              onChange={handleFilterStatus}
              className="px-4 py-2 border border-lightBorder dark:border-darkBorder rounded-lg bg-lightBg dark:bg-darkBg text-lightText dark:text-darkText focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              <option value="all">Tous les statuts</option>
              <option value="en_attente">En attente</option>
              <option value="en_cours">En cours</option>
              <option value="expediee">Expédiée</option>
              <option value="livree">Livrée</option>
              <option value="annulee">Annulée</option>
            </select>
          </div>
        </div>

        {/* Liste des commandes */}
        <div className="overflow-x-auto">
          <table className="w-full text-left text-sm">
            <thead className="bg-lightCard dark:bg-darkCard">
              <tr className="border-b border-lightBorder dark:border-darkBorder">
                <th className="py-3 px-4 text-lightText dark:text-darkText">ID</th>
                <th className="py-3 px-4 text-lightText dark:text-darkText">Utilisateur</th>
                <th className="py-3 px-4 text-lightText dark:text-darkText">Email</th>
                <th className="py-3 px-4 text-lightText dark:text-darkText">Total</th>
                <th className="py-3 px-4 text-lightText dark:text-darkText">Statut</th>
                <th className="py-3 px-4 text-lightText dark:text-darkText">Date</th>
                <th className="py-3 px-4 text-lightText dark:text-darkText">Actions</th>
              </tr>
            </thead>
            <tbody>
              {commands.map((command) => (
                <tr key={command.id} className="border-b border-lightBorder dark:border-darkBorder hover:bg-gray-100 dark:hover:bg-gray-700">
                  <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{command.id}</td>
                  <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{command.client.username}</td>
                  <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{command.client.email}</td>
                  <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{command.total} FCFA</td>
                  <td className="py-3 px-4">
                    <span
                      className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${
                        command.statut === 'en_attente'
                          ? 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200'
                          : command.statut === 'en_cours'
                          ? 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200'
                          : command.statut === 'expediee'
                          ? 'bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200'
                          : command.statut === 'livree'
                          ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200'
                          : 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200'
                      }`}
                    >
                      {command.statut.charAt(0).toUpperCase() + command.statut.slice(1)}
                    </span>
                  </td>
                  <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{new Date(command.date).toLocaleDateString()}</td>
                  <td className="py-3 px-4 flex gap-2">
                    <ButtonPrimary
                      onClick={() => openDetailsModal(command)}
                      className="px-2 py-1 bg-blue-500 text-white hover:bg-blue-600 flex items-center text-sm"
                    >
                      <Eye className="h-4 w-4 mr-1" /> Détails
                    </ButtonPrimary>
                    {['en_attente', 'en_cours'].includes(command.statut) && (
                      <ButtonPrimary
                        onClick={() => openCancelModal(command)}
                        className="px-2 py-1 bg-red-500 text-white hover:bg-red-600 flex items-center text-sm"
                      >
                        <XCircle className="h-4 w-4 mr-1" /> Annuler
                      </ButtonPrimary>
                    )}
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>

        {/* Pagination */}
        <div className="mt-6 flex flex-col sm:flex-row items-center justify-between gap-4">
          <p className="text-sm text-gray-700 dark:text-gray-300">
            Affichage de {(currentPage - 1) * commandsPerPage + 1} à{' '}
            {Math.min(currentPage * commandsPerPage, totalCommands)} sur {totalCommands} commandes
          </p>
          <div className="flex gap-2">
            <ButtonPrimary
              onClick={handlePrevPage}
              disabled={currentPage === 1}
              className="px-3 py-2 bg-lightCard dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600 disabled:opacity-50 flex items-center"
            >
              <ChevronLeft className="h-5 w-5 mr-1" /> Précédent
            </ButtonPrimary>
            <ButtonPrimary
              onClick={handleNextPage}
              disabled={currentPage === totalPages}
              className="px-3 py-2 bg-lightCard dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600 disabled:opacity-50 flex items-center"
            >
              Suivant <ChevronRight className="h-5 w-5 ml-1" />
            </ButtonPrimary>
          </div>
        </div>

        {/* Modal pour voir les détails */}
        {isDetailsModalOpen && selectedCommand && (
          <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center">
            <div className="bg-lightBg dark:bg-darkBg p-6 rounded-lg shadow-lg w-full max-w-2xl">
              <h2 className="text-xl font-medium text-lightText dark:text-darkText mb-4 flex items-center">
                <Eye className="h-5 w-5 mr-2" /> Détails de la Commande #{selectedCommand.id}
              </h2>
              <div className="space-y-4">
                <div>
                  <p className="text-gray-700 dark:text-gray-300">
                    <strong>Utilisateur :</strong> {selectedCommand.client.username} ({selectedCommand.client.email})
                  </p>
                  <p className="text-gray-700 dark:text-gray-300">
                    <strong>Total :</strong> {selectedCommand.total} FCFA
                  </p>
                  <p className="text-gray-700 dark:text-gray-300">
                    <strong>Statut :</strong> {selectedCommand.statut.charAt(0).toUpperCase() + selectedCommand.statut.slice(1)}
                  </p>
                  <p className="text-gray-700 dark:text-gray-300">
                    <strong>Date :</strong> {new Date(selectedCommand.date).toLocaleString()}
                  </p>
                </div>
                { selectedCommand.adresse && (
                    <div>
                    <h3 className="text-lg font-medium text-lightText dark:text-darkText mb-2">Adresse de livraison</h3>
                    <p className="text-gray-700 dark:text-gray-300">{selectedCommand.adresse.nom}</p>
                    <p className="text-gray-700 dark:text-gray-300">{selectedCommand.adresse.rue}</p>
                    <p className="text-gray-700 dark:text-gray-300">
                      {selectedCommand.adresse.ville}, {selectedCommand.adresse.code_postal}, {selectedCommand.adresse.pays}
                    </p>
                  </div>
                )}
                
                <div className="overflow-x-auto">
                  <h3 className="text-lg font-medium text-lightText dark:text-darkText mb-2">Produits</h3>
                  <table className="w-full text-left text-sm">
                    <thead className="bg-lightCard dark:bg-darkCard">
                      <tr className="border-b border-lightBorder dark:border-darkBorder">
                        <th className="py-3 px-4 text-lightText dark:text-darkText">ID Produit</th>
                        <th className="py-3 px-4 text-lightText dark:text-darkText">Nom</th>
                        <th className="py-3 px-4 text-lightText dark:text-darkText">Quantité</th>
                        <th className="py-3 px-4 text-lightText dark:text-darkText">Prix Unitaire</th>
                      </tr>
                    </thead>
                    <tbody>
                      {selectedCommand.lignes.map((ligne) => (
                        <tr key={ligne.id} className="border-b border-lightBorder dark:border-darkBorder">
                          <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{ligne.produit.id}</td>
                          <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{ligne.produit.nom}</td>
                          <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{ligne.quantite}</td>
                          <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{ligne.prix_unitaire} FCFA</td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              </div>
              <div className="mt-4 flex justify-end">
                <ButtonPrimary
                  onClick={closeDetailsModal}
                  className="px-4 py-2 bg-lightCard dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600"
                >
                  Fermer
                </ButtonPrimary>
              </div>
            </div>
          </div>
        )}

        {/* Modal pour annuler une commande */}
        {isCancelModalOpen && selectedCommand && (
          <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center">
            <div className="bg-lightBg dark:bg-darkBg p-6 rounded-lg shadow-lg w-full max-w-md">
              <h2 className="text-xl font-medium text-lightText dark:text-darkText mb-4 flex items-center">
                <XCircle className="h-5 w-5 mr-2" /> Annuler la Commande
              </h2>
              <p className="text-gray-700 dark:text-gray-300 mb-4">
                Êtes-vous sûr de vouloir annuler la commande #{selectedCommand.id} de{' '}
                <span className="font-medium">{selectedCommand.client.email}</span> ?
              </p>
              <div className="flex gap-2 justify-end">
                <ButtonPrimary
                  type="button"
                  onClick={closeCancelModal}
                  className="px-4 py-2 bg-lightCard dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600"
                >
                  Annuler
                </ButtonPrimary>
                <ButtonPrimary
                  onClick={handleCancelCommand}
                  className="px-4 py-2 bg-red-500 text-white hover:bg-red-600"
                >
                  Confirmer
                </ButtonPrimary>
              </div>
            </div>
          </div>
        )}
      </div>
    </AdminLayout>
  );
};

export default AdminCommandsPage;

--- pages\AdminCommandsPendingPage.tsx ---
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import api from '../services/api';
import AdminLayout from '../components/AdminLayout';
import ButtonPrimary from '../components/ButtonPrimary';
import { ShoppingCart, Search, Eye, XCircle, ChevronLeft, ChevronRight } from 'lucide-react';

interface Commande {
  id: string;
  client: { id: string; username: string; email: string };
  total: string;
  statut: 'en_attente';
  date: string;
  adresse: { nom: string; rue: string; ville: string; code_postal: string; pays: string };
  lignes: { id: string; produit: { id: string; nom: string }; quantite: number; prix_unitaire: string }[];
}

interface ApiResponse {
  results: Commande[];
  count: number;
  next: string | null;
  previous: string | null;
}

const AdminCommandsPendingPage: React.FC = () => {
  const navigate = useNavigate();
  const [commands, setCommands] = useState<Commande[]>([]);
  const [totalCommands, setTotalCommands] = useState(0);
  const [currentPage, setCurrentPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedCommand, setSelectedCommand] = useState<Commande | null>(null);
  const [isDetailsModalOpen, setIsDetailsModalOpen] = useState(false);
  const [isCancelModalOpen, setIsCancelModalOpen] = useState(false);
  const commandsPerPage = 10;

  useEffect(() => {
    fetchPendingCommands();
  }, [currentPage, searchQuery]);

  const fetchPendingCommands = async () => {
    setLoading(true);
    try {
      const response = await api.get<ApiResponse>('/commandes/', {
        params: {
          page: currentPage,
          per_page: commandsPerPage,
          search: searchQuery || undefined,
          statut: 'en_attente',
        },
      });
      setCommands(response.data.results);
      setTotalCommands(response.data.count);
      setTotalPages(Math.ceil(response.data.count / commandsPerPage));
      setLoading(false);
    } catch (err: any) {
      console.error('Erreur lors du chargement des commandes en attente:', err.response?.data);
      setError('Erreur lors du chargement des commandes en attente.');
      setLoading(false);
    }
  };

  const handleSearch = (e: React.ChangeEvent<HTMLInputElement>) => {
    setSearchQuery(e.target.value);
    setCurrentPage(1);
  };

  const handlePrevPage = () => {
    if (currentPage > 1) setCurrentPage(currentPage - 1);
  };

  const handleNextPage = () => {
    if (currentPage < totalPages) setCurrentPage(currentPage + 1);
  };

  const openDetailsModal = (command: Commande) => {
    setSelectedCommand(command);
    setIsDetailsModalOpen(true);
  };

  const closeDetailsModal = () => {
    setIsDetailsModalOpen(false);
    setSelectedCommand(null);
  };

  const openCancelModal = (command: Commande) => {
    setSelectedCommand(command);
    setIsCancelModalOpen(true);
  };

  const closeCancelModal = () => {
    setIsCancelModalOpen(false);
    setSelectedCommand(null);
  };

  const handleCancelCommand = async () => {
    if (!selectedCommand) return;

    try {
      await api.post(`/commandes/${selectedCommand.id}/cancel/`);
      setIsCancelModalOpen(false);
      fetchPendingCommands();
    } catch (err: any) {
      console.error('Erreur lors de l’annulation de la commande:', err.response?.data);
      setError('Erreur lors de l’annulation de la commande.');
    }
  };

  if (loading) {
    return <div className="text-center py-16 text-lightText dark:text-darkText">Chargement...</div>;
  }

  if (error) {
    return <div className="text-center py-16 text-red-500">{error}</div>;
  }

  return (
    <AdminLayout>
      <div className="max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8">
        <h1 className="text-2xl sm:text-3xl font-serif font-medium text-lightText dark:text-darkText mb-4 sm:mb-6 flex items-center">
          <ShoppingCart className="h-6 w-6 mr-2" /> Commandes en Attente
        </h1>

        <div className="mb-6 flex flex-col sm:flex-row gap-4 items-center justify-between">
          <div className="relative w-full sm:w-64">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400" />
            <input
              type="text"
              value={searchQuery}
              onChange={handleSearch}
              placeholder="Rechercher par nom d’utilisateur..."
              className="w-full pl-10 pr-4 py-2 border border-lightBorder dark:border-darkBorder rounded-lg bg-lightBg dark:bg-darkBg text-lightText dark:text-darkText focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
          </div>
        </div>

        <div className="overflow-x-auto">
          <table className="w-full text-left text-sm">
            <thead className="bg-lightCard dark:bg-darkCard">
              <tr className="border-b border-lightBorder dark:border-darkBorder">
                <th className="py-3 px-4 text-lightText dark:text-darkText">ID</th>
                <th className="py-3 px-4 text-lightText dark:text-darkText">Utilisateur</th>
                <th className="py-3 px-4 text-lightText dark:text-darkText">Email</th>
                <th className="py-3 px-4 text-lightText dark:text-darkText">Total</th>
                <th className="py-3 px-4 text-lightText dark:text-darkText">Date</th>
                <th className="py-3 px-4 text-lightText dark:text-darkText">Actions</th>
              </tr>
            </thead>
            <tbody>
              {commands.map((command) => (
                <tr key={command.id} className="border-b border-lightBorder dark:border-darkBorder hover:bg-gray-100 dark:hover:bg-gray-700">
                  <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{command.id}</td>
                  <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{command.client.username}</td>
                  <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{command.client.email}</td>
                  <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{command.total} FCFA</td>
                  <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{new Date(command.date).toLocaleDateString()}</td>
                  <td className="py-3 px-4 flex gap-2">
                    <ButtonPrimary
                      onClick={() => openDetailsModal(command)}
                      className="px-2 py-1 bg-blue-500 text-white hover:bg-blue-600 flex items-center text-sm"
                    >
                      <Eye className="h-4 w-4 mr-1" /> Détails
                    </ButtonPrimary>
                    <ButtonPrimary
                      onClick={() => openCancelModal(command)}
                      className="px-2 py-1 bg-red-500 text-white hover:bg-red-600 flex items-center text-sm"
                    >
                      <XCircle className="h-4 w-4 mr-1" /> Annuler
                    </ButtonPrimary>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>

        <div className="mt-6 flex flex-col sm:flex-row items-center justify-between gap-4">
          <p className="text-sm text-gray-700 dark:text-gray-300">
            Affichage de {(currentPage - 1) * commandsPerPage + 1} à{' '}
            {Math.min(currentPage * commandsPerPage, totalCommands)} sur {totalCommands} commandes en attente
          </p>
          <div className="flex gap-2">
            <ButtonPrimary
              onClick={handlePrevPage}
              disabled={currentPage === 1}
              className="px-3 py-2 bg-lightCard dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600 disabled:opacity-50 flex items-center"
            >
              <ChevronLeft className="h-5 w-5 mr-1" /> Précédent
            </ButtonPrimary>
            <ButtonPrimary
              onClick={handleNextPage}
              disabled={currentPage === totalPages}
              className="px-3 py-2 bg-lightCard dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600 disabled:opacity-50 flex items-center"
            >
              Suivant <ChevronRight className="h-5 w-5 ml-1" />
            </ButtonPrimary>
          </div>
        </div>

        {isDetailsModalOpen && selectedCommand && (
          <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center">
            <div className="bg-lightBg dark:bg-darkBg p-6 rounded-lg shadow-lg w-full max-w-2xl">
              <h2 className="text-xl font-medium text-lightText dark:text-darkText mb-4 flex items-center">
                <Eye className="h-5 w-5 mr-2" /> Détails de la Commande #{selectedCommand.id}
              </h2>
              <div className="space-y-4">
                <div>
                  <p className="text-gray-700 dark:text-gray-300"><strong>Utilisateur :</strong> {selectedCommand.client.username} ({selectedCommand.client.email})</p>
                  <p className="text-gray-700 dark:text-gray-300"><strong>Total :</strong> {selectedCommand.total} FCFA</p>
                  <p className="text-gray-700 dark:text-gray-300"><strong>Date :</strong> {new Date(selectedCommand.date).toLocaleString()}</p>
                </div>
                <div>
                  <h3 className="text-lg font-medium text-lightText dark:text-darkText mb-2">Adresse de livraison</h3>
                  <p className="text-gray-700 dark:text-gray-300">{selectedCommand.adresse.nom}</p>
                  <p className="text-gray-700 dark:text-gray-300">{selectedCommand.adresse.rue}</p>
                  <p className="text-gray-700 dark:text-gray-300">{selectedCommand.adresse.ville}, {selectedCommand.adresse.code_postal}, {selectedCommand.adresse.pays}</p>
                </div>
                <div className="overflow-x-auto">
                  <h3 className="text-lg font-medium text-lightText dark:text-darkText mb-2">Produits</h3>
                  <table className="w-full text-left text-sm">
                    <thead className="bg-lightCard dark:bg-darkCard">
                      <tr className="border-b border-lightBorder dark:border-darkBorder">
                        <th className="py-3 px-4 text-lightText dark:text-darkText">ID Produit</th>
                        <th className="py-3 px-4 text-lightText dark:text-darkText">Nom</th>
                        <th className="py-3 px-4 text-lightText dark:text-darkText">Quantité</th>
                        <th className="py-3 px-4 text-lightText dark:text-darkText">Prix Unitaire</th>
                      </tr>
                    </thead>
                    <tbody>
                      {selectedCommand.lignes.map((ligne) => (
                        <tr key={ligne.id} className="border-b border-lightBorder dark:border-darkBorder">
                          <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{ligne.produit.id}</td>
                          <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{ligne.produit.nom}</td>
                          <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{ligne.quantite}</td>
                          <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{ligne.prix_unitaire} FCFA</td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              </div>
              <div className="mt-4 flex justify-end">
                <ButtonPrimary
                  onClick={closeDetailsModal}
                  className="px-4 py-2 bg-lightCard dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600"
                >
                  Fermer
                </ButtonPrimary>
              </div>
            </div>
          </div>
        )}

        {isCancelModalOpen && selectedCommand && (
          <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center">
            <div className="bg-lightBg dark:bg-darkBg p-6 rounded-lg shadow-lg w-full max-w-md">
              <h2 className="text-xl font-medium text-lightText dark:text-darkText mb-4 flex items-center">
                <XCircle className="h-5 w-5 mr-2" /> Annuler la Commande
              </h2>
              <p className="text-gray-700 dark:text-gray-300 mb-4">
                Êtes-vous sûr de vouloir annuler la commande #{selectedCommand.id} de{' '}
                <span className="font-medium">{selectedCommand.client.email}</span> ?
              </p>
              <div className="flex gap-2 justify-end">
                <ButtonPrimary
                  onClick={closeCancelModal}
                  className="px-4 py-2 bg-lightCard dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600"
                >
                  Annuler
                </ButtonPrimary>
                <ButtonPrimary
                  onClick={handleCancelCommand}
                  className="px-4 py-2 bg-red-500 text-white hover:bg-red-600"
                >
                  Confirmer
                </ButtonPrimary>
              </div>
            </div>
          </div>
        )}
      </div>
    </AdminLayout>
  );
};

export default AdminCommandsPendingPage;

--- pages\AdminCommandsRevenuePage.tsx ---
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import api from '../services/api';
import AdminLayout from '../components/AdminLayout';
import ButtonPrimary from '../components/ButtonPrimary';
import { Bar, Line } from 'react-chartjs-2';
import { Chart as ChartJS, CategoryScale, LinearScale, BarElement, LineElement, PointElement, Title, Tooltip, Legend } from 'chart.js';
import { DollarSign, BarChart2 } from 'lucide-react';

ChartJS.register(CategoryScale, LinearScale, BarElement, LineElement, PointElement, Title, Tooltip, Legend);

interface RevenueData {
  total_revenue: string;
  revenue_by_day: { date: string; total: string }[]; // 'date' reste correct car c’est la clé renvoyée dans la réponse
  revenue_by_status: { statut: string; total: string }[];
}

const AdminCommandsRevenuePage: React.FC = () => {
  const navigate = useNavigate();
  const [revenueData, setRevenueData] = useState<RevenueData | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [daysFilter, setDaysFilter] = useState<number>(7);

  useEffect(() => {
    fetchRevenueData();
  }, [daysFilter]);

  const fetchRevenueData = async () => {
    setLoading(true);
    try {
      const response = await api.get('/commandes/revenue/', { params: { days: daysFilter } });
      setRevenueData(response.data);
      setLoading(false);
    } catch (err: any) {
      console.error('Erreur lors du chargement des données de revenus:', err.response?.data);
      setError('Erreur lors du chargement des données de revenus.');
      setLoading(false);
    }
  };

  const handleFilterChange = (days: number) => {
    setDaysFilter(days);
  };

  const revenueByDayChartData = {
    labels: revenueData ? revenueData.revenue_by_day.map((item) => item.date) : [],
    datasets: [
      {
        label: 'Revenus par jour (FCFA)',
        data: revenueData ? revenueData.revenue_by_day.map((item) => parseFloat(item.total)) : [],
        borderColor: '#4CAF50',
        backgroundColor: 'rgba(76, 175, 80, 0.2)',
        fill: true,
      },
    ],
  };

  const revenueByStatusChartData = {
    labels: revenueData ? revenueData.revenue_by_status.map((item) => item.statut) : [],
    datasets: [
      {
        label: 'Revenus par statut (FCFA)',
        data: revenueData ? revenueData.revenue_by_status.map((item) => parseFloat(item.total)) : [],
        backgroundColor: '#2196F3',
      },
    ],
  };

  const chartOptions = {
    responsive: true,
    maintainAspectRatio: false,
    plugins: { legend: { position: 'top' as const }, title: { display: true, text: '' } },
  };

  if (loading) {
    return <div className="text-center py-16 text-lightText dark:text-darkText">Chargement...</div>;
  }

  if (error) {
    return <div className="text-center py-16 text-red-500">{error}</div>;
  }

  return (
    <AdminLayout>
      <div className="max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8">
        <h1 className="text-2xl sm:text-3xl font-serif font-medium text-lightText dark:text-darkText mb-4 sm:mb-6 flex items-center">
          <DollarSign className="h-6 w-6 mr-2" /> Revenus des Commandes
        </h1>

        <div className="mb-6 flex flex-wrap gap-2">
          <ButtonPrimary
            onClick={() => handleFilterChange(7)}
            className={`px-4 py-2 text-sm sm:text-base ${daysFilter === 7 ? 'bg-blue-500 text-white' : 'bg-lightCard dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600'}`}
          >
            7 jours
          </ButtonPrimary>
          <ButtonPrimary
            onClick={() => handleFilterChange(30)}
            className={`px-4 py-2 text-sm sm:text-base ${daysFilter === 30 ? 'bg-blue-500 text-white' : 'bg-lightCard dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600'}`}
          >
            30 jours
          </ButtonPrimary>
          <ButtonPrimary
            onClick={() => handleFilterChange(90)}
            className={`px-4 py-2 text-sm sm:text-base ${daysFilter === 90 ? 'bg-blue-500 text-white' : 'bg-lightCard dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600'}`}
          >
            90 jours
          </ButtonPrimary>
        </div>

        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 mb-6">
          <div className="bg-lightCard dark:bg-darkCard p-4 rounded-lg shadow-md">
            <h2 className="text-lg font-medium text-lightText dark:text-darkText mb-2 flex items-center">
              <DollarSign className="h-5 w-5 mr-2" /> Total des Revenus
            </h2>
            <p className="text-2xl font-bold text-gray-700 dark:text-gray-300">{revenueData?.total_revenue} FCFA</p>
          </div>
        </div>

        <div className="space-y-6">
          <div className="bg-lightCard dark:bg-darkCard p-4 rounded-lg shadow-md">
            <h2 className="text-lg font-medium text-lightText dark:text-darkText mb-2">Revenus par jour</h2>
            <div className="h-48 sm:h-64">
              <Line
                data={revenueByDayChartData}
                options={{ ...chartOptions, plugins: { ...chartOptions.plugins, title: { text: `Revenus sur ${daysFilter} jours` } } }}
              />
            </div>
          </div>

          <div className="bg-lightCard dark:bg-darkCard p-4 rounded-lg shadow-md">
            <h2 className="text-lg font-medium text-lightText dark:text-darkText mb-2">Revenus par statut</h2>
            <div className="h-48 sm:h-64">
              <Bar
                data={revenueByStatusChartData}
                options={{ ...chartOptions, plugins: { ...chartOptions.plugins, title: { text: 'Répartition par statut' } } }}
              />
            </div>
          </div>
        </div>
      </div>
    </AdminLayout>
  );
};

export default AdminCommandsRevenuePage;

--- pages\AdminCommentairesPage.tsx ---
import React, { useState, useEffect } from 'react';
import api from '../services/api';
import AdminLayout from '../components/AdminLayout';
import ButtonPrimary from '../components/ButtonPrimary';
import { MessageSquare, Search, Edit, ChevronLeft, ChevronRight } from 'lucide-react';

interface Commentaire {
  id: string;
  article: string;
  client: string;
  texte: string;
  date: string;
  parent: string | null;
  is_active: boolean;
}

interface ApiResponse {
  results: Commentaire[];
  count: number;
  next: string | null;
  previous: string | null;
}

const AdminCommentairesPage: React.FC = () => {
  const [commentaires, setCommentaires] = useState<Commentaire[]>([]);
  const [totalCommentaires, setTotalCommentaires] = useState(0);
  const [currentPage, setCurrentPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [searchQuery, setSearchQuery] = useState('');
  const [filterStatus, setFilterStatus] = useState<string>('all');
  const [selectedCommentaire, setSelectedCommentaire] = useState<Commentaire | null>(null);
  const [isEditModalOpen, setIsEditModalOpen] = useState(false);
  const [editCommentaire, setEditCommentaire] = useState({ texte: '', is_active: true });
  const commentairesPerPage = 10;

  useEffect(() => {
    fetchCommentaires();
  }, [currentPage, searchQuery, filterStatus]);

  const fetchCommentaires = async () => {
    setLoading(true);
    try {
      const response = await api.get<ApiResponse>('/commentaires/', {
        params: {
          page: currentPage,
          per_page: commentairesPerPage,
          search: searchQuery || undefined,
          is_active: filterStatus === 'all' ? undefined : filterStatus === 'active',
        },
      });
      setCommentaires(response.data.results);
      setTotalCommentaires(response.data.count);
      setTotalPages(Math.ceil(response.data.count / commentairesPerPage));
      setLoading(false);
    } catch (err: any) {
      setError('Erreur lors du chargement des commentaires.');
      setLoading(false);
    }
  };

  const handleSearch = (e: React.ChangeEvent<HTMLInputElement>) => {
    setSearchQuery(e.target.value);
    setCurrentPage(1);
  };

  const handleFilterStatus = (e: React.ChangeEvent<HTMLSelectElement>) => {
    setFilterStatus(e.target.value);
    setCurrentPage(1);
  };

  const handlePrevPage = () => { if (currentPage > 1) setCurrentPage(currentPage - 1); };
  const handleNextPage = () => { if (currentPage < totalPages) setCurrentPage(currentPage + 1); };

  const openEditModal = (commentaire: Commentaire) => {
    setSelectedCommentaire(commentaire);
    setEditCommentaire({ texte: commentaire.texte, is_active: commentaire.is_active });
    setIsEditModalOpen(true);
  };

  const closeEditModal = () => { setIsEditModalOpen(false); setSelectedCommentaire(null); };

  const handleEditCommentaire = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!selectedCommentaire) return;
    try {
      await api.put(`/commentaires/${selectedCommentaire.id}/`, editCommentaire);
      setIsEditModalOpen(false);
      fetchCommentaires();
    } catch (err: any) {
      setError('Erreur lors de la mise à jour du commentaire.');
    }
  };

  if (loading) return <div className="text-center py-16 text-lightText dark:text-darkText">Chargement...</div>;
  if (error) return <div className="text-center py-16 text-red-500">{error}</div>;

  return (
    <AdminLayout>
      <div className="max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8">
        <h1 className="text-2xl sm:text-3xl font-serif font-medium text-lightText dark:text-darkText mb-6 flex items-center">
          <MessageSquare className="h-6 w-6 mr-2" /> Gestion des Commentaires
        </h1>

        <div className="mb-6 flex flex-col sm:flex-row gap-4 items-center justify-between">
          <div className="flex flex-col sm:flex-row gap-4 w-full sm:w-auto">
            <div className="relative w-full sm:w-64">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400" />
              <input
                type="text"
                value={searchQuery}
                onChange={handleSearch}
                placeholder="Rechercher par texte..."
                className="w-full pl-10 pr-4 py-2 border border-lightBorder dark:border-darkBorder rounded-lg bg-lightBg dark:bg-darkBg text-lightText dark:text-darkText focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
            </div>
            <select
              value={filterStatus}
              onChange={handleFilterStatus}
              className="px-4 py-2 border border-lightBorder dark:border-darkBorder rounded-lg bg-lightBg dark:bg-darkBg text-lightText dark:text-darkText focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              <option value="all">Tous les statuts</option>
              <option value="active">Actifs</option>
              <option value="inactive">Inactifs</option>
            </select>
          </div>
        </div>

        <div className="overflow-x-auto">
          <table className="w-full text-left text-sm">
            <thead className="bg-lightCard dark:bg-darkCard">
              <tr className="border-b border-lightBorder dark:border-darkBorder">
                <th className="py-3 px-4">ID</th>
                <th className="py-3 px-4">Article</th>
                <th className="py-3 px-4">Client</th>
                <th className="py-3 px-4">Texte</th>
                <th className="py-3 px-4">Date</th>
                <th className="py-3 px-4">Statut</th>
                <th className="py-3 px-4">Actions</th>
              </tr>
            </thead>
            <tbody>
              {commentaires.map((commentaire) => (
                <tr key={commentaire.id} className="border-b border-lightBorder dark:border-darkBorder hover:bg-gray-100 dark:hover:bg-gray-700">
                  <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{commentaire.id}</td>
                  <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{commentaire.article}</td>
                  <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{commentaire.client}</td>
                  <td className="py-3 px-4 text-gray-700 dark:text-gray-300 truncate max-w-xs">{commentaire.texte}</td>
                  <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{new Date(commentaire.date).toLocaleDateString()}</td>
                  <td className="py-3 px-4">
                    <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${commentaire.is_active ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200' : 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200'}`}>
                      {commentaire.is_active ? 'Actif' : 'Inactif'}
                    </span>
                  </td>
                  <td className="py-3 px-4">
                    <ButtonPrimary onClick={() => openEditModal(commentaire)} className="px-2 py-1 bg-blue-500 text-white hover:bg-blue-600 flex items-center text-sm">
                      <Edit className="h-4 w-4 mr-1" /> Modifier
                    </ButtonPrimary>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>

        <div className="mt-6 flex flex-col sm:flex-row items-center justify-between gap-4">
          <p className="text-sm text-gray-700 dark:text-gray-300">
            Affichage de {(currentPage - 1) * commentairesPerPage + 1} à {Math.min(currentPage * commentairesPerPage, totalCommentaires)} sur {totalCommentaires} commentaires
          </p>
          <div className="flex gap-2">
            <ButtonPrimary onClick={handlePrevPage} disabled={currentPage === 1} className="px-3 py-2 bg-lightCard dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600 disabled:opacity-50 flex items-center">
              <ChevronLeft className="h-5 w-5 mr-1" /> Précédent
            </ButtonPrimary>
            <ButtonPrimary onClick={handleNextPage} disabled={currentPage === totalPages} className="px-3 py-2 bg-lightCard dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600 disabled:opacity-50 flex items-center">
              Suivant <ChevronRight className="h-5 w-5 ml-1" />
            </ButtonPrimary>
          </div>
        </div>

        {isEditModalOpen && selectedCommentaire && (
          <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center">
            <div className="bg-lightBg dark:bg-darkBg p-6 rounded-lg shadow-lg w-full max-w-md">
              <h2 className="text-xl font-medium text-lightText dark:text-darkText mb-4 flex items-center">
                <Edit className="h-5 w-5 mr-2" /> Modifier le commentaire
              </h2>
              <form onSubmit={handleEditCommentaire} className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-lightText dark:text-darkText mb-1">Texte</label>
                  <textarea value={editCommentaire.texte} onChange={(e) => setEditCommentaire({ ...editCommentaire, texte: e.target.value })} className="w-full px-3 py-2 border border-lightBorder dark:border-darkBorder rounded-lg bg-lightCard dark:bg-darkCard text-lightText dark:text-darkText focus:outline-none focus:ring-2 focus:ring-blue-500" rows={3} required />
                </div>
                <div>
                  <label className="block text-sm font-medium text-lightText dark:text-darkText mb-1">Actif</label>
                  <input type="checkbox" checked={editCommentaire.is_active} onChange={(e) => setEditCommentaire({ ...editCommentaire, is_active: e.target.checked })} className="h-5 w-5 text-blue-500 focus:ring-blue-500 border-lightBorder dark:border-darkBorder rounded" />
                </div>
                <div className="flex gap-2 justify-end">
                  <ButtonPrimary type="button" onClick={closeEditModal} className="px-4 py-2 bg-lightCard dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600">Annuler</ButtonPrimary>
                  <ButtonPrimary type="submit" className="px-4 py-2 bg-blue-500 text-white hover:bg-blue-600">Enregistrer</ButtonPrimary>
                </div>
              </form>
            </div>
          </div>
        )}
      </div>
    </AdminLayout>
  );
};

export default AdminCommentairesPage;

--- pages\AdminDashboardPage.tsx ---
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import ButtonPrimary from '../components/ButtonPrimary';
import axios from 'axios';
import { Bar, Pie, Line } from 'react-chartjs-2';
import { Chart as ChartJS, CategoryScale, LinearScale, BarElement, ArcElement, LineElement, PointElement, Title, Tooltip, Legend } from 'chart.js';
import { Calendar, Users, ShoppingCart, Package, AlertTriangle, DollarSign, BarChart2 } from 'lucide-react';
import AdminLayout from '../components/AdminLayout';

ChartJS.register(CategoryScale, LinearScale, BarElement, ArcElement, LineElement, PointElement, Title, Tooltip, Legend);

interface DashboardData {
  users: {
    total: number;
    active: number;
    banned: number;
    by_role: { [key: string]: number };
    new_last_7_days: number;
  };
  commands: {
    total: number;
    by_status: { [key: string]: number };
    total_revenue: string;
    revenue_last_7_days: string;
  };
  products: {
    total: number;
    active: number;
    low_stock: number;
    by_category: { [key: string]: number };
    low_stock_details: { id: string; nom: string; stock: number }[];
  };
  ateliers: {
    total: number;
    active: number;
    cancelled: number;
    total_participants: number;
  };
  payments: {
    total: number;
    by_type: { [key: string]: number };
    total_amount: string;
  };
  subscriptions: {
    total: number;
    active: number;
    total_revenue: string;
  };
}

const AdminDashboardPage: React.FC = () => {
  const navigate = useNavigate();
  const [data, setData] = useState<DashboardData | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [daysFilter, setDaysFilter] = useState<number>(7);
  const [selectedSection, setSelectedSection] = useState<string>('overview');

  useEffect(() => {
    const fetchDashboard = async () => {
      const token = localStorage.getItem('access_token');
      if (!token) {
        navigate('/auth');
        return;
      }

      try {
        const response = await axios.get(`http://chezflora-api.onrender.com/api/utilisateurs/dashboard/?days=${daysFilter}`, {
          headers: { Authorization: `Bearer ${token}` },
        });
        console.log('Dashboard data:', response.data);
        setData(response.data);
        setLoading(false);
      } catch (err: any) {
        console.error('Erreur lors du chargement:', err.response?.data);
        setError('Erreur lors du chargement du tableau de bord.');
        setLoading(false);
        if (err.response?.status === 401) {
          localStorage.removeItem('access_token');
          navigate('/auth');
        }
      }
    };

    fetchDashboard();
  }, [navigate, daysFilter]);

  const handleFilterChange = (days: number) => {
    setDaysFilter(days);
    setLoading(true);
  };

  const userChartData = {
    labels: ['Total', 'Actifs', 'Bannis', `Nouveaux (${daysFilter} jours)`],
    datasets: [
      {
        label: 'Utilisateurs',
        data: data ? [data.users.total, data.users.active, data.users.banned, data.users.new_last_7_days] : [],
        backgroundColor: ['#4CAF50', '#F44336', '#FF9800', '#2196F3'],
      },
    ],
  };

  const commandStatusChartData = {
    labels: data ? Object.keys(data.commands.by_status) : [],
    datasets: [
      {
        data: data ? Object.values(data.commands.by_status) : [],
        backgroundColor: ['#4CAF50', '#F44336', '#FF9800', '#2196F3', '#9C27B0'],
      },
    ],
  };

  const revenueChartData = {
    labels: [`Total`, `Derniers ${daysFilter} jours`],
    datasets: [
      {
        label: 'Revenus (FCFA)',
        data: data ? [data.commands.total_revenue, data.commands.revenue_last_7_days] : [],
        borderColor: '#4CAF50',
        backgroundColor: 'rgba(76, 175, 80, 0.2)',
        fill: true,
      },
    ],
  };

  const productCategoryChartData = {
    labels: data ? Object.keys(data.products.by_category) : [],
    datasets: [
      {
        label: 'Produits par catégorie',
        data: data ? Object.values(data.products.by_category) : [],
        backgroundColor: '#2196F3',
      },
    ],
  };

  const paymentTypeChartData = {
    labels: data ? Object.keys(data.payments.by_type) : [],
    datasets: [
      {
        data: data ? Object.values(data.payments.by_type) : [],
        backgroundColor: ['#4CAF50', '#FF9800', '#F44336'],
      },
    ],
  };

  const ateliersChartData = {
    labels: ['Total', 'Actifs', 'Annulés', 'Participants'],
    datasets: [
      {
        label: 'Ateliers',
        data: data ? [data.ateliers.total, data.ateliers.active, data.ateliers.cancelled, data.ateliers.total_participants] : [],
        backgroundColor: ['#4CAF50', '#2196F3', '#F44336', '#FF9800'],
      },
    ],
  };

  const chartOptions = {
    responsive: true,
    maintainAspectRatio: false,
    plugins: {
      legend: { position: 'top' as const },
      title: { display: true, text: '' },
    },
  };

  const renderOverview = () => (
    <div className="space-y-6">
      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
        <div className="bg-lightCard dark:bg-darkCard p-4 rounded-lg shadow-md">
          <h2 className="text-lg font-medium text-lightText dark:text-darkText mb-2 flex items-center">
            <Users className="h-5 w-5 mr-2" /> Utilisateurs
          </h2>
          <p className="text-gray-700 dark:text-gray-300 text-sm">Total : {data?.users.total}</p>
          <p className="text-gray-700 dark:text-gray-300 text-sm">Actifs : {data?.users.active}</p>
          <p className="text-gray-700 dark:text-gray-300 text-sm">Bannis : {data?.users.banned}</p>
          <p className="text-gray-700 dark:text-gray-300 text-sm">Nouveaux ({daysFilter} jours) : {data?.users.new_last_7_days}</p>
        </div>
        <div className="bg-lightCard dark:bg-darkCard p-4 rounded-lg shadow-md">
          <h2 className="text-lg font-medium text-lightText dark:text-darkText mb-2 flex items-center">
            <ShoppingCart className="h-5 w-5 mr-2" /> Commandes
          </h2>
          <p className="text-gray-700 dark:text-gray-300 text-sm">Total : {data?.commands.total}</p>
          <p className="text-gray-700 dark:text-gray-300 text-sm">Revenus total : {data?.commands.total_revenue} FCFA</p>
          <p className="text-gray-700 dark:text-gray-300 text-sm">Revenus ({daysFilter} jours) : {data?.commands.revenue_last_7_days} FCFA</p>
        </div>
        <div className="bg-lightCard dark:bg-darkCard p-4 rounded-lg shadow-md">
          <h2 className="text-lg font-medium text-lightText dark:text-darkText mb-2 flex items-center">
            <Package className="h-5 w-5 mr-2" /> Produits
          </h2>
          <p className="text-gray-700 dark:text-gray-300 text-sm">Total : {data?.products.total}</p>
          <p className="text-gray-700 dark:text-gray-300 text-sm">Actifs : {data?.products.active}</p>
          <p className="text-gray-700 dark:text-gray-300 text-sm">Stock faible : {data?.products.low_stock}</p>
        </div>
        <div className="bg-lightCard dark:bg-darkCard p-4 rounded-lg shadow-md">
          <h2 className="text-lg font-medium text-lightText dark:text-darkText mb-2 flex items-center">
            <Calendar className="h-5 w-5 mr-2" /> Ateliers
          </h2>
          <p className="text-gray-700 dark:text-gray-300 text-sm">Total : {data?.ateliers.total}</p>
          <p className="text-gray-700 dark:text-gray-300 text-sm">Actifs : {data?.ateliers.active}</p>
          <p className="text-gray-700 dark:text-gray-300 text-sm">Annulés : {data?.ateliers.cancelled}</p>
          <p className="text-gray-700 dark:text-gray-300 text-sm">Participants : {data?.ateliers.total_participants}</p>
        </div>
      </div>
    </div>
  );

  const renderUsers = () => (
    <div className="space-y-6">
      <div className="bg-lightCard dark:bg-darkCard p-4 rounded-lg shadow-md">
        <h2 className="text-lg font-medium text-lightText dark:text-darkText mb-2">Répartition des utilisateurs</h2>
        <div className="h-48 sm:h-64">
          <Bar data={userChartData} options={{ ...chartOptions, plugins: { ...chartOptions.plugins, title: { text: 'Statistiques Utilisateurs' } } }} />
        </div>
      </div>
      <div className="bg-lightCard dark:bg-darkCard p-4 rounded-lg shadow-md">
        <h2 className="text-lg font-medium text-lightText dark:text-darkText mb-2">Utilisateurs par rôle</h2>
        <ul className="space-y-1 text-sm text-gray-700 dark:text-gray-300">
          {data && Object.entries(data.users.by_role).map(([role, count]) => (
            <li key={role}>
              {role.charAt(0).toUpperCase() + role.slice(1)} : {count}
            </li>
          ))}
        </ul>
      </div>
    </div>
  );

  const renderCommands = () => (
    <div className="space-y-6">
      <div className="bg-lightCard dark:bg-darkCard p-4 rounded-lg shadow-md">
        <h2 className="text-lg font-medium text-lightText dark:text-darkText mb-2">Statut des commandes</h2>
        <div className="h-48 sm:h-64">
          <Pie data={commandStatusChartData} options={{ ...chartOptions, plugins: { ...chartOptions.plugins, title: { text: 'Répartition par statut' } } }} />
        </div>
      </div>
      <div className="bg-lightCard dark:bg-darkCard p-4 rounded-lg shadow-md">
        <h2 className="text-lg font-medium text-lightText dark:text-darkText mb-2">Revenus</h2>
        <div className="h-48 sm:h-64">
          <Line data={revenueChartData} options={{ ...chartOptions, plugins: { ...chartOptions.plugins, title: { text: 'Revenus Commandes' } } }} />
        </div>
      </div>
    </div>
  );

  const renderProducts = () => (
    <div className="space-y-6">
      <div className="bg-lightCard dark:bg-darkCard p-4 rounded-lg shadow-md">
        <h2 className="text-lg font-medium text-lightText dark:text-darkText mb-2">Produits par catégorie</h2>
        <div className="h-48 sm:h-64">
          <Bar
            data={productCategoryChartData}
            options={{ ...chartOptions, plugins: { ...chartOptions.plugins, title: { text: 'Répartition par catégorie' } } }}
          />
        </div>
      </div>
      <div className="bg-lightCard dark:bg-darkCard p-4 rounded-lg shadow-md overflow-x-auto">
        <h2 className="text-lg font-medium text-lightText dark:text-darkText mb-2 flex items-center">
          <AlertTriangle className="h-5 w-5 mr-2" /> Produits en stock faible
        </h2>
        {data && data.products.low_stock_details.length > 0 ? (
          <table className="w-full text-left text-sm">
            <thead>
              <tr className="border-b border-lightBorder dark:border-darkBorder">
                <th className="py-2 text-lightText dark:text-darkText">ID</th>
                <th className="py-2 text-lightText dark:text-darkText">Nom</th>
                <th className="py-2 text-lightText dark:text-darkText">Stock</th>
              </tr>
            </thead>
            <tbody>
              {data.products.low_stock_details.map((product) => (
                <tr key={product.id} className="border-b border-lightBorder dark:border-darkBorder">
                  <td className="py-2 text-gray-700 dark:text-gray-300">{product.id}</td>
                  <td className="py-2 text-gray-700 dark:text-gray-300">{product.nom}</td>
                  <td className="py-2 text-red-600">{product.stock}</td>
                </tr>
              ))}
            </tbody>
          </table>
        ) : (
          <p className="text-gray-700 dark:text-gray-300">Aucun produit en stock faible.</p>
        )}
      </div>
    </div>
  );

  const renderAteliers = () => (
    <div className="space-y-6">
      <div className="bg-lightCard dark:bg-darkCard p-4 rounded-lg shadow-md">
        <h2 className="text-lg font-medium text-lightText dark:text-darkText mb-2">Statistiques des ateliers</h2>
        <div className="h-48 sm:h-64">
          <Bar
            data={ateliersChartData}
            options={{ ...chartOptions, plugins: { ...chartOptions.plugins, title: { text: 'Statistiques Ateliers' } } }}
          />
        </div>
      </div>
    </div>
  );

  const renderPayments = () => (
    <div className="space-y-6">
      <div className="bg-lightCard dark:bg-darkCard p-4 rounded-lg shadow-md">
        <h2 className="text-lg font-medium text-lightText dark:text-darkText mb-2">Types de paiements</h2>
        <div className="h-48 sm:h-64">
          <Pie
            data={paymentTypeChartData}
            options={{ ...chartOptions, plugins: { ...chartOptions.plugins, title: { text: 'Répartition par type' } } }}
          />
        </div>
      </div>
      <div className="bg-lightCard dark:bg-darkCard p-4 rounded-lg shadow-md">
        <h2 className="text-lg font-medium text-lightText dark:text-darkText mb-2 flex items-center">
          <DollarSign className="h-5 w-5 mr-2" /> Résumé des paiements
        </h2>
        <p className="text-gray-700 dark:text-gray-300 text-sm">Total des paiements : {data?.payments.total}</p>
        <p className="text-gray-700 dark:text-gray-300 text-sm">Montant total : {data?.payments.total_amount} FCFA</p>
      </div>
    </div>
  );

  const renderSubscriptions = () => (
    <div className="space-y-6">
      <div className="bg-lightCard dark:bg-darkCard p-4 rounded-lg shadow-md">
        <h2 className="text-lg font-medium text-lightText dark:text-darkText mb-2 flex items-center">
          <BarChart2 className="h-5 w-5 mr-2" /> Abonnements
        </h2>
        <p className="text-gray-700 dark:text-gray-300 text-sm">Total : {data?.subscriptions.total}</p>
        <p className="text-gray-700 dark:text-gray-300 text-sm">Actifs : {data?.subscriptions.active}</p>
        <p className="text-gray-700 dark:text-gray-300 text-sm">Revenus total : {data?.subscriptions.total_revenue} FCFA</p>
      </div>
    </div>
  );

  const renderContent = () => {
    switch (selectedSection) {
      case 'users':
        return renderUsers();
      case 'commands':
        return renderCommands();
      case 'products':
        return renderProducts();
      case 'ateliers':
        return renderAteliers();
      case 'payments':
        return renderPayments();
      case 'subscriptions':
        return renderSubscriptions();
      case 'overview':
      default:
        return renderOverview();
    }
  };

  if (loading) {
    return <div className="text-center py-16 text-lightText dark:text-darkText">Chargement...</div>;
  }

  if (error) {
    return <div className="text-center py-16 text-red-500">{error}</div>;
  }

  return (
    <AdminLayout>
      <div className="max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8">
        <h1 className="text-2xl sm:text-3xl font-serif font-medium text-lightText dark:text-darkText mb-4 sm:mb-6">
          Tableau de bord Admin
        </h1>

        <div className="mb-4 sm:mb-6 flex flex-wrap gap-2">
          <ButtonPrimary
            onClick={() => handleFilterChange(7)}
            className={`px-3 py-1 sm:px-4 sm:py-2 text-sm sm:text-base ${
              daysFilter === 7 ? 'bg-blue-500 text-white' : 'bg-lightCard dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600'
            }`}
          >
            7 jours
          </ButtonPrimary>
          <ButtonPrimary
            onClick={() => handleFilterChange(30)}
            className={`px-3 py-1 sm:px-4 sm:py-2 text-sm sm:text-base ${
              daysFilter === 30 ? 'bg-blue-500 text-white' : 'bg-lightCard dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600'
            }`}
          >
            30 jours
          </ButtonPrimary>
          <ButtonPrimary
            onClick={() => handleFilterChange(90)}
            className={`px-3 py-1 sm:px-4 sm:py-2 text-sm sm:text-base ${
              daysFilter === 90 ? 'bg-blue-500 text-white' : 'bg-lightCard dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600'
            }`}
          >
            90 jours
          </ButtonPrimary>
        </div>

        <div className="mb-4 sm:mb-6 flex flex-wrap gap-2 border-b border-lightBorder dark:border-darkBorder">
          {['overview', 'users', 'commands', 'products', 'ateliers', 'payments', 'subscriptions'].map((section) => (
            <button
              key={section}
              onClick={() => setSelectedSection(section)}
              className={`pb-2 px-2 sm:px-4 text-sm sm:text-base ${
                selectedSection === section
                  ? 'border-b-2 border-blue-500 text-blue-500'
                  : 'text-gray-600 dark:text-gray-300 hover:text-gray-900 dark:hover:text-gray-100'
              }`}
            >
              {section.charAt(0).toUpperCase() + section.slice(1) === 'Overview' ? 'Aperçu' : section.charAt(0).toUpperCase() + section.slice(1)}
            </button>
          ))}
        </div>

        <div className="space-y-6">{renderContent()}</div>
      </div>
    </AdminLayout>
  );
};

export default AdminDashboardPage;

--- pages\AdminDevisPage.tsx ---
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import api from '../services/api';
import AdminLayout from '../components/AdminLayout';
import ButtonPrimary from '../components/ButtonPrimary';
import { FileText, Search, Edit, ChevronLeft, ChevronRight } from 'lucide-react';

interface Devis {
  id: string;
  client: string;
  service: string;
  description: string;
  date_demande: string;
  statut: string;
  prix_propose: string | null;
  date_mise_a_jour: string;
  is_active: boolean;
}

interface ApiResponse {
  results: Devis[];
  count: number;
  next: string | null;
  previous: string | null;
}

const AdminDevisPage: React.FC = () => {
  const navigate = useNavigate();
  const [devis, setDevis] = useState<Devis[]>([]);
  const [totalDevis, setTotalDevis] = useState(0);
  const [currentPage, setCurrentPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [searchQuery, setSearchQuery] = useState('');
  const [filterStatut, setFilterStatut] = useState<string>('all');
  const [selectedDevis, setSelectedDevis] = useState<Devis | null>(null);
  const [isEditModalOpen, setIsEditModalOpen] = useState(false);
  const [editDevis, setEditDevis] = useState({ description: '', prix_propose: '', statut: '', is_active: true });
  const devisPerPage = 10;

  useEffect(() => {
    fetchDevis();
  }, [currentPage, searchQuery, filterStatut]);

  const fetchDevis = async () => {
    setLoading(true);
    try {
      const response = await api.get<ApiResponse>('/devis/', {
        params: {
          page: currentPage,
          per_page: devisPerPage,
          search: searchQuery || undefined,
          statut: filterStatut !== 'all' ? filterStatut : undefined,
        },
      });
      setDevis(response.data.results);
      setTotalDevis(response.data.count);
      setTotalPages(Math.ceil(response.data.count / devisPerPage));
      setLoading(false);
    } catch (err: any) {
      setError('Erreur lors du chargement des devis.');
      setLoading(false);
    }
  };

  const handleSearch = (e: React.ChangeEvent<HTMLInputElement>) => {
    setSearchQuery(e.target.value);
    setCurrentPage(1);
  };

  const handleFilterStatut = (e: React.ChangeEvent<HTMLSelectElement>) => {
    setFilterStatut(e.target.value);
    setCurrentPage(1);
  };

  const handlePrevPage = () => { if (currentPage > 1) setCurrentPage(currentPage - 1); };
  const handleNextPage = () => { if (currentPage < totalPages) setCurrentPage(currentPage + 1); };

  const openEditModal = (devis: Devis) => {
    setSelectedDevis(devis);
    setEditDevis({
      description: devis.description,
      prix_propose: devis.prix_propose || '',
      statut: devis.statut,
      is_active: devis.is_active,
    });
    setIsEditModalOpen(true);
  };

  const closeEditModal = () => { setIsEditModalOpen(false); setSelectedDevis(null); };

  const handleEditDevis = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!selectedDevis) return;
    try {
      await api.put(`/devis/${selectedDevis.id}/`, {
        ...editDevis,
        prix_propose: editDevis.prix_propose ? parseFloat(editDevis.prix_propose).toString() : null,
      });
      setIsEditModalOpen(false);
      fetchDevis();
    } catch (err: any) {
      setError('Erreur lors de la mise à jour du devis.');
    }
  };

  if (loading) return <div className="text-center py-16 text-lightText dark:text-darkText">Chargement...</div>;
  if (error) return <div className="text-center py-16 text-red-500">{error}</div>;

  return (
    <AdminLayout>
      <div className="max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8">
        <h1 className="text-2xl sm:text-3xl font-serif font-medium text-lightText dark:text-darkText mb-6 flex items-center">
          <FileText className="h-6 w-6 mr-2" /> Gestion des Devis
        </h1>

        <div className="mb-6 flex flex-col sm:flex-row gap-4 items-center justify-between">
          <div className="flex flex-col sm:flex-row gap-4 w-full sm:w-auto">
            <div className="relative w-full sm:w-64">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400" />
              <input
                type="text"
                value={searchQuery}
                onChange={handleSearch}
                placeholder="Rechercher par client ou service..."
                className="w-full pl-10 pr-4 py-2 border border-lightBorder dark:border-darkBorder rounded-lg bg-lightBg dark:bg-darkBg text-lightText dark:text-darkText focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
            </div>
            <select
              value={filterStatut}
              onChange={handleFilterStatut}
              className="px-4 py-2 border border-lightBorder dark:border-darkBorder rounded-lg bg-lightBg dark:bg-darkBg text-lightText dark:text-darkText focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              <option value="all">Tous les statuts</option>
              <option value="en_attente">En attente</option>
              <option value="accepte">Accepté</option>
              <option value="refuse">Refusé</option>
            </select>
          </div>
        </div>

        <div className="overflow-x-auto">
          <table className="w-full text-left text-sm">
            <thead className="bg-lightCard dark:bg-darkCard">
              <tr className="border-b border-lightBorder dark:border-darkBorder">
                <th className="py-3 px-4">ID</th>
                <th className="py-3 px-4">Client</th>
                <th className="py-3 px-4">Service</th>
                <th className="py-3 px-4">Date</th>
                <th className="py-3 px-4">Prix proposé (FCFA)</th>
                <th className="py-3 px-4">Statut</th>
                <th className="py-3 px-4">Actif</th>
                <th className="py-3 px-4">Actions</th>
              </tr>
            </thead>
            <tbody>
              {devis.map((devisItem) => (
                <tr key={devisItem.id} className="border-b border-lightBorder dark:border-darkBorder hover:bg-gray-100 dark:hover:bg-gray-700">
                  <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{devisItem.id}</td>
                  <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{devisItem.client}</td>
                  <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{devisItem.service}</td>
                  <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{new Date(devisItem.date_demande).toLocaleString()}</td>
                  <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{devisItem.prix_propose || 'N/A'}</td>
                  <td className="py-3 px-4">
                    <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${devisItem.statut === 'accepte' ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200' : devisItem.statut === 'refuse' ? 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200' : 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200'}`}>
                      {devisItem.statut}
                    </span>
                  </td>
                  <td className="py-3 px-4">
                    <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${devisItem.is_active ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200' : 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200'}`}>
                      {devisItem.is_active ? 'Oui' : 'Non'}
                    </span>
                  </td>
                  <td className="py-3 px-4">
                    <ButtonPrimary onClick={() => openEditModal(devisItem)} className="px-2 py-1 bg-blue-500 text-white hover:bg-blue-600 flex items-center text-sm">
                      <Edit className="h-4 w-4 mr-1" /> Modifier
                    </ButtonPrimary>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>

        <div className="mt-6 flex flex-col sm:flex-row items-center justify-between gap-4">
          <p className="text-sm text-gray-700 dark:text-gray-300">
            Affichage de {(currentPage - 1) * devisPerPage + 1} à {Math.min(currentPage * devisPerPage, totalDevis)} sur {totalDevis} devis
          </p>
          <div className="flex gap-2">
            <ButtonPrimary onClick={handlePrevPage} disabled={currentPage === 1} className="px-3 py-2 bg-lightCard dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600 disabled:opacity-50 flex items-center">
              <ChevronLeft className="h-5 w-5 mr-1" /> Précédent
            </ButtonPrimary>
            <ButtonPrimary onClick={handleNextPage} disabled={currentPage === totalPages} className="px-3 py-2 bg-lightCard dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600 disabled:opacity-50 flex items-center">
              Suivant <ChevronRight className="h-5 w-5 ml-1" />
            </ButtonPrimary>
          </div>
        </div>

        {isEditModalOpen && selectedDevis && (
          <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center">
            <div className="bg-lightBg dark:bg-darkBg p-6 rounded-lg shadow-lg w-full max-w-md">
              <h2 className="text-xl font-medium text-lightText dark:text-darkText mb-4 flex items-center">
                <Edit className="h-5 w-5 mr-2" /> Modifier le devis
              </h2>
              <form onSubmit={handleEditDevis} className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-lightText dark:text-darkText mb-1">Description</label>
                  <textarea value={editDevis.description} onChange={(e) => setEditDevis({ ...editDevis, description: e.target.value })} className="w-full px-3 py-2 border border-lightBorder dark:border-darkBorder rounded-lg bg-lightCard dark:bg-darkCard text-lightText dark:text-darkText focus:outline-none focus:ring-2 focus:ring-blue-500" rows={3} required />
                </div>
                <div>
                  <label className="block text-sm font-medium text-lightText dark:text-darkText mb-1">Prix proposé (FCFA)</label>
                  <input type="number" step="0.01" value={editDevis.prix_propose} onChange={(e) => setEditDevis({ ...editDevis, prix_propose: e.target.value })} className="w-full px-3 py-2 border border-lightBorder dark:border-darkBorder rounded-lg bg-lightCard dark:bg-darkCard text-lightText dark:text-darkText focus:outline-none focus:ring-2 focus:ring-blue-500" />
                </div>
                <div>
                  <label className="block text-sm font-medium text-lightText dark:text-darkText mb-1">Statut</label>
                  <select
                    value={editDevis.statut}
                    onChange={(e) => setEditDevis({ ...editDevis, statut: e.target.value })}
                    className="w-full px-3 py-2 border border-lightBorder dark:border-darkBorder rounded-lg bg-lightCard dark:bg-darkCard text-lightText dark:text-darkText focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="en_attente">En attente</option>
                    <option value="accepte">Accepté</option>
                    <option value="refuse">Refusé</option>
                  </select>
                </div>
                <div>
                  <label className="block text-sm font-medium text-lightText dark:text-darkText mb-1">Actif</label>
                  <input type="checkbox" checked={editDevis.is_active} onChange={(e) => setEditDevis({ ...editDevis, is_active: e.target.checked })} className="h-5 w-5 text-blue-500 focus:ring-blue-500 border-lightBorder dark:border-darkBorder rounded" />
                </div>
                <div className="flex gap-2 justify-end">
                  <ButtonPrimary type="button" onClick={closeEditModal} className="px-4 py-2 bg-lightCard dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600">Annuler</ButtonPrimary>
                  <ButtonPrimary type="submit" className="px-4 py-2 bg-blue-500 text-white hover:bg-blue-600">Enregistrer</ButtonPrimary>
                </div>
              </form>
            </div>
          </div>
        )}
      </div>
    </AdminLayout>
  );
};

export default AdminDevisPage;

--- pages\AdminLowStockPage.tsx ---
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import api from '../services/api';
import AdminLayout from '../components/AdminLayout';
import ButtonPrimary from '../components/ButtonPrimary';
import { AlertTriangle, Search, Edit, ChevronLeft, ChevronRight } from 'lucide-react';

interface LowStockProduct {
  id: string;
  nom: string;
  stock: number;
  categorie__nom: string | null;
}

interface LowStockResponse {
  seuil: number;
  total_low_stock: number;
  products: LowStockProduct[];
}

interface ApiResponse {
  results: LowStockProduct[];
  count: number;
  next: string | null;
  previous: string | null;
}

const AdminLowStockPage: React.FC = () => {
  const navigate = useNavigate();
  const [lowStockData, setLowStockData] = useState<LowStockResponse | null>(null);
  const [products, setProducts] = useState<LowStockProduct[]>([]);
  const [totalProducts, setTotalProducts] = useState(0);
  const [currentPage, setCurrentPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [searchQuery, setSearchQuery] = useState('');
  const [isEditSeuilModalOpen, setIsEditSeuilModalOpen] = useState(false);
  const [newSeuil, setNewSeuil] = useState<string>('');
  const productsPerPage = 10;

  useEffect(() => {
    fetchLowStock();
  }, [currentPage, searchQuery]);

  const fetchLowStock = async () => {
    setLoading(true);
    try {
      const response = await api.get<LowStockResponse>('/produits/low_stock/', {
        params: {
          page: currentPage,
          per_page: productsPerPage,
          search: searchQuery || undefined,
        },
      });
      console.log(response.data)
      setLowStockData(response.data);
      setProducts(response.data.products);
      setTotalProducts(response.data.total_low_stock);
      setTotalPages(Math.ceil(response.data.total_low_stock / productsPerPage));
      setNewSeuil(response.data.seuil.toString());
      setLoading(false);
    } catch (err: any) {
      console.error('Erreur lors du chargement des produits en stock faible:', err.response?.data);
      setError('Erreur lors du chargement des produits en stock faible.');
      setLoading(false);
    }
  };

  const handleSearch = (e: React.ChangeEvent<HTMLInputElement>) => {
    setSearchQuery(e.target.value);
    setCurrentPage(1);
  };

  const handlePrevPage = () => {
    if (currentPage > 1) setCurrentPage(currentPage - 1);
  };

  const handleNextPage = () => {
    if (currentPage < totalPages) setCurrentPage(currentPage + 1);
  };

  const openEditSeuilModal = () => {
    setIsEditSeuilModalOpen(true);
  };

  const closeEditSeuilModal = () => {
    setIsEditSeuilModalOpen(false);
  };

  const handleEditSeuil = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      const seuilParam = await api.get('/parametres/', { params: { cle: 'SEUIL_STOCK_FAIBLE' } });
      const paramId = seuilParam.data[0]?.id;
      if (paramId) {
        await api.put(`/parametres/${paramId}/`, {
          cle: 'SEUIL_STOCK_FAIBLE',
          valeur: newSeuil,
          description: 'Seuil pour alerter sur un stock faible',
        });
      } else {
        await api.post('/parametres/', {
          cle: 'SEUIL_STOCK_FAIBLE',
          valeur: newSeuil,
          description: 'Seuil pour alerter sur un stock faible',
        });
      }
      setIsEditSeuilModalOpen(false);
      fetchLowStock();
    } catch (err: any) {
      console.error('Erreur lors de la mise à jour du seuil:', err.response?.data);
      setError('Erreur lors de la mise à jour du seuil.');
    }
  };

  if (loading) {
    return <div className="text-center py-16 text-lightText dark:text-darkText">Chargement...</div>;
  }

  if (error) {
    return <div className="text-center py-16 text-red-500">{error}</div>;
  }

  return (
    <AdminLayout>
      <div className="max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8">
        <h1 className="text-2xl sm:text-3xl font-serif font-medium text-lightText dark:text-darkText mb-4 sm:mb-6 flex items-center">
          <AlertTriangle className="h-6 w-6 mr-2" /> Produits en Stock Faible
        </h1>

        {/* Seuil et Recherche */}
        <div className="mb-6 flex flex-col sm:flex-row gap-4 items-center justify-between">
          <div className="flex flex-col sm:flex-row gap-4 w-full sm:w-auto">
            <div className="relative w-full sm:w-64">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400" />
              <input
                type="text"
                value={searchQuery}
                onChange={handleSearch}
                placeholder="Rechercher par nom..."
                className="w-full pl-10 pr-4 py-2 border border-lightBorder dark:border-darkBorder rounded-lg bg-lightBg dark:bg-darkBg text-lightText dark:text-darkText focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
            </div>
          </div>
          <div className="flex items-center gap-4">
            <span className="text-sm text-gray-700 dark:text-gray-300">
              Seuil actuel : <strong>{lowStockData?.seuil}</strong> unités
            </span>
            <ButtonPrimary
              onClick={openEditSeuilModal}
              className="px-4 py-2 bg-blue-500 text-white hover:bg-blue-600 flex items-center"
            >
              <Edit className="h-5 w-5 mr-2" /> Modifier le seuil
            </ButtonPrimary>
          </div>
        </div>

        {/* Statistiques */}
        <div className="mb-6">
          <div className="bg-lightCard dark:bg-darkCard p-4 rounded-lg shadow-md">
            <h2 className="text-lg font-medium text-lightText dark:text-darkText mb-2 flex items-center">
              <AlertTriangle className="h-5 w-5 mr-2" /> Total Produits en Stock Faible
            </h2>
            <p className="text-2xl font-bold text-gray-700 dark:text-gray-300">{lowStockData?.total_low_stock}</p>
          </div>
        </div>

        {/* Liste des produits */}
        <div className="overflow-x-auto">
          <table className="w-full text-left text-sm">
            <thead className="bg-lightCard dark:bg-darkCard">
              <tr className="border-b border-lightBorder dark:border-darkBorder">
                <th className="py-3 px-4 text-lightText dark:text-darkText">ID</th>
                <th className="py-3 px-4 text-lightText dark:text-darkText">Nom</th>
                <th className="py-3 px-4 text-lightText dark:text-darkText">Stock</th>
                <th className="py-3 px-4 text-lightText dark:text-darkText">Catégorie</th>
              </tr>
            </thead>
            <tbody>
              {products.map((product) => (
                <tr key={product.id} className="border-b border-lightBorder dark:border-darkBorder hover:bg-gray-100 dark:hover:bg-gray-700">
                  <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{product.id}</td>
                  <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{product.nom}</td>
                  <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{product.stock}</td>
                  <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{product.categorie__nom || 'Sans catégorie'}</td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>

        {/* Pagination */}
        <div className="mt-6 flex flex-col sm:flex-row items-center justify-between gap-4">
          <p className="text-sm text-gray-700 dark:text-gray-300">
            Affichage de {(currentPage - 1) * productsPerPage + 1} à{' '}
            {Math.min(currentPage * productsPerPage, totalProducts)} sur {totalProducts} produits
          </p>
          <div className="flex gap-2">
            <ButtonPrimary
              onClick={handlePrevPage}
              disabled={currentPage === 1}
              className="px-3 py-2 bg-lightCard dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600 disabled:opacity-50 flex items-center"
            >
              <ChevronLeft className="h-5 w-5 mr-1" /> Précédent
            </ButtonPrimary>
            <ButtonPrimary
              onClick={handleNextPage}
              disabled={currentPage === totalPages}
              className="px-3 py-2 bg-lightCard dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600 disabled:opacity-50 flex items-center"
            >
              Suivant <ChevronRight className="h-5 w-5 ml-1" />
            </ButtonPrimary>
          </div>
        </div>

        {/* Modal pour modifier le seuil */}
        {isEditSeuilModalOpen && (
          <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center">
            <div className="bg-lightBg dark:bg-darkBg p-6 rounded-lg shadow-lg w-full max-w-md">
              <h2 className="text-xl font-medium text-lightText dark:text-darkText mb-4 flex items-center">
                <Edit className="h-5 w-5 mr-2" /> Modifier le seuil d’alerte
              </h2>
              <form onSubmit={handleEditSeuil} className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-lightText dark:text-darkText mb-1">Nouveau seuil</label>
                  <input
                    type="number"
                    value={newSeuil}
                    onChange={(e) => setNewSeuil(e.target.value)}
                    className="w-full px-3 py-2 border border-lightBorder dark:border-darkBorder rounded-lg bg-lightCard dark:bg-darkCard text-lightText dark:text-darkText focus:outline-none focus:ring-2 focus:ring-blue-500"
                    required
                    min="1"
                  />
                </div>
                <div className="flex gap-2 justify-end">
                  <ButtonPrimary
                    type="button"
                    onClick={closeEditSeuilModal}
                    className="px-4 py-2 bg-lightCard dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600"
                  >
                    Annuler
                  </ButtonPrimary>
                  <ButtonPrimary type="submit" className="px-4 py-2 bg-blue-500 text-white hover:bg-blue-600">
                    Enregistrer
                  </ButtonPrimary>
                </div>
              </form>
            </div>
          </div>
        )}
      </div>
    </AdminLayout>
  );
};

export default AdminLowStockPage;

--- pages\AdminParametresPage.tsx ---
import React, { useState, useEffect } from 'react';
import api from '../services/api';
import AdminLayout from '../components/AdminLayout';
import ButtonPrimary from '../components/ButtonPrimary';
import { Settings, Search, Edit, ChevronLeft, ChevronRight } from 'lucide-react';

interface Parametre {
  id: number;
  cle: string;
  valeur: string;
  description: string | null;
  date_mise_a_jour: string;
}

interface ApiResponse {
  results: Parametre[];
  count: number;
  next: string | null;
  previous: string | null;
}

const AdminParametresPage: React.FC = () => {
  const [parametres, setParametres] = useState<Parametre[]>([]);
  const [totalParametres, setTotalParametres] = useState(0);
  const [currentPage, setCurrentPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedParametre, setSelectedParametre] = useState<Parametre | null>(null);
  const [isEditModalOpen, setIsEditModalOpen] = useState(false);
  const [editParametre, setEditParametre] = useState({ cle: '', valeur: '', description: '' });
  const parametresPerPage = 10;

  useEffect(() => {
    fetchParametres();
  }, [currentPage, searchQuery]);

  const fetchParametres = async () => {
    setLoading(true);
    try {
      const response = await api.get<ApiResponse>('/parametres/', {
        params: { page: currentPage, per_page: parametresPerPage, search: searchQuery || undefined },
      });
      setParametres(response.data.results);
      setTotalParametres(response.data.count);
      setTotalPages(Math.ceil(response.data.count / parametresPerPage));
      setLoading(false);
    } catch (err: any) {
      setError('Erreur lors du chargement des paramètres.');
      setLoading(false);
    }
  };

  const handleSearch = (e: React.ChangeEvent<HTMLInputElement>) => {
    setSearchQuery(e.target.value);
    setCurrentPage(1);
  };

  const handlePrevPage = () => { if (currentPage > 1) setCurrentPage(currentPage - 1); };
  const handleNextPage = () => { if (currentPage < totalPages) setCurrentPage(currentPage + 1); };

  const openEditModal = (parametre: Parametre) => {
    setSelectedParametre(parametre);
    setEditParametre({ cle: parametre.cle, valeur: parametre.valeur, description: parametre.description || '' });
    setIsEditModalOpen(true);
  };

  const closeEditModal = () => {
    setIsEditModalOpen(false);
    setSelectedParametre(null);
  };

  const handleEditParametre = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!selectedParametre) return;
    try {
      await api.put(`/parametres/${selectedParametre.id}/`, editParametre);
      setIsEditModalOpen(false);
      fetchParametres();
    } catch (err: any) {
      setError('Erreur lors de la mise à jour du paramètre.');
    }
  };

  const otpParametres = parametres.filter(p => p.cle.startsWith('otp_'));
  const otherParametres = parametres.filter(p => !p.cle.startsWith('otp_'));

  if (loading) return <div className="text-center py-16 text-lightText dark:text-darkText">Chargement...</div>;
  if (error) return <div className="text-center py-16 text-red-500">{error}</div>;

  return (
    <AdminLayout>
      <div className="max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8">
        <h1 className="text-2xl sm:text-3xl font-serif font-medium text-lightText dark:text-darkText mb-6 flex items-center">
          <Settings className="h-6 w-6 mr-2" /> Gestion des Paramètres
        </h1>

        <div className="mb-6 flex flex-col sm:flex-row gap-4 items-center justify-between">
          <div className="relative w-full sm:w-64">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400" />
            <input
              type="text"
              value={searchQuery}
              onChange={handleSearch}
              placeholder="Rechercher par clé ou valeur..."
              className="w-full pl-10 pr-4 py-2 border border-lightBorder dark:border-darkBorder rounded-lg bg-lightBg dark:bg-darkBg text-lightText dark:text-darkText focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
          </div>
        </div>

        {/* Section Paramètres OTP */}
        <div className="mb-8">
          <h2 className="text-xl font-medium text-lightText dark:text-darkText mb-4">Paramètres OTP</h2>
          <div className="overflow-x-auto">
            <table className="w-full text-left text-sm">
              <thead className="bg-lightCard dark:bg-darkCard">
                <tr className="border-b border-lightBorder dark:border-darkBorder">
                  <th className="py-3 px-4">ID</th>
                  <th className="py-3 px-4">Clé</th>
                  <th className="py-3 px-4">Valeur</th>
                  <th className="py-3 px-4">Description</th>
                  <th className="py-3 px-4">Dernière mise à jour</th>
                  <th className="py-3 px-4">Actions</th>
                </tr>
              </thead>
              <tbody>
                {otpParametres.length > 0 ? (
                  otpParametres.map((parametre) => (
                    <tr key={parametre.id} className="border-b border-lightBorder dark:border-darkBorder hover:bg-gray-100 dark:hover:bg-gray-700">
                      <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{parametre.id}</td>
                      <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{parametre.cle}</td>
                      <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{parametre.valeur}</td>
                      <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{parametre.description || 'N/A'}</td>
                      <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{new Date(parametre.date_mise_a_jour).toLocaleString()}</td>
                      <td className="py-3 px-4">
                        <ButtonPrimary
                          onClick={() => openEditModal(parametre)}
                          className="px-2 py-1 bg-blue-500 text-white hover:bg-blue-600 flex items-center text-sm"
                        >
                          <Edit className="h-4 w-4 mr-1" /> Modifier
                        </ButtonPrimary>
                      </td>
                    </tr>
                  ))
                ) : (
                  <tr>
                    <td colSpan={6} className="py-3 px-4 text-center text-gray-500 dark:text-gray-400">
                      Aucun paramètre OTP trouvé.
                    </td>
                  </tr>
                )}
              </tbody>
            </table>
          </div>
        </div>

        {/* Section Autres Paramètres */}
        <div className="mb-8">
          <h2 className="text-xl font-medium text-lightText dark:text-darkText mb-4">Autres Paramètres</h2>
          <div className="overflow-x-auto">
            <table className="w-full text-left text-sm">
              <thead className="bg-lightCard dark:bg-darkCard">
                <tr className="border-b border-lightBorder dark:border-darkBorder">
                  <th className="py-3 px-4">ID</th>
                  <th className="py-3 px-4">Clé</th>
                  <th className="py-3 px-4">Valeur</th>
                  <th className="py-3 px-4">Description</th>
                  <th className="py-3 px-4">Dernière mise à jour</th>
                  <th className="py-3 px-4">Actions</th>
                </tr>
              </thead>
              <tbody>
                {otherParametres.map((parametre) => (
                  <tr key={parametre.id} className="border-b border-lightBorder dark:border-darkBorder hover:bg-gray-100 dark:hover:bg-gray-700">
                    <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{parametre.id}</td>
                    <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{parametre.cle}</td>
                    <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{parametre.valeur}</td>
                    <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{parametre.description || 'N/A'}</td>
                    <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{new Date(parametre.date_mise_a_jour).toLocaleString()}</td>
                    <td className="py-3 px-4">
                      <ButtonPrimary
                        onClick={() => openEditModal(parametre)}
                        className="px-2 py-1 bg-blue-500 text-white hover:bg-blue-600 flex items-center text-sm"
                      >
                        <Edit className="h-4 w-4 mr-1" /> Modifier
                      </ButtonPrimary>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>

        <div className="mt-6 flex flex-col sm:flex-row items-center justify-between gap-4">
          <p className="text-sm text-gray-700 dark:text-gray-300">
            Affichage de {(currentPage - 1) * parametresPerPage + 1} à {Math.min(currentPage * parametresPerPage, totalParametres)} sur {totalParametres} paramètres
          </p>
          <div className="flex gap-2">
            <ButtonPrimary
              onClick={handlePrevPage}
              disabled={currentPage === 1}
              className="px-3 py-2 bg-lightCard dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600 disabled:opacity-50 flex items-center"
            >
              <ChevronLeft className="h-5 w-5 mr-1" /> Précédent
            </ButtonPrimary>
            <ButtonPrimary
              onClick={handleNextPage}
              disabled={currentPage === totalPages}
              className="px-3 py-2 bg-lightCard dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600 disabled:opacity-50 flex items-center"
            >
              Suivant <ChevronRight className="h-5 w-5 ml-1" />
            </ButtonPrimary>
          </div>
        </div>

        {isEditModalOpen && selectedParametre && (
          <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center">
            <div className="bg-lightBg dark:bg-darkBg p-6 rounded-lg shadow-lg w-full max-w-md">
              <h2 className="text-xl font-medium text-lightText dark:text-darkText mb-4 flex items-center">
                <Edit className="h-5 w-5 mr-2" /> Modifier le paramètre
              </h2>
              <form onSubmit={handleEditParametre} className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-lightText dark:text-darkText mb-1">Clé</label>
                  <input
                    type="text"
                    value={editParametre.cle}
                    onChange={(e) => setEditParametre({ ...editParametre, cle: e.target.value })}
                    className="w-full px-3 py-2 border border-lightBorder dark:border-darkBorder rounded-lg bg-lightCard dark:bg-darkCard text-lightText dark:text-darkText focus:outline-none focus:ring-2 focus:ring-blue-500"
                    disabled
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-lightText dark:text-darkText mb-1">Valeur</label>
                  <input
                    type={editParametre.cle === 'otp_length' || editParametre.cle === 'otp_validity_minutes' ? 'number' : 'text'}
                    value={editParametre.valeur}
                    onChange={(e) => setEditParametre({ ...editParametre, valeur: e.target.value })}
                    className="w-full px-3 py-2 border border-lightBorder dark:border-darkBorder rounded-lg bg-lightCard dark:bg-darkCard text-lightText dark:text-darkText focus:outline-none focus:ring-2 focus:ring-blue-500"
                    required
                    min={editParametre.cle === 'otp_length' ? 4 : editParametre.cle === 'otp_validity_minutes' ? 1 : undefined}
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-lightText dark:text-darkText mb-1">Description</label>
                  <textarea
                    value={editParametre.description}
                    onChange={(e) => setEditParametre({ ...editParametre, description: e.target.value })}
                    className="w-full px-3 py-2 border border-lightBorder dark:border-darkBorder rounded-lg bg-lightCard dark:bg-darkCard text-lightText dark:text-darkText focus:outline-none focus:ring-2 focus:ring-blue-500"
                    rows={3}
                  />
                </div>
                <div className="flex gap-2 justify-end">
                  <ButtonPrimary
                    type="button"
                    onClick={closeEditModal}
                    className="px-4 py-2 bg-lightCard dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600"
                  >
                    Annuler
                  </ButtonPrimary>
                  <ButtonPrimary
                    type="submit"
                    className="px-4 py-2 bg-blue-500 text-white hover:bg-blue-600"
                  >
                    Enregistrer
                  </ButtonPrimary>
                </div>
              </form>
            </div>
          </div>
        )}
      </div>
    </AdminLayout>
  );
};

export default AdminParametresPage;

--- pages\AdminPayementsPage.tsx ---
import React, { useState, useEffect } from 'react';
import api from '../services/api';
import AdminLayout from '../components/AdminLayout';
import ButtonPrimary from '../components/ButtonPrimary';
import { DollarSign, Search, Edit, Trash2, ChevronLeft, ChevronRight, BarChart2 } from 'lucide-react';
import { Bar, Line } from 'react-chartjs-2';
import { Chart as ChartJS, CategoryScale, LinearScale, BarElement, LineElement, PointElement, Title, Tooltip, Legend } from 'chart.js';

ChartJS.register(CategoryScale, LinearScale, BarElement, LineElement, PointElement, Title, Tooltip, Legend);

interface Paiement {
  id: string;
  type_transaction: string;
  methode_paiement: string;
  montant: string;
  statut: string;
  date: string;
}

interface Stats {
  global: {
    total_paiements: number;
    total_montant: string;
    avg_montant: string;
    max_montant: string;
    min_montant: string;
    success_rate: number;
    avg_delay_days: number;
  };
  last_30_days: {
    total_paiements: number;
    total_montant: string;
    by_day: { date: string; count: number; total: string }[];
  };
  by_month_last_year: { month: string; count: number; total: string }[];
  by_year: { year: string; count: number; total: string }[];
  by_type_transaction: { type: string; count: number; total: string }[];
  by_status: { status: string; count: number; total: string }[];
  by_method: { method: string; count: number; total: string }[];
  top_clients: { client: string; total: string }[];
}

interface ApiResponse {
  results: Paiement[];
  count: number;
  next: string | null;
  previous: string | null;
}

const AdminPaiementsPage: React.FC = () => {
  const [paiements, setPaiements] = useState<Paiement[]>([]);
  const [stats, setStats] = useState<Stats | null>(null);
  const [totalPaiements, setTotalPaiements] = useState(0);
  const [currentPage, setCurrentPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [searchQuery, setSearchQuery] = useState('');
  const paiementsPerPage = 10;

  useEffect(() => {
    fetchPaiements();
    fetchStats();
  }, [currentPage, searchQuery]);

  const fetchPaiements = async () => {
    setLoading(true);
    try {
      const response = await api.get<ApiResponse>('/paiements/', {
        params: { page: currentPage, per_page: paiementsPerPage, search: searchQuery || undefined },
      });
      setPaiements(response.data.results);
      setTotalPaiements(response.data.count);
      setTotalPages(Math.ceil(response.data.count / paiementsPerPage));
      setLoading(false);
    } catch (err: any) {
      setError('Erreur lors du chargement des paiements.');
      setLoading(false);
    }
  };

  const fetchStats = async () => {
    try {
      const response = await api.get<Stats>('/paiements/stats/', { params: { days: 30 } });
      setStats(response.data);
    } catch (err: any) {
      setError('Erreur lors du chargement des statistiques.');
    }
  };

  const handleSearch = (e: React.ChangeEvent<HTMLInputElement>) => {
    setSearchQuery(e.target.value);
    setCurrentPage(1);
  };

  const handlePrevPage = () => { if (currentPage > 1) setCurrentPage(currentPage - 1); };
  const handleNextPage = () => { if (currentPage < totalPages) setCurrentPage(currentPage + 1); };

  const renderChart = (title: string, labels: string[], data: number[], type: 'bar' | 'line' = 'bar') => {
    const chartData = {
      labels,
      datasets: [{
        label: title,
        data,
        backgroundColor: type === 'bar' ? 'rgba(54, 162, 235, 0.6)' : undefined,
        borderColor: 'rgba(54, 162, 235, 1)',
        borderWidth: 2,
        fill: false,
      }],
    };
    const options = {
      responsive: true,
      plugins: { legend: { position: 'top' as const }, title: { display: true, text: title } },
    };
    return type === 'bar' ? <Bar data={chartData} options={options} /> : <Line data={chartData} options={options} />;
  };

  if (loading) return <div className="text-center py-16 text-lightText dark:text-darkText">Chargement...</div>;
  if (error) return <div className="text-center py-16 text-red-500">{error}</div>;

  return (
    <AdminLayout>
      <div className="max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8">
        <h1 className="text-2xl sm:text-3xl font-serif font-medium text-lightText dark:text-darkText mb-6 flex items-center">
          <DollarSign className="h-6 w-6 mr-2" /> Gestion des Paiements
        </h1>

        {/* Statistiques */}
        {stats && (
          <div className="mb-8 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            <div className="bg-lightCard dark:bg-darkCard p-4 rounded-lg shadow">
              <h2 className="text-lg font-medium text-lightText dark:text-darkText mb-2 flex items-center">
                <BarChart2 className="h-5 w-5 mr-2" /> Statistiques Globales
              </h2>
              <p>Total Paiements: {stats.global.total_paiements}</p>
              <p>Total Montant: {stats.global.total_montant} FCFA</p>
              <p>Montant Moyen: {stats.global.avg_montant} FCFA</p>
              <p>Montant Max: {stats.global.max_montant} FCFA</p>
              <p>Montant Min: {stats.global.min_montant} FCFA</p>
              <p>Taux de Réussite: {stats.global.success_rate}%</p>
              <p>Délai Moyen: {stats.global.avg_delay_days} jours</p>
            </div>
            <div className="bg-lightCard dark:bg-darkCard p-4 rounded-lg shadow">
              {renderChart(
                'Paiements par Jour (30 derniers jours)',
                stats.last_30_days.by_day.map(item => item.date),
                stats.last_30_days.by_day.map(item => item.count),
                'line'
              )}
            </div>
            <div className="bg-lightCard dark:bg-darkCard p-4 rounded-lg shadow">
              {renderChart(
                'Montant par Type de Transaction',
                stats.by_type_transaction.map(item => item.type),
                stats.by_type_transaction.map(item => parseFloat(item.total))
              )}
            </div>
            <div className="bg-lightCard dark:bg-darkCard p-4 rounded-lg shadow">
              {renderChart(
                'Montant par Statut',
                stats.by_status.map(item => item.status),
                stats.by_status.map(item => parseFloat(item.total))
              )}
            </div>
            <div className="bg-lightCard dark:bg-darkCard p-4 rounded-lg shadow">
              {renderChart(
                'Montant par Méthode',
                stats.by_method.map(item => item.method),
                stats.by_method.map(item => parseFloat(item.total))
              )}
            </div>
            <div className="bg-lightCard dark:bg-darkCard p-4 rounded-lg shadow">
              {renderChart(
                'Top 5 Clients par Montant',
                stats.top_clients.map(item => item.client),
                stats.top_clients.map(item => parseFloat(item.total))
              )}
            </div>
          </div>
        )}

        {/* Liste des paiements */}
        <div className="mb-6 flex flex-col sm:flex-row gap-4 items-center justify-between">
          <div className="relative w-full sm:w-64">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400" />
            <input
              type="text"
              value={searchQuery}
              onChange={handleSearch}
              placeholder="Rechercher par type ou méthode..."
              className="w-full pl-10 pr-4 py-2 border border-lightBorder dark:border-darkBorder rounded-lg bg-lightBg dark:bg-darkBg text-lightText dark:text-darkText focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
          </div>
        </div>

        <div className="overflow-x-auto">
          <table className="w-full text-left text-sm">
            <thead className="bg-lightCard dark:bg-darkCard">
              <tr className="border-b border-lightBorder dark:border-darkBorder">
                <th className="py-3 px-4">ID</th>
                <th className="py-3 px-4">Type</th>
                <th className="py-3 px-4">Méthode</th>
                <th className="py-3 px-4">Montant</th>
                <th className="py-3 px-4">Statut</th>
                <th className="py-3 px-4">Date</th>
                <th className="py-3 px-4">Actions</th>
              </tr>
            </thead>
            <tbody>
              {paiements.map((paiement) => (
                <tr key={paiement.id} className="border-b border-lightBorder dark:border-darkBorder hover:bg-gray-100 dark:hover:bg-gray-700">
                  <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{paiement.id}</td>
                  <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{paiement.type_transaction}</td>
                  <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{paiement.methode_paiement || 'N/A'}</td>
                  <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{paiement.montant} FCFA</td>
                  <td className="py-3 px-4">
                    <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${paiement.statut === 'effectue' ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200' : paiement.statut === 'rembourse' ? 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200' : 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200'}`}>
                      {paiement.statut}
                    </span>
                  </td>
                  <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{new Date(paiement.date).toLocaleDateString()}</td>
                  <td className="py-3 px-4 flex gap-2">
                    {paiement.statut === 'simule' && (
                      <ButtonPrimary onClick={() => api.post(`/paiements/${paiement.id}/simuler/`).then(fetchPaiements)} className="px-2 py-1 bg-blue-500 text-white hover:bg-blue-600 flex items-center text-sm">
                        <Edit className="h-4 w-4 mr-1" /> Simuler
                      </ButtonPrimary>
                    )}
                    {['simule', 'effectue'].includes(paiement.statut) && (
                      <ButtonPrimary onClick={() => api.post(`/paiements/${paiement.id}/rembourser/`).then(fetchPaiements)} className="px-2 py-1 bg-red-500 text-white hover:bg-red-600 flex items-center text-sm">
                        <Trash2 className="h-4 w-4 mr-1" /> Rembourser
                      </ButtonPrimary>
                    )}
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>

        <div className="mt-6 flex flex-col sm:flex-row items-center justify-between gap-4">
          <p className="text-sm text-gray-700 dark:text-gray-300">
            Affichage de {(currentPage - 1) * paiementsPerPage + 1} à {Math.min(currentPage * paiementsPerPage, totalPaiements)} sur {totalPaiements} paiements
          </p>
          <div className="flex gap-2">
            <ButtonPrimary onClick={handlePrevPage} disabled={currentPage === 1} className="px-3 py-2 bg-lightCard dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600 disabled:opacity-50 flex items-center">
              <ChevronLeft className="h-5 w-5 mr-1" /> Précédent
            </ButtonPrimary>
            <ButtonPrimary onClick={handleNextPage} disabled={currentPage === totalPages} className="px-3 py-2 bg-lightCard dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600 disabled:opacity-50 flex items-center">
              Suivant <ChevronRight className="h-5 w-5 ml-1" />
            </ButtonPrimary>
          </div>
        </div>
      </div>
    </AdminLayout>
  );
};

export default AdminPaiementsPage;

--- pages\AdminProductsPage.tsx ---
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import api from '../services/api';
import AdminLayout from '../components/AdminLayout';
import ButtonPrimary from '../components/ButtonPrimary';
import { Package, Search, Filter, Edit, Trash2, PlusCircle, Eye, ChevronLeft, ChevronRight, X } from 'lucide-react';

interface Photo {
  id: string;
  image: string; // URL de l'image
  uploaded_at: string;
}

interface Product {
  id: string;
  nom: string;
  prix: string;
  stock: number;
  is_active: boolean;
  categorie: { id: string; nom: string } | null;
  description: string;
  promotions: { id: string; nom: string }[];
  photos: Photo[];
}

interface ApiResponse {
  results: Product[];
  count: number;
  next: string | null;
  previous: string | null;
}

interface Category {
  id: string;
  nom: string;
}

interface Promotion {
  id: string;
  nom: string;
}

const AdminProductsPage: React.FC = () => {
  const navigate = useNavigate();
  const [products, setProducts] = useState<Product[]>([]);
  const [totalProducts, setTotalProducts] = useState(0);
  const [currentPage, setCurrentPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [searchQuery, setSearchQuery] = useState('');
  const [filterStatus, setFilterStatus] = useState<string>('all');
  const [categories, setCategories] = useState<Category[]>([]);
  const [promotions, setPromotions] = useState<Promotion[]>([]);
  const [selectedProduct, setSelectedProduct] = useState<Product | null>(null);
  const [isAddModalOpen, setIsAddModalOpen] = useState(false);
  const [isEditModalOpen, setIsEditModalOpen] = useState(false);
  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);
  const [isDetailsModalOpen, setIsDetailsModalOpen] = useState(false);
  const [newProduct, setNewProduct] = useState({
    nom: '',
    prix: '',
    stock: '',
    is_active: true,
    categorie: '',
    description: '',
    promotions: [] as string[],
    photos: [] as File[], // Ajout des fichiers photos pour l'upload
  });
  const [editProduct, setEditProduct] = useState({
    nom: '',
    prix: '',
    stock: '',
    is_active: true,
    categorie: '',
    description: '',
    promotions: [] as string[],
    photos: [] as File[], // Ajout des fichiers photos pour l'upload
  });
  const productsPerPage = 10;

  useEffect(() => {
    fetchProducts();
    fetchCategories();
    fetchPromotions();
  }, [currentPage, searchQuery, filterStatus]);

  const fetchProducts = async () => {
    setLoading(true);
    try {
      const response = await api.get<ApiResponse>('/produits/', {
        params: {
          page: currentPage,
          per_page: productsPerPage,
          search: searchQuery || undefined,
          is_active: filterStatus !== 'all' ? filterStatus : undefined,
        },
      });
      setProducts(response.data.results);
      setTotalProducts(response.data.count);
      setTotalPages(Math.ceil(response.data.count / productsPerPage));
      setLoading(false);
    } catch (err: any) {
      console.error('Erreur lors du chargement des produits:', err.response?.data);
      setError('Erreur lors du chargement des produits.');
      setLoading(false);
    }
  };

  const fetchCategories = async () => {
    try {
      const response = await api.get('/categories/');
      setCategories(response.data.results);
    } catch (err: any) {
      console.error('Erreur lors du chargement des catégories:', err.response?.data);
      setError('Erreur lors du chargement des catégories.');
    }
  };

  const fetchPromotions = async () => {
    try {
      const response = await api.get('/promotions/');
      setPromotions(response.data.results);
    } catch (err: any) {
      console.error('Erreur lors du chargement des promotions:', err.response?.data);
      setError('Erreur lors du chargement des promotions.');
    }
  };

  const handleSearch = (e: React.ChangeEvent<HTMLInputElement>) => {
    setSearchQuery(e.target.value);
    setCurrentPage(1);
  };

  const handleFilterStatus = (e: React.ChangeEvent<HTMLSelectElement>) => {
    setFilterStatus(e.target.value);
    setCurrentPage(1);
  };

  const handlePrevPage = () => {
    if (currentPage > 1) setCurrentPage(currentPage - 1);
  };

  const handleNextPage = () => {
    if (currentPage < totalPages) setCurrentPage(currentPage + 1);
  };

  const openAddModal = () => {
    setNewProduct({
      nom: '',
      prix: '',
      stock: '',
      is_active: true,
      categorie: '',
      description: '',
      promotions: [],
      photos: [],
    });
    setIsAddModalOpen(true);
  };

  const closeAddModal = () => {
    setIsAddModalOpen(false);
  };

  const handleAddProduct = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      const productData = {
        nom: newProduct.nom,
        prix: parseFloat(newProduct.prix).toString(),
        stock: parseInt(newProduct.stock, 10),
        is_active: newProduct.is_active,
        categorie: newProduct.categorie || null,
        description: newProduct.description,
        promotions: newProduct.promotions,
      };
      const response = await api.post('/produits/', productData);
      const productId = response.data.id;

      // Upload des photos via /photos/
      for (const photo of newProduct.photos) {
        const formData = new FormData();
        formData.append('image', photo);
        formData.append('entity_type', 'produit');
        formData.append('entity_id', productId);
        await api.post('/photos/', formData, {
          headers: { 'Content-Type': 'multipart/form-data' },
        });
      }

      setIsAddModalOpen(false);
      fetchProducts();
    } catch (err: any) {
      console.error('Erreur lors de l’ajout du produit:', err.response?.data);
      setError('Erreur lors de l’ajout du produit.');
    }
  };

  const openEditModal = (product: Product) => {
    setSelectedProduct(product);
    setEditProduct({
      nom: product.nom,
      prix: product.prix,
      stock: product.stock.toString(),
      is_active: product.is_active,
      categorie: product.categorie?.id || '',
      description: product.description,
      promotions: product.promotions.map((p) => p.id),
      photos: [],
    });
    setIsEditModalOpen(true);
  };

  const closeEditModal = () => {
    setIsEditModalOpen(false);
    setSelectedProduct(null);
  };

  const handleEditProduct = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!selectedProduct) return;

    try {
      const productData = {
        nom: editProduct.nom,
        prix: parseFloat(editProduct.prix).toString(),
        stock: parseInt(editProduct.stock, 10),
        is_active: editProduct.is_active,
        categorie: editProduct.categorie || null,
        description: editProduct.description,
        promotions: editProduct.promotions,
      };
      await api.put(`/produits/${selectedProduct.id}/`, productData);

      // Upload des nouvelles photos via /photos/
      for (const photo of editProduct.photos) {
        const formData = new FormData();
        formData.append('image', photo);
        formData.append('entity_type', 'produit');
        formData.append('entity_id', selectedProduct.id);
        await api.post('/photos/', formData, {
          headers: { 'Content-Type': 'multipart/form-data' },
        });
      }

      setIsEditModalOpen(false);
      fetchProducts();
    } catch (err: any) {
      console.error('Erreur lors de la mise à jour du produit:', err.response?.data);
      setError('Erreur lors de la mise à jour du produit.');
    }
  };

  const openDeleteModal = (product: Product) => {
    setSelectedProduct(product);
    setIsDeleteModalOpen(true);
  };

  const closeDeleteModal = () => {
    setIsDeleteModalOpen(false);
    setSelectedProduct(null);
  };

  const handleDeleteProduct = async () => {
    if (!selectedProduct) return;

    try {
      await api.delete(`/produits/${selectedProduct.id}/`);
      setIsDeleteModalOpen(false);
      fetchProducts();
    } catch (err: any) {
      console.error('Erreur lors de la suppression du produit:', err.response?.data);
      setError('Erreur lors de la suppression du produit.');
    }
  };

  const openDetailsModal = (product: Product) => {
    setSelectedProduct(product);
    setIsDetailsModalOpen(true);
  };

  const closeDetailsModal = () => {
    setIsDetailsModalOpen(false);
    setSelectedProduct(null);
  };

  const handleDeletePhoto = async (photoId: string) => {
    if (!selectedProduct) return;
  
    try {
      await api.delete(`/photos/${photoId}/`);
      setSelectedProduct({
        ...selectedProduct,
        photos: selectedProduct.photos.filter((photo) => photo.id !== photoId),
      });
      fetchProducts();
    } catch (err: any) {
      console.error('Erreur lors de la suppression de la photo:', err.response?.data);
      setError('Erreur lors de la suppression de la photo.');
    }
  };

  const handlePromotionChange = (
    e: React.ChangeEvent<HTMLInputElement>,
    type: 'new' | 'edit'
  ) => {
    const promotionId = e.target.value;
    const isChecked = e.target.checked;
    if (type === 'new') {
      const updatedPromotions = isChecked
        ? [...newProduct.promotions, promotionId]
        : newProduct.promotions.filter((id) => id !== promotionId);
      setNewProduct({ ...newProduct, promotions: updatedPromotions });
    } else {
      const updatedPromotions = isChecked
        ? [...editProduct.promotions, promotionId]
        : editProduct.promotions.filter((id) => id !== promotionId);
      setEditProduct({ ...editProduct, promotions: updatedPromotions });
    }
  };

  const handlePhotoChange = (
    e: React.ChangeEvent<HTMLInputElement>,
    type: 'new' | 'edit'
  ) => {
    const files = Array.from(e.target.files || []);
    if (type === 'new') {
      setNewProduct({ ...newProduct, photos: [...newProduct.photos, ...files] });
    } else {
      setEditProduct({ ...editProduct, photos: [...editProduct.photos, ...files] });
    }
  };

  if (loading) {
    return <div className="text-center py-16 text-lightText dark:text-darkText">Chargement...</div>;
  }

  if (error) {
    return <div className="text-center py-16 text-red-500">{error}</div>;
  }

  return (
    <AdminLayout>
      <div className="max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8">
        <h1 className="text-2xl sm:text-3xl font-serif font-medium text-lightText dark:text-darkText mb-4 sm:mb-6 flex items-center">
          <Package className="h-6 w-6 mr-2" /> Gestion des Produits
        </h1>

        <div className="mb-6 flex flex-col sm:flex-row gap-4 items-center justify-between">
          <div className="flex flex-col sm:flex-row gap-4 w-full sm:w-auto">
            <div className="relative w-full sm:w-64">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400" />
              <input
                type="text"
                value={searchQuery}
                onChange={handleSearch}
                placeholder="Rechercher par nom ou description..."
                className="w-full pl-10 pr-4 py-2 border border-lightBorder dark:border-darkBorder rounded-lg bg-lightBg dark:bg-darkBg text-lightText dark:text-darkText focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
            </div>
            <select
              value={filterStatus}
              onChange={handleFilterStatus}
              className="px-4 py-2 border border-lightBorder dark:border-darkBorder rounded-lg bg-lightBg dark:bg-darkBg text-lightText dark:text-darkText focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              <option value="all">Tous les statuts</option>
              <option value="true">Actif</option>
              <option value="false">Inactif</option>
            </select>
          </div>
          <ButtonPrimary
            onClick={openAddModal}
            className="px-4 py-2 bg-blue-500 text-white hover:bg-blue-600 flex items-center"
          >
            <PlusCircle className="h-5 w-5 mr-2" /> Ajouter un produit
          </ButtonPrimary>
        </div>

        <div className="overflow-x-auto">
          <table className="w-full text-left text-sm">
            <thead className="bg-lightCard dark:bg-darkCard">
              <tr className="border-b border-lightBorder dark:border-darkBorder">
                <th className="py-3 px-4 text-lightText dark:text-darkText">ID</th>
                <th className="py-3 px-4 text-lightText dark:text-darkText">Nom</th>
                <th className="py-3 px-4 text-lightText dark:text-darkText">Prix</th>
                <th className="py-3 px-4 text-lightText dark:text-darkText">Stock</th>
                <th className="py-3 px-4 text-lightText dark:text-darkText">Statut</th>
                <th className="py-3 px-4 text-lightText dark:text-darkText">Catégorie</th>
                <th className="py-3 px-4 text-lightText dark:text-darkText">Promotions</th>
                <th className="py-3 px-4 text-lightText dark:text-darkText">Photos</th>
                <th className="py-3 px-4 text-lightText dark:text-darkText">Actions</th>
              </tr>
            </thead>
            <tbody>
              {products.map((product) => (
                <tr
                  key={product.id}
                  className="border-b border-lightBorder dark:border-darkBorder hover:bg-gray-100 dark:hover:bg-gray-700"
                >
                  <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{product.id}</td>
                  <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{product.nom}</td>
                  <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{product.prix} FCFA</td>
                  <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{product.stock}</td>
                  <td className="py-3 px-4">
                    <span
                      className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${
                        product.is_active
                          ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200'
                          : 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200'
                      }`}
                    >
                      {product.is_active ? 'Actif' : 'Inactif'}
                    </span>
                  </td>
                  <td className="py-3 px-4 text-gray-700 dark:text-gray-300">
                    {product.categorie?.nom || 'Sans catégorie'}
                  </td>
                  <td className="py-3 px-4 text-gray-700 dark:text-gray-300">
                    {product.promotions.length > 0
                      ? product.promotions.map((p) => p.nom).join(', ')
                      : 'Aucune'}
                  </td>
                  <td className="py-3 px-4 text-gray-700 dark:text-gray-300">
                    {product.photos.length} photo(s)
                  </td>
                  <td className="py-3 px-4 flex gap-2">
                    <ButtonPrimary
                      onClick={() => openDetailsModal(product)}
                      className="px-2 py-1 bg-gray-500 text-white hover:bg-gray-600 flex items-center text-sm"
                    >
                      <Eye className="h-4 w-4 mr-1" /> Détails
                    </ButtonPrimary>
                    <ButtonPrimary
                      onClick={() => openEditModal(product)}
                      className="px-2 py-1 bg-blue-500 text-white hover:bg-blue-600 flex items-center text-sm"
                    >
                      <Edit className="h-4 w-4 mr-1" /> Modifier
                    </ButtonPrimary>
                    <ButtonPrimary
                      onClick={() => openDeleteModal(product)}
                      className="px-2 py-1 bg-red-500 text-white hover:bg-red-600 flex items-center text-sm"
                    >
                      <Trash2 className="h-4 w-4 mr-1" /> Supprimer
                    </ButtonPrimary>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>

        <div className="mt-6 flex flex-col sm:flex-row items-center justify-between gap-4">
          <p className="text-sm text-gray-700 dark:text-gray-300">
            Affichage de {(currentPage - 1) * productsPerPage + 1} à{' '}
            {Math.min(currentPage * productsPerPage, totalProducts)} sur {totalProducts} produits
          </p>
          <div className="flex gap-2">
            <ButtonPrimary
              onClick={handlePrevPage}
              disabled={currentPage === 1}
              className="px-3 py-2 bg-lightCard dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600 disabled:opacity-50 flex items-center"
            >
              <ChevronLeft className="h-5 w-5 mr-1" /> Précédent
            </ButtonPrimary>
            <ButtonPrimary
              onClick={handleNextPage}
              disabled={currentPage === totalPages}
              className="px-3 py-2 bg-lightCard dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600 disabled:opacity-50 flex items-center"
            >
              Suivant <ChevronRight className="h-5 w-5 ml-1" />
            </ButtonPrimary>
          </div>
        </div>

        {isAddModalOpen && (
          <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center">
            <div className="bg-lightBg dark:bg-darkBg p-6 rounded-lg shadow-lg w-full max-w-md">
              <h2 className="text-xl font-medium text-lightText dark:text-darkText mb-4 flex items-center">
                <PlusCircle className="h-5 w-5 mr-2" /> Ajouter un produit
              </h2>
              <form onSubmit={handleAddProduct} className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-lightText dark:text-darkText mb-1">
                    Nom
                  </label>
                  <input
                    type="text"
                    value={newProduct.nom}
                    onChange={(e) => setNewProduct({ ...newProduct, nom: e.target.value })}
                    className="w-full px-3 py-2 border border-lightBorder dark:border-darkBorder rounded-lg bg-lightCard dark:bg-darkCard text-lightText dark:text-darkText focus:outline-none focus:ring-2 focus:ring-blue-500"
                    required
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-lightText dark:text-darkText mb-1">
                    Prix (FCFA)
                  </label>
                  <input
                    type="number"
                    step="0.01"
                    value={newProduct.prix}
                    onChange={(e) => setNewProduct({ ...newProduct, prix: e.target.value })}
                    className="w-full px-3 py-2 border border-lightBorder dark:border-darkBorder rounded-lg bg-lightCard dark:bg-darkCard text-lightText dark:text-darkText focus:outline-none focus:ring-2 focus:ring-blue-500"
                    required
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-lightText dark:text-darkText mb-1">
                    Stock
                  </label>
                  <input
                    type="number"
                    value={newProduct.stock}
                    onChange={(e) => setNewProduct({ ...newProduct, stock: e.target.value })}
                    className="w-full px-3 py-2 border border-lightBorder dark:border-darkBorder rounded-lg bg-lightCard dark:bg-darkCard text-lightText dark:text-darkText focus:outline-none focus:ring-2 focus:ring-blue-500"
                    required
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-lightText dark:text-darkText mb-1">
                    Actif
                  </label>
                  <input
                    type="checkbox"
                    checked={newProduct.is_active}
                    onChange={(e) => setNewProduct({ ...newProduct, is_active: e.target.checked })}
                    className="h-5 w-5 text-blue-500 focus:ring-blue-500 border-lightBorder dark:border-darkBorder rounded"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-lightText dark:text-darkText mb-1">
                    Catégorie
                  </label>
                  <select
                    value={newProduct.categorie}
                    onChange={(e) => setNewProduct({ ...newProduct, categorie: e.target.value })}
                    className="w-full px-3 py-2 border border-lightBorder dark:border-darkBorder rounded-lg bg-lightCard dark:bg-darkCard text-lightText dark:text-darkText focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Sans catégorie</option>
                    {categories.map((cat) => (
                      <option key={cat.id} value={cat.id}>
                        {cat.nom}
                      </option>
                    ))}
                  </select>
                </div>
                <div>
                  <label className="block text-sm font-medium text-lightText dark:text-darkText mb-1">
                    Promotions
                  </label>
                  <div className="space-y-2 max-h-40 overflow-y-auto">
                    {promotions.map((promo) => (
                      <div key={promo.id} className="flex items-center">
                        <input
                          type="checkbox"
                          value={promo.id}
                          checked={newProduct.promotions.includes(promo.id)}
                          onChange={(e) => handlePromotionChange(e, 'new')}
                          className="h-4 w-4 text-blue-500 focus:ring-blue-500 border-lightBorder dark:border-darkBorder rounded"
                        />
                        <label className="ml-2 text-sm text-lightText dark:text-darkText">
                          {promo.nom}
                        </label>
                      </div>
                    ))}
                  </div>
                </div>
                <div>
                  <label className="block text-sm font-medium text-lightText dark:text-darkText mb-1">
                    Description
                  </label>
                  <textarea
                    value={newProduct.description}
                    onChange={(e) =>
                      setNewProduct({ ...newProduct, description: e.target.value })
                    }
                    className="w-full px-3 py-2 border border-lightBorder dark:border-darkBorder rounded-lg bg-lightCard dark:bg-darkCard text-lightText dark:text-darkText focus:outline-none focus:ring-2 focus:ring-blue-500"
                    rows={3}
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-lightText dark:text-darkText mb-1">
                    Photos
                  </label>
                  <input
                    type="file"
                    accept="image/*"
                    multiple
                    onChange={(e) => handlePhotoChange(e, 'new')}
                    className="w-full text-sm text-gray-700 dark:text-gray-300 file:mr-4 file:py-2 file:px-4 file:rounded-lg file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100 dark:file:bg-gray-700 dark:file:text-gray-300 dark:hover:file:bg-gray-600"
                  />
                  {newProduct.photos.length > 0 && (
                    <div className="mt-2 flex flex-wrap gap-2">
                      {newProduct.photos.map((photo, index) => (
                        <div key={index} className="relative">
                          <img
                            src={URL.createObjectURL(photo)}
                            alt={`Preview ${index}`}
                            className="w-20 h-20 object-cover rounded"
                          />
                          <button
                            type="button"
                            onClick={() =>
                              setNewProduct({
                                ...newProduct,
                                photos: newProduct.photos.filter((_, i) => i !== index),
                              })
                            }
                            className="absolute top-0 right-0 bg-red-500 text-white rounded-full p-1"
                          >
                            <X className="h-4 w-4" />
                          </button>
                        </div>
                      ))}
                    </div>
                  )}
                </div>
                <div className="flex gap-2 justify-end">
                  <ButtonPrimary
                    type="button"
                    onClick={closeAddModal}
                    className="px-4 py-2 bg-lightCard dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600"
                  >
                    Annuler
                  </ButtonPrimary>
                  <ButtonPrimary
                    type="submit"
                    className="px-4 py-2 bg-blue-500 text-white hover:bg-blue-600"
                  >
                    Ajouter
                  </ButtonPrimary>
                </div>
              </form>
            </div>
          </div>
        )}

        {isEditModalOpen && selectedProduct && (
          <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center">
            <div className="bg-lightBg dark:bg-darkBg p-6 rounded-lg shadow-lg w-full max-w-md">
              <h2 className="text-xl font-medium text-lightText dark:text-darkText mb-4 flex items-center">
                <Edit className="h-5 w-5 mr-2" /> Modifier le produit
              </h2>
              <form onSubmit={handleEditProduct} className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-lightText dark:text-darkText mb-1">
                    Nom
                  </label>
                  <input
                    type="text"
                    value={editProduct.nom}
                    onChange={(e) => setEditProduct({ ...editProduct, nom: e.target.value })}
                    className="w-full px-3 py-2 border border-lightBorder dark:border-darkBorder rounded-lg bg-lightCard dark:bg-darkCard text-lightText dark:text-darkText focus:outline-none focus:ring-2 focus:ring-blue-500"
                    required
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-lightText dark:text-darkText mb-1">
                    Prix (FCFA)
                  </label>
                  <input
                    type="number"
                    step="0.01"
                    value={editProduct.prix}
                    onChange={(e) => setEditProduct({ ...editProduct, prix: e.target.value })}
                    className="w-full px-3 py-2 border border-lightBorder dark:border-darkBorder rounded-lg bg-lightCard dark:bg-darkCard text-lightText dark:text-darkText focus:outline-none focus:ring-2 focus:ring-blue-500"
                    required
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-lightText dark:text-darkText mb-1">
                    Stock
                  </label>
                  <input
                    type="number"
                    value={editProduct.stock}
                    onChange={(e) => setEditProduct({ ...editProduct, stock: e.target.value })}
                    className="w-full px-3 py-2 border border-lightBorder dark:border-darkBorder rounded-lg bg-lightCard dark:bg-darkCard text-lightText dark:text-darkText focus:outline-none focus:ring-2 focus:ring-blue-500"
                    required
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-lightText dark:text-darkText mb-1">
                    Actif
                  </label>
                  <input
                    type="checkbox"
                    checked={editProduct.is_active}
                    onChange={(e) => setEditProduct({ ...editProduct, is_active: e.target.checked })}
                    className="h-5 w-5 text-blue-500 focus:ring-blue-500 border-lightBorder dark:border-darkBorder rounded"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-lightText dark:text-darkText mb-1">
                    Catégorie
                  </label>
                  <select
                    value={editProduct.categorie}
                    onChange={(e) => setEditProduct({ ...editProduct, categorie: e.target.value })}
                    className="w-full px-3 py-2 border border-lightBorder dark:border-darkBorder rounded-lg bg-lightCard dark:bg-darkCard text-lightText dark:text-darkText focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Sans catégorie</option>
                    {categories.map((cat) => (
                      <option key={cat.id} value={cat.id}>
                        {cat.nom}
                      </option>
                    ))}
                  </select>
                </div>
                <div>
                  <label className="block text-sm font-medium text-lightText dark:text-darkText mb-1">
                    Promotions
                  </label>
                  <div className="space-y-2 max-h-40 overflow-y-auto">
                    {promotions.map((promo) => (
                      <div key={promo.id} className="flex items-center">
                        <input
                          type="checkbox"
                          value={promo.id}
                          checked={editProduct.promotions.includes(promo.id)}
                          onChange={(e) => handlePromotionChange(e, 'edit')}
                          className="h-4 w-4 text-blue-500 focus:ring-blue-500 border-lightBorder dark:border-darkBorder rounded"
                        />
                        <label className="ml-2 text-sm text-lightText dark:text-darkText">
                          {promo.nom}
                        </label>
                      </div>
                    ))}
                  </div>
                </div>
                <div>
                  <label className="block text-sm font-medium text-lightText dark:text-darkText mb-1">
                    Description
                  </label>
                  <textarea
                    value={editProduct.description}
                    onChange={(e) =>
                      setEditProduct({ ...editProduct, description: e.target.value })
                    }
                    className="w-full px-3 py-2 border border-lightBorder dark:border-darkBorder rounded-lg bg-lightCard dark:bg-darkCard text-lightText dark:text-darkText focus:outline-none focus:ring-2 focus:ring-blue-500"
                    rows={3}
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-lightText dark:text-darkText mb-1">
                    Ajouter des photos
                  </label>
                  <input
                    type="file"
                    accept="image/*"
                    multiple
                    onChange={(e) => handlePhotoChange(e, 'edit')}
                    className="w-full text-sm text-gray-700 dark:text-gray-300 file:mr-4 file:py-2 file:px-4 file:rounded-lg file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100 dark:file:bg-gray-700 dark:file:text-gray-300 dark:hover:file:bg-gray-600"
                  />
                  {editProduct.photos.length > 0 && (
                    <div className="mt-2 flex flex-wrap gap-2">
                      {editProduct.photos.map((photo, index) => (
                        <div key={index} className="relative">
                          <img
                            src={URL.createObjectURL(photo)}
                            alt={`Preview ${index}`}
                            className="w-20 h-20 object-cover rounded"
                          />
                          <button
                            type="button"
                            onClick={() =>
                              setEditProduct({
                                ...editProduct,
                                photos: editProduct.photos.filter((_, i) => i !== index),
                              })
                            }
                            className="absolute top-0 right-0 bg-red-500 text-white rounded-full p-1"
                          >
                            <X className="h-4 w-4" />
                          </button>
                        </div>
                      ))}
                    </div>
                  )}
                </div>
                <div className="flex gap-2 justify-end">
                  <ButtonPrimary
                    type="button"
                    onClick={closeEditModal}
                    className="px-4 py-2 bg-lightCard dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600"
                  >
                    Annuler
                  </ButtonPrimary>
                  <ButtonPrimary
                    type="submit"
                    className="px-4 py-2 bg-blue-500 text-white hover:bg-blue-600"
                  >
                    Enregistrer
                  </ButtonPrimary>
                </div>
              </form>
            </div>
          </div>
        )}

        {isDeleteModalOpen && selectedProduct && (
          <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center">
            <div className="bg-lightBg dark:bg-darkBg p-6 rounded-lg shadow-lg w-full max-w-md">
              <h2 className="text-xl font-medium text-lightText dark:text-darkText mb-4 flex items-center">
                <Trash2 className="h-5 w-5 mr-2" /> Supprimer le produit
              </h2>
              <p className="text-gray-700 dark:text-gray-300 mb-4">
                Êtes-vous sûr de vouloir supprimer le produit{' '}
                <span className="font-medium">{selectedProduct.nom}</span> ?
              </p>
              <div className="flex gap-2 justify-end">
                <ButtonPrimary
                  type="button"
                  onClick={closeDeleteModal}
                  className="px-4 py-2 bg-lightCard dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600"
                >
                  Annuler
                </ButtonPrimary>
                <ButtonPrimary
                  onClick={handleDeleteProduct}
                  className="px-4 py-2 bg-red-500 text-white hover:bg-red-600"
                >
                  Supprimer
                </ButtonPrimary>
              </div>
            </div>
          </div>
        )}

        {isDetailsModalOpen && selectedProduct && (
          <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center">
            <div className="bg-lightBg dark:bg-darkBg p-6 rounded-lg shadow-lg w-full max-w-lg">
              <h2 className="text-xl font-medium text-lightText dark:text-darkText mb-4 flex items-center">
                <Eye className="h-5 w-5 mr-2" /> Détails du produit
              </h2>
              <div className="space-y-2">
                <p className="text-gray-700 dark:text-gray-300">
                  <strong>ID :</strong> {selectedProduct.id}
                </p>
                <p className="text-gray-700 dark:text-gray-300">
                  <strong>Nom :</strong> {selectedProduct.nom}
                </p>
                <p className="text-gray-700 dark:text-gray-300">
                  <strong>Prix :</strong> {selectedProduct.prix} FCFA
                </p>
                <p className="text-gray-700 dark:text-gray-300">
                  <strong>Stock :</strong> {selectedProduct.stock}
                </p>
                <p className="text-gray-700 dark:text-gray-300">
                  <strong>Statut :</strong> {selectedProduct.is_active ? 'Actif' : 'Inactif'}
                </p>
                <p className="text-gray-700 dark:text-gray-300">
                  <strong>Catégorie :</strong> {selectedProduct.categorie?.nom || 'Sans catégorie'}
                </p>
                <p className="text-gray-700 dark:text-gray-300">
                  <strong>Promotions :</strong>{' '}
                  {selectedProduct.promotions.length > 0
                    ? selectedProduct.promotions.map((p) => p.nom).join(', ')
                    : 'Aucune'}
                </p>
                <p className="text-gray-700 dark:text-gray-300">
                  <strong>Description :</strong> {selectedProduct.description || 'Aucune'}
                </p>
                <div>
                  <strong className="text-gray-700 dark:text-gray-300">Photos :</strong>
                  {selectedProduct.photos.length > 0 ? (
                    <div className="mt-2 flex flex-wrap gap-2">
                      {selectedProduct.photos.map((photo) => (
                        <div key={photo.id} className="relative">
                          <img
                            src={photo.image}
                            alt={`Photo ${photo.id}`}
                            className="w-20 h-20 object-cover rounded"
                          />
                          <button
                            type="button"
                            onClick={() => handleDeletePhoto(photo.id)}
                            className="absolute top-0 right-0 bg-red-500 text-white rounded-full p-1"
                          >
                            <X className="h-4 w-4" />
                          </button>
                        </div>
                      ))}
                    </div>
                  ) : (
                    <p className="text-gray-700 dark:text-gray-300">Aucune photo</p>
                  )}
                </div>
              </div>
              <div className="mt-4 flex justify-end">
                <ButtonPrimary
                  onClick={closeDetailsModal}
                  className="px-4 py-2 bg-lightCard dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600"
                >
                  Fermer
                </ButtonPrimary>
              </div>
            </div>
          </div>
        )}
      </div>
    </AdminLayout>
  );
};

export default AdminProductsPage;

--- pages\AdminProductsStatsPage.tsx ---
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import api from '../services/api';
import AdminLayout from '../components/AdminLayout';
import ButtonPrimary from '../components/ButtonPrimary';
import { Bar, Line } from 'react-chartjs-2';
import { Chart as ChartJS, CategoryScale, LinearScale, BarElement, LineElement, PointElement, Title, Tooltip, Legend } from 'chart.js';
import { Package, BarChart2, DollarSign, AlertTriangle } from 'lucide-react';

ChartJS.register(CategoryScale, LinearScale, BarElement, LineElement, PointElement, Title, Tooltip, Legend);

interface ProductStats {
  total_products: number;
  active_products: number;
  low_stock_products: number;
  total_sales: string;
  sales_by_product: { produit_id: string; nom: string; total_sales: string }[];
  stock_by_category: { categorie_nom: string | null; total_stock: number }[];
  low_stock_details: { id: string; nom: string; stock: number }[];
}

const AdminProductsStatsPage: React.FC = () => {
  const navigate = useNavigate();
  const [statsData, setStatsData] = useState<ProductStats | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [daysFilter, setDaysFilter] = useState<number>(30);

  useEffect(() => {
    fetchStatsData();
  }, [daysFilter]);

  const fetchStatsData = async () => {
    setLoading(true);
    try {
      const response = await api.get('/produits/stats/', { params: { days: daysFilter } });
      setStatsData(response.data);
      setLoading(false);
    } catch (err: any) {
      console.error('Erreur lors du chargement des statistiques des produits:', err.response?.data);
      setError('Erreur lors du chargement des statistiques des produits.');
      setLoading(false);
    }
  };

  const handleFilterChange = (days: number) => {
    setDaysFilter(days);
  };

  const salesByProductChartData = {
    labels: statsData ? statsData.sales_by_product.map((item) => item.nom) : [],
    datasets: [
      {
        label: 'Ventes par produit (FCFA)',
        data: statsData ? statsData.sales_by_product.map((item) => parseFloat(item.total_sales)) : [],
        backgroundColor: '#2196F3',
      },
    ],
  };

  const stockByCategoryChartData = {
    labels: statsData ? statsData.stock_by_category.map((item) => item.categorie_nom || 'Sans catégorie') : [],
    datasets: [
      {
        label: 'Stock par catégorie',
        data: statsData ? statsData.stock_by_category.map((item) => item.total_stock) : [],
        borderColor: '#4CAF50',
        backgroundColor: 'rgba(76, 175, 80, 0.2)',
        fill: true,
      },
    ],
  };

  const chartOptions = {
    responsive: true,
    maintainAspectRatio: false,
    plugins: { legend: { position: 'top' as const }, title: { display: true, text: '' } },
  };

  if (loading) {
    return <div className="text-center py-16 text-lightText dark:text-darkText">Chargement...</div>;
  }

  if (error) {
    return <div className="text-center py-16 text-red-500">{error}</div>;
  }

  return (
    <AdminLayout>
      <div className="max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8">
        <h1 className="text-2xl sm:text-3xl font-serif font-medium text-lightText dark:text-darkText mb-4 sm:mb-6 flex items-center">
          <BarChart2 className="h-6 w-6 mr-2" /> Statistiques des Produits
        </h1>

        {/* Filtres */}
        <div className="mb-6 flex flex-wrap gap-2">
          <ButtonPrimary
            onClick={() => handleFilterChange(7)}
            className={`px-4 py-2 text-sm sm:text-base ${daysFilter === 7 ? 'bg-blue-500 text-white' : 'bg-lightCard dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600'}`}
          >
            7 jours
          </ButtonPrimary>
          <ButtonPrimary
            onClick={() => handleFilterChange(30)}
            className={`px-4 py-2 text-sm sm:text-base ${daysFilter === 30 ? 'bg-blue-500 text-white' : 'bg-lightCard dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600'}`}
          >
            30 jours
          </ButtonPrimary>
          <ButtonPrimary
            onClick={() => handleFilterChange(90)}
            className={`px-4 py-2 text-sm sm:text-base ${daysFilter === 90 ? 'bg-blue-500 text-white' : 'bg-lightCard dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600'}`}
          >
            90 jours
          </ButtonPrimary>
        </div>

        {/* Statistiques générales */}
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 mb-6">
          <div className="bg-lightCard dark:bg-darkCard p-4 rounded-lg shadow-md">
            <h2 className="text-lg font-medium text-lightText dark:text-darkText mb-2 flex items-center">
              <Package className="h-5 w-5 mr-2" /> Total Produits
            </h2>
            <p className="text-2xl font-bold text-gray-700 dark:text-gray-300">{statsData?.total_products}</p>
          </div>
          <div className="bg-lightCard dark:bg-darkCard p-4 rounded-lg shadow-md">
            <h2 className="text-lg font-medium text-lightText dark:text-darkText mb-2 flex items-center">
              <Package className="h-5 w-5 mr-2" /> Produits Actifs
            </h2>
            <p className="text-2xl font-bold text-gray-700 dark:text-gray-300">{statsData?.active_products}</p>
          </div>
          <div className="bg-lightCard dark:bg-darkCard p-4 rounded-lg shadow-md">
            <h2 className="text-lg font-medium text-lightText dark:text-darkText mb-2 flex items-center">
              <AlertTriangle className="h-5 w-5 mr-2" /> Stock Faible
            </h2>
            <p className="text-2xl font-bold text-gray-700 dark:text-gray-300">{statsData?.low_stock_products}</p>
          </div>
          <div className="bg-lightCard dark:bg-darkCard p-4 rounded-lg shadow-md">
            <h2 className="text-lg font-medium text-lightText dark:text-darkText mb-2 flex items-center">
              <DollarSign className="h-5 w-5 mr-2" /> Total Ventes ({daysFilter} jours)
            </h2>
            <p className="text-2xl font-bold text-gray-700 dark:text-gray-300">{statsData?.total_sales} FCFA</p>
          </div>
        </div>

        {/* Graphiques */}
        <div className="space-y-6">
          <div className="bg-lightCard dark:bg-darkCard p-4 rounded-lg shadow-md">
            <h2 className="text-lg font-medium text-lightText dark:text-darkText mb-2">Ventes par produit</h2>
            <div className="h-48 sm:h-64">
              <Bar
                data={salesByProductChartData}
                options={{ ...chartOptions, plugins: { ...chartOptions.plugins, title: { text: `Ventes sur ${daysFilter} jours` } } }}
              />
            </div>
          </div>

          <div className="bg-lightCard dark:bg-darkCard p-4 rounded-lg shadow-md">
            <h2 className="text-lg font-medium text-lightText dark:text-darkText mb-2">Stock par catégorie</h2>
            <div className="h-48 sm:h-64">
              <Line
                data={stockByCategoryChartData}
                options={{ ...chartOptions, plugins: { ...chartOptions.plugins, title: { text: 'Répartition du stock' } } }}
              />
            </div>
          </div>

          {/* Liste des produits en stock faible */}
          {statsData?.low_stock_details.length > 0 && (
            <div className="bg-lightCard dark:bg-darkCard p-4 rounded-lg shadow-md">
              <h2 className="text-lg font-medium text-lightText dark:text-darkText mb-2 flex items-center">
                <AlertTriangle className="h-5 w-5 mr-2" /> Produits en stock faible
              </h2>
              <div className="overflow-x-auto">
                <table className="w-full text-left text-sm">
                  <thead className="bg-lightBg dark:bg-darkBg">
                    <tr className="border-b border-lightBorder dark:border-darkBorder">
                      <th className="py-3 px-4 text-lightText dark:text-darkText">ID</th>
                      <th className="py-3 px-4 text-lightText dark:text-darkText">Nom</th>
                      <th className="py-3 px-4 text-lightText dark:text-darkText">Stock</th>
                    </tr>
                  </thead>
                  <tbody>
                    {statsData.low_stock_details.map((product) => (
                      <tr key={product.id} className="border-b border-lightBorder dark:border-darkBorder">
                        <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{product.id}</td>
                        <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{product.nom}</td>
                        <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{product.stock}</td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </div>
          )}
        </div>
      </div>
    </AdminLayout>
  );
};

export default AdminProductsStatsPage;

--- pages\AdminPromotionsPage.tsx ---
import React, { useState, useEffect, useCallback } from 'react';
import { useNavigate } from 'react-router-dom';
import api from '../services/api';
import AdminLayout from '../components/AdminLayout';
import ButtonPrimary from '../components/ButtonPrimary';
import { Tag, Search, Filter, Edit, Trash2, PlusCircle, ChevronLeft, ChevronRight } from 'lucide-react';
import debounce from 'lodash/debounce';

interface Promotion {
  id: string;
  nom: string;
  pourcentage: number;
  date_debut: string;
  date_fin: string;
  produits: { id: string; nom: string }[];
}

interface Product {
  id: string;
  nom: string;
}

interface Category {
  id: string;
  nom: string;
}

interface ApiResponse {
  results: Promotion[];
  count: number;
  next: string | null;
  previous: string | null;
}

const AdminPromotionsPage: React.FC = () => {
  const navigate = useNavigate();
  const [promotions, setPromotions] = useState<Promotion[]>([]);
  const [totalPromotions, setTotalPromotions] = useState(0);
  const [currentPage, setCurrentPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [searchQuery, setSearchQuery] = useState('');
  const [filterStatus, setFilterStatus] = useState<string>('all');
  const [categories, setCategories] = useState<Category[]>([]);
  const [products, setProducts] = useState<Product[]>([]);
  const [productSearch, setProductSearch] = useState('');
  const [selectedPromotion, setSelectedPromotion] = useState<Promotion | null>(null);
  const [isAddModalOpen, setIsAddModalOpen] = useState(false);
  const [isEditModalOpen, setIsEditModalOpen] = useState(false);
  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);
  const [newPromotion, setNewPromotion] = useState({
    nom: '',
    pourcentage: '',
    date_debut: '',
    date_fin: '',
    produits: [] as string[],
    categorie: '',
  });
  const [editPromotion, setEditPromotion] = useState({
    nom: '',
    pourcentage: '',
    date_debut: '',
    date_fin: '',
    produits: [] as string[],
    categorie: '',
  });
  const promotionsPerPage = 10;

  useEffect(() => {
    fetchPromotions();
    fetchCategories();
    fetchProducts('');
  }, [currentPage, searchQuery, filterStatus]);

  const fetchPromotions = async () => {
    setLoading(true);
    try {
      const response = await api.get<ApiResponse>('/promotions/', {
        params: {
          page: currentPage,
          per_page: promotionsPerPage,
          search: searchQuery || undefined,
          status: filterStatus !== 'all' ? filterStatus : undefined,
        },
      });
      setPromotions(response.data.results);
      setTotalPromotions(response.data.count);
      setTotalPages(Math.ceil(response.data.count / promotionsPerPage));
      setLoading(false);
    } catch (err: any) {
      console.error('Erreur lors du chargement des promotions:', err.response?.data);
      setError('Erreur lors du chargement des promotions.');
      setLoading(false);
    }
  };

  const fetchCategories = async () => {
    try {
      const response = await api.get('/categories/');
      setCategories(response.data);
    } catch (err: any) {
      console.error('Erreur lors du chargement des catégories:', err.response?.data);
      setError('Erreur lors du chargement des catégories.');
    }
  };

  const fetchProducts = useCallback(
    debounce(async (query: string) => {
      try {
        const response = await api.get('/produits/', {
          params: { search: query || undefined, per_page: 50 },
        });
        setProducts(response.data);
      } catch (err: any) {
        console.error('Erreur lors du chargement des produits:', err.response?.data);
        setError('Erreur lors du chargement des produits.');
      }
    }, 300),
    []
  );

  const handleSearch = (e: React.ChangeEvent<HTMLInputElement>) => {
    setSearchQuery(e.target.value);
    setCurrentPage(1);
  };

  const handleFilterStatus = (e: React.ChangeEvent<HTMLSelectElement>) => {
    setFilterStatus(e.target.value);
    setCurrentPage(1);
  };

  const handlePrevPage = () => {
    if (currentPage > 1) setCurrentPage(currentPage - 1);
  };

  const handleNextPage = () => {
    if (currentPage < totalPages) setCurrentPage(currentPage + 1);
  };

  const openAddModal = () => {
    setNewPromotion({ nom: '', pourcentage: '', date_debut: '', date_fin: '', produits: [], categorie: '' });
    setIsAddModalOpen(true);
  };

  const closeAddModal = () => {
    setIsAddModalOpen(false);
    setProductSearch('');
  };

  const handleAddPromotion = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      const promotionData = {
        ...newPromotion,
        pourcentage: parseFloat(newPromotion.pourcentage),
        produits: newPromotion.produits,
        categorie: newPromotion.categorie || null,
      };
      await api.post('/promotions/', promotionData);
      setIsAddModalOpen(false);
      fetchPromotions();
    } catch (err: any) {
      console.error('Erreur lors de l’ajout de la promotion:', err.response?.data);
      setError('Erreur lors de l’ajout de la promotion.');
    }
  };

  const openEditModal = (promotion: Promotion) => {
    setSelectedPromotion(promotion);
    setEditPromotion({
      nom: promotion.nom,
      pourcentage: promotion.pourcentage.toString(),
      date_debut: promotion.date_debut,
      date_fin: promotion.date_fin,
      produits: promotion.produits.map((p) => p.id),
      categorie: '', // À récupérer si lié à une catégorie (pas dans le modèle actuel)
    });
    setIsEditModalOpen(true);
  };

  const closeEditModal = () => {
    setIsEditModalOpen(false);
    setSelectedPromotion(null);
    setProductSearch('');
  };

  const handleEditPromotion = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!selectedPromotion) return;

    try {
      const promotionData = {
        ...editPromotion,
        pourcentage: parseFloat(editPromotion.pourcentage),
        produits: editPromotion.produits,
        categorie: editPromotion.categorie || null,
      };
      await api.put(`/promotions/${selectedPromotion.id}/`, promotionData);
      setIsEditModalOpen(false);
      fetchPromotions();
    } catch (err: any) {
      console.error('Erreur lors de la mise à jour de la promotion:', err.response?.data);
      setError('Erreur lors de la mise à jour de la promotion.');
    }
  };

  const openDeleteModal = (promotion: Promotion) => {
    setSelectedPromotion(promotion);
    setIsDeleteModalOpen(true);
  };

  const closeDeleteModal = () => {
    setIsDeleteModalOpen(false);
    setSelectedPromotion(null);
  };

  const handleDeletePromotion = async () => {
    if (!selectedPromotion) return;

    try {
      await api.delete(`/promotions/${selectedPromotion.id}/`);
      setIsDeleteModalOpen(false);
      fetchPromotions();
    } catch (err: any) {
      console.error('Erreur lors de la suppression de la promotion:', err.response?.data);
      setError('Erreur lors de la suppression de la promotion.');
    }
  };

  const handleProductSearch = (e: React.ChangeEvent<HTMLInputElement>) => {
    const query = e.target.value;
    setProductSearch(query);
    fetchProducts(query);
  };

  const handleProductToggle = (productId: string, type: 'new' | 'edit') => {
    if (type === 'new') {
      const updatedProducts = newPromotion.produits.includes(productId)
        ? newPromotion.produits.filter((id) => id !== productId)
        : [...newPromotion.produits, productId];
      setNewPromotion({ ...newPromotion, produits: updatedProducts, categorie: '' });
    } else {
      const updatedProducts = editPromotion.produits.includes(productId)
        ? editPromotion.produits.filter((id) => id !== productId)
        : [...editPromotion.produits, productId];
      setEditPromotion({ ...editPromotion, produits: updatedProducts, categorie: '' });
    }
  };

  const handleCategorySelect = (categoryId: string, type: 'new' | 'edit') => {
    if (type === 'new') {
      setNewPromotion({ ...newPromotion, categorie: categoryId, produits: [] });
    } else {
      setEditPromotion({ ...editPromotion, categorie: categoryId, produits: [] });
    }
  };

  if (loading) {
    return <div className="text-center py-16 text-lightText dark:text-darkText">Chargement...</div>;
  }

  if (error) {
    return <div className="text-center py-16 text-red-500">{error}</div>;
  }

  return (
    <AdminLayout>
      <div className="max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8">
        <h1 className="text-2xl sm:text-3xl font-serif font-medium text-lightText dark:text-darkText mb-4 sm:mb-6 flex items-center">
          <Tag className="h-6 w-6 mr-2" /> Gestion des Promotions
        </h1>

        {/* Filtres et Recherche */}
        <div className="mb-6 flex flex-col sm:flex-row gap-4 items-center justify-between">
          <div className="flex flex-col sm:flex-row gap-4 w-full sm:w-auto">
            <div className="relative w-full sm:w-64">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400" />
              <input
                type="text"
                value={searchQuery}
                onChange={handleSearch}
                placeholder="Rechercher par nom..."
                className="w-full pl-10 pr-4 py-2 border border-lightBorder dark:border-darkBorder rounded-lg bg-lightBg dark:bg-darkBg text-lightText dark:text-darkText focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
            </div>
            <select
              value={filterStatus}
              onChange={handleFilterStatus}
              className="px-4 py-2 border border-lightBorder dark:border-darkBorder rounded-lg bg-lightBg dark:bg-darkBg text-lightText dark:text-darkText focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              <option value="all">Tous les statuts</option>
              <option value="active">Actives</option>
              <option value="expired">Expirées</option>
            </select>
          </div>
          <ButtonPrimary
            onClick={openAddModal}
            className="px-4 py-2 bg-blue-500 text-white hover:bg-blue-600 flex items-center"
          >
            <PlusCircle className="h-5 w-5 mr-2" /> Ajouter une promotion
          </ButtonPrimary>
        </div>

        {/* Liste des promotions */}
        <div className="overflow-x-auto">
          <table className="w-full text-left text-sm">
            <thead className="bg-lightCard dark:bg-darkCard">
              <tr className="border-b border-lightBorder dark:border-darkBorder">
                <th className="py-3 px-4 text-lightText dark:text-darkText">ID</th>
                <th className="py-3 px-4 text-lightText dark:text-darkText">Nom</th>
                <th className="py-3 px-4 text-lightText dark:text-darkText">Pourcentage</th>
                <th className="py-3 px-4 text-lightText dark:text-darkText">Début</th>
                <th className="py-3 px-4 text-lightText dark:text-darkText">Fin</th>
                <th className="py-3 px-4 text-lightText dark:text-darkText">Nb Produits</th>
                <th className="py-3 px-4 text-lightText dark:text-darkText">Actions</th>
              </tr>
            </thead>
            <tbody>
              {promotions.map((promotion) => (
                <tr key={promotion.id} className="border-b border-lightBorder dark:border-darkBorder hover:bg-gray-100 dark:hover:bg-gray-700">
                  <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{promotion.id}</td>
                  <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{promotion.nom}</td>
                  <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{promotion.pourcentage}%</td>
                  <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{new Date(promotion.date_debut).toLocaleDateString()}</td>
                  <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{new Date(promotion.date_fin).toLocaleDateString()}</td>
                  <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{promotion.produits.length}</td>
                  <td className="py-3 px-4 flex gap-2">
                    <ButtonPrimary
                      onClick={() => openEditModal(promotion)}
                      className="px-2 py-1 bg-blue-500 text-white hover:bg-blue-600 flex items-center text-sm"
                    >
                      <Edit className="h-4 w-4 mr-1" /> Modifier
                    </ButtonPrimary>
                    <ButtonPrimary
                      onClick={() => openDeleteModal(promotion)}
                      className="px-2 py-1 bg-red-500 text-white hover:bg-red-600 flex items-center text-sm"
                    >
                      <Trash2 className="h-4 w-4 mr-1" /> Supprimer
                    </ButtonPrimary>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>

        {/* Pagination */}
        <div className="mt-6 flex flex-col sm:flex-row items-center justify-between gap-4">
          <p className="text-sm text-gray-700 dark:text-gray-300">
            Affichage de {(currentPage - 1) * promotionsPerPage + 1} à{' '}
            {Math.min(currentPage * promotionsPerPage, totalPromotions)} sur {totalPromotions} promotions
          </p>
          <div className="flex gap-2">
            <ButtonPrimary
              onClick={handlePrevPage}
              disabled={currentPage === 1}
              className="px-3 py-2 bg-lightCard dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600 disabled:opacity-50 flex items-center"
            >
              <ChevronLeft className="h-5 w-5 mr-1" /> Précédent
            </ButtonPrimary>
            <ButtonPrimary
              onClick={handleNextPage}
              disabled={currentPage === totalPages}
              className="px-3 py-2 bg-lightCard dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600 disabled:opacity-50 flex items-center"
            >
              Suivant <ChevronRight className="h-5 w-5 ml-1" />
            </ButtonPrimary>
          </div>
        </div>

        {/* Modal pour ajouter une promotion */}
        {isAddModalOpen && (
          <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center">
            <div className="bg-lightBg dark:bg-darkBg p-6 rounded-lg shadow-lg w-full max-w-2xl">
              <h2 className="text-xl font-medium text-lightText dark:text-darkText mb-4 flex items-center">
                <PlusCircle className="h-5 w-5 mr-2" /> Ajouter une promotion
              </h2>
              <form onSubmit={handleAddPromotion} className="space-y-6">
                <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-lightText dark:text-darkText mb-1">Nom</label>
                    <input
                      type="text"
                      value={newPromotion.nom}
                      onChange={(e) => setNewPromotion({ ...newPromotion, nom: e.target.value })}
                      className="w-full px-3 py-2 border border-lightBorder dark:border-darkBorder rounded-lg bg-lightCard dark:bg-darkCard text-lightText dark:text-darkText focus:outline-none focus:ring-2 focus:ring-blue-500"
                      required
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-lightText dark:text-darkText mb-1">Pourcentage (%)</label>
                    <input
                      type="number"
                      step="0.1"
                      value={newPromotion.pourcentage}
                      onChange={(e) => setNewPromotion({ ...newPromotion, pourcentage: e.target.value })}
                      className="w-full px-3 py-2 border border-lightBorder dark:border-darkBorder rounded-lg bg-lightCard dark:bg-darkCard text-lightText dark:text-darkText focus:outline-none focus:ring-2 focus:ring-blue-500"
                      required
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-lightText dark:text-darkText mb-1">Date de début</label>
                    <input
                      type="date"
                      value={newPromotion.date_debut}
                      onChange={(e) => setNewPromotion({ ...newPromotion, date_debut: e.target.value })}
                      className="w-full px-3 py-2 border border-lightBorder dark:border-darkBorder rounded-lg bg-lightCard dark:bg-darkCard text-lightText dark:text-darkText focus:outline-none focus:ring-2 focus:ring-blue-500"
                      required
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-lightText dark:text-darkText mb-1">Date de fin</label>
                    <input
                      type="date"
                      value={newPromotion.date_fin}
                      onChange={(e) => setNewPromotion({ ...newPromotion, date_fin: e.target.value })}
                      className="w-full px-3 py-2 border border-lightBorder dark:border-darkBorder rounded-lg bg-lightCard dark:bg-darkCard text-lightText dark:text-darkText focus:outline-none focus:ring-2 focus:ring-blue-500"
                      required
                    />
                  </div>
                </div>

                {/* Sélection des produits ou catégorie */}
                <div className="space-y-4">
                  <div className="flex items-center gap-4">
                    <label className="text-sm font-medium text-lightText dark:text-darkText">Appliquer à :</label>
                    <div className="flex gap-2">
                      <button
                        type="button"
                        onClick={() => setNewPromotion({ ...newPromotion, categorie: '', produits: [] })}
                        className={`px-3 py-1 rounded-lg text-sm ${newPromotion.categorie === '' ? 'bg-blue-500 text-white' : 'bg-lightCard dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600'}`}
                      >
                        Produits spécifiques
                      </button>
                      <button
                        type="button"
                        onClick={() => setNewPromotion({ ...newPromotion, produits: [], categorie: categories[0]?.id || '' })}
                        className={`px-3 py-1 rounded-lg text-sm ${newPromotion.categorie !== '' ? 'bg-blue-500 text-white' : 'bg-lightCard dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600'}`}
                      >
                        Toute une catégorie
                      </button>
                    </div>
                  </div>

                  {newPromotion.categorie === '' ? (
                    <div>
                      <label className="block text-sm font-medium text-lightText dark:text-darkText mb-1">Rechercher des produits</label>
                      <div className="relative">
                        <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400" />
                        <input
                          type="text"
                          value={productSearch}
                          onChange={handleProductSearch}
                          placeholder="Rechercher un produit..."
                          className="w-full pl-10 pr-4 py-2 border border-lightBorder dark:border-darkBorder rounded-lg bg-lightCard dark:bg-darkCard text-lightText dark:text-darkText focus:outline-none focus:ring-2 focus:ring-blue-500"
                        />
                      </div>
                      <div className="mt-2 max-h-40 overflow-y-auto border border-lightBorder dark:border-darkBorder rounded-lg bg-lightCard dark:bg-darkCard">
                        {products.map((product) => (
                          <div key={product.id} className="flex items-center px-4 py-2 hover:bg-gray-100 dark:hover:bg-gray-700">
                            <input
                              type="checkbox"
                              value={product.id}
                              checked={newPromotion.produits.includes(product.id)}
                              onChange={() => handleProductToggle(product.id, 'new')}
                              className="h-4 w-4 text-blue-500 focus:ring-blue-500 border-lightBorder dark:border-darkBorder rounded"
                            />
                            <span className="ml-2 text-sm text-lightText dark:text-darkText">{product.nom}</span>
                          </div>
                        ))}
                      </div>
                      {newPromotion.produits.length > 0 && (
                        <div className="mt-2 flex flex-wrap gap-2">
                          {newPromotion.produits.map((id) => {
                            const product = products.find((p) => p.id === id);
                            return product ? (
                              <span
                                key={id}
                                className="px-2 py-1 bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200 rounded-full text-xs flex items-center"
                              >
                                {product.nom}
                                <button
                                  type="button"
                                  onClick={() => handleProductToggle(id, 'new')}
                                  className="ml-1 text-blue-600 dark:text-blue-300 hover:text-blue-800 dark:hover:text-blue-100"
                                >
                                  ×
                                </button>
                              </span>
                            ) : null;
                          })}
                        </div>
                      )}
                    </div>
                  ) : (
                    <div>
                      <label className="block text-sm font-medium text-lightText dark:text-darkText mb-1">Sélectionner une catégorie</label>
                      <select
                        value={newPromotion.categorie}
                        onChange={(e) => handleCategorySelect(e.target.value, 'new')}
                        className="w-full px-3 py-2 border border-lightBorder dark:border-darkBorder rounded-lg bg-lightCard dark:bg-darkCard text-lightText dark:text-darkText focus:outline-none focus:ring-2 focus:ring-blue-500"
                      >
                        {categories.map((cat) => (
                          <option key={cat.id} value={cat.id}>{cat.nom}</option>
                        ))}
                      </select>
                    </div>
                  )}
                </div>

                <div className="flex gap-2 justify-end">
                  <ButtonPrimary
                    type="button"
                    onClick={closeAddModal}
                    className="px-4 py-2 bg-lightCard dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600"
                  >
                    Annuler
                  </ButtonPrimary>
                  <ButtonPrimary type="submit" className="px-4 py-2 bg-blue-500 text-white hover:bg-blue-600">
                    Ajouter
                  </ButtonPrimary>
                </div>
              </form>
            </div>
          </div>
        )}

        {/* Modal pour modifier une promotion */}
        {isEditModalOpen && selectedPromotion && (
          <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center">
            <div className="bg-lightBg dark:bg-darkBg p-6 rounded-lg shadow-lg w-full max-w-2xl">
              <h2 className="text-xl font-medium text-lightText dark:text-darkText mb-4 flex items-center">
                <Edit className="h-5 w-5 mr-2" /> Modifier la promotion
              </h2>
              <form onSubmit={handleEditPromotion} className="space-y-6">
                <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-lightText dark:text-darkText mb-1">Nom</label>
                    <input
                      type="text"
                      value={editPromotion.nom}
                      onChange={(e) => setEditPromotion({ ...editPromotion, nom: e.target.value })}
                      className="w-full px-3 py-2 border border-lightBorder dark:border-darkBorder rounded-lg bg-lightCard dark:bg-darkCard text-lightText dark:text-darkText focus:outline-none focus:ring-2 focus:ring-blue-500"
                      required
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-lightText dark:text-darkText mb-1">Pourcentage (%)</label>
                    <input
                      type="number"
                      step="0.1"
                      value={editPromotion.pourcentage}
                      onChange={(e) => setEditPromotion({ ...editPromotion, pourcentage: e.target.value })}
                      className="w-full px-3 py-2 border border-lightBorder dark:border-darkBorder rounded-lg bg-lightCard dark:bg-darkCard text-lightText dark:text-darkText focus:outline-none focus:ring-2 focus:ring-blue-500"
                      required
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-lightText dark:text-darkText mb-1">Date de début</label>
                    <input
                      type="date"
                      value={editPromotion.date_debut}
                      onChange={(e) => setEditPromotion({ ...editPromotion, date_debut: e.target.value })}
                      className="w-full px-3 py-2 border border-lightBorder dark:border-darkBorder rounded-lg bg-lightCard dark:bg-darkCard text-lightText dark:text-darkText focus:outline-none focus:ring-2 focus:ring-blue-500"
                      required
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-lightText dark:text-darkText mb-1">Date de fin</label>
                    <input
                      type="date"
                      value={editPromotion.date_fin}
                      onChange={(e) => setEditPromotion({ ...editPromotion, date_fin: e.target.value })}
                      className="w-full px-3 py-2 border border-lightBorder dark:border-darkBorder rounded-lg bg-lightCard dark:bg-darkCard text-lightText dark:text-darkText focus:outline-none focus:ring-2 focus:ring-blue-500"
                      required
                    />
                  </div>
                </div>

                <div className="space-y-4">
                  <div className="flex items-center gap-4">
                    <label className="text-sm font-medium text-lightText dark:text-darkText">Appliquer à :</label>
                    <div className="flex gap-2">
                      <button
                        type="button"
                        onClick={() => setEditPromotion({ ...editPromotion, categorie: '', produits: editPromotion.produits })}
                        className={`px-3 py-1 rounded-lg text-sm ${editPromotion.categorie === '' ? 'bg-blue-500 text-white' : 'bg-lightCard dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600'}`}
                      >
                        Produits spécifiques
                      </button>
                      <button
                        type="button"
                        onClick={() => setEditPromotion({ ...editPromotion, produits: [], categorie: categories[0]?.id || '' })}
                        className={`px-3 py-1 rounded-lg text-sm ${editPromotion.categorie !== '' ? 'bg-blue-500 text-white' : 'bg-lightCard dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600'}`}
                      >
                        Toute une catégorie
                      </button>
                    </div>
                  </div>

                  {editPromotion.categorie === '' ? (
                    <div>
                      <label className="block text-sm font-medium text-lightText dark:text-darkText mb-1">Rechercher des produits</label>
                      <div className="relative">
                        <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400" />
                        <input
                          type="text"
                          value={productSearch}
                          onChange={handleProductSearch}
                          placeholder="Rechercher un produit..."
                          className="w-full pl-10 pr-4 py-2 border border-lightBorder dark:border-darkBorder rounded-lg bg-lightCard dark:bg-darkCard text-lightText dark:text-darkText focus:outline-none focus:ring-2 focus:ring-blue-500"
                        />
                      </div>
                      <div className="mt-2 max-h-40 overflow-y-auto border border-lightBorder dark:border-darkBorder rounded-lg bg-lightCard dark:bg-darkCard">
                        {products.map((product) => (
                          <div key={product.id} className="flex items-center px-4 py-2 hover:bg-gray-100 dark:hover:bg-gray-700">
                            <input
                              type="checkbox"
                              value={product.id}
                              checked={editPromotion.produits.includes(product.id)}
                              onChange={() => handleProductToggle(product.id, 'edit')}
                              className="h-4 w-4 text-blue-500 focus:ring-blue-500 border-lightBorder dark:border-darkBorder rounded"
                            />
                            <span className="ml-2 text-sm text-lightText dark:text-darkText">{product.nom}</span>
                          </div>
                        ))}
                      </div>
                      {editPromotion.produits.length > 0 && (
                        <div className="mt-2 flex flex-wrap gap-2">
                          {editPromotion.produits.map((id) => {
                            const product = products.find((p) => p.id === id);
                            return product ? (
                              <span
                                key={id}
                                className="px-2 py-1 bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200 rounded-full text-xs flex items-center"
                              >
                                {product.nom}
                                <button
                                  type="button"
                                  onClick={() => handleProductToggle(id, 'edit')}
                                  className="ml-1 text-blue-600 dark:text-blue-300 hover:text-blue-800 dark:hover:text-blue-100"
                                >
                                  ×
                                </button>
                              </span>
                            ) : null;
                          })}
                        </div>
                      )}
                    </div>
                  ) : (
                    <div>
                      <label className="block text-sm font-medium text-lightText dark:text-darkText mb-1">Sélectionner une catégorie</label>
                      <select
                        value={editPromotion.categorie}
                        onChange={(e) => handleCategorySelect(e.target.value, 'edit')}
                        className="w-full px-3 py-2 border border-lightBorder dark:border-darkBorder rounded-lg bg-lightCard dark:bg-darkCard text-lightText dark:text-darkText focus:outline-none focus:ring-2 focus:ring-blue-500"
                      >
                        {categories.map((cat) => (
                          <option key={cat.id} value={cat.id}>{cat.nom}</option>
                        ))}
                      </select>
                    </div>
                  )}
                </div>

                <div className="flex gap-2 justify-end">
                  <ButtonPrimary
                    type="button"
                    onClick={closeEditModal}
                    className="px-4 py-2 bg-lightCard dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600"
                  >
                    Annuler
                  </ButtonPrimary>
                  <ButtonPrimary type="submit" className="px-4 py-2 bg-blue-500 text-white hover:bg-blue-600">
                    Enregistrer
                  </ButtonPrimary>
                </div>
              </form>
            </div>
          </div>
        )}

        {/* Modal pour supprimer une promotion */}
        {isDeleteModalOpen && selectedPromotion && (
          <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center">
            <div className="bg-lightBg dark:bg-darkBg p-6 rounded-lg shadow-lg w-full max-w-md">
              <h2 className="text-xl font-medium text-lightText dark:text-darkText mb-4 flex items-center">
                <Trash2 className="h-5 w-5 mr-2" /> Supprimer la promotion
              </h2>
              <p className="text-gray-700 dark:text-gray-300 mb-4">
                Êtes-vous sûr de vouloir supprimer la promotion <span className="font-medium">{selectedPromotion.nom}</span> ?
              </p>
              <div className="flex gap-2 justify-end">
                <ButtonPrimary
                  type="button"
                  onClick={closeDeleteModal}
                  className="px-4 py-2 bg-lightCard dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600"
                >
                  Annuler
                </ButtonPrimary>
                <ButtonPrimary
                  onClick={handleDeletePromotion}
                  className="px-4 py-2 bg-red-500 text-white hover:bg-red-600"
                >
                  Supprimer
                </ButtonPrimary>
              </div>
            </div>
          </div>
        )}
      </div>
    </AdminLayout>
  );
};

export default AdminPromotionsPage;

--- pages\AdminRealisationsPage.tsx ---
import React, { useState, useEffect } from 'react';
import api from '../services/api';
import AdminLayout from '../components/AdminLayout';
import ButtonPrimary from '../components/ButtonPrimary';
import { Wrench, Search, Edit, Trash2, PlusCircle, ChevronLeft, ChevronRight } from 'lucide-react';

interface Service {
  id: string;
  nom: string;
}

interface Realisation {
  id: string;
  service: string;
  titre: string;
  description: string;
  photos: string[];
  date: string;
  admin: string;
  is_active: boolean;
}

interface ApiResponse {
  results: Realisation[];
  count: number;
  next: string | null;
  previous: string | null;
}

const AdminRealisationsPage: React.FC = () => {
  const [realisations, setRealisations] = useState<Realisation[]>([]);
  const [totalRealisations, setTotalRealisations] = useState(0);
  const [currentPage, setCurrentPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [searchQuery, setSearchQuery] = useState('');
  const [services, setServices] = useState<Service[]>([]);
  const [selectedRealisation, setSelectedRealisation] = useState<Realisation | null>(null);
  const [isAddModalOpen, setIsAddModalOpen] = useState(false);
  const [isEditModalOpen, setIsEditModalOpen] = useState(false);
  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);
  const [newRealisation, setNewRealisation] = useState({ service: '', titre: '', description: '', photos: [] as File[], date: '', is_active: true });
  const [editRealisation, setEditRealisation] = useState({ service: '', titre: '', description: '', photos: [] as File[], date: '', is_active: true });
  const realisationsPerPage = 10;

  useEffect(() => {
    fetchRealisations();
    fetchServices();
  }, [currentPage, searchQuery]);

  const fetchRealisations = async () => {
    setLoading(true);
    try {
      const response = await api.get<ApiResponse>('/realisations/', {
        params: { page: currentPage, per_page: realisationsPerPage, search: searchQuery || undefined },
      });
      setRealisations(response.data.results);
      setTotalRealisations(response.data.count);
      setTotalPages(Math.ceil(response.data.count / realisationsPerPage));
      setLoading(false);
    } catch (err: any) {
      setError('Erreur lors du chargement des réalisations.');
      setLoading(false);
    }
  };

  const fetchServices = async () => {
    try {
      const response = await api.get<{ results: Service[] }>('/services/');
      setServices(response.data.results);
      console.log(response.data)
    } catch (err: any) {
      setError('Erreur lors du chargement des services.');
    }
  };

  const handleSearch = (e: React.ChangeEvent<HTMLInputElement>) => {
    setSearchQuery(e.target.value);
    setCurrentPage(1);
  };

  const handlePrevPage = () => { if (currentPage > 1) setCurrentPage(currentPage - 1); };
  const handleNextPage = () => { if (currentPage < totalPages) setCurrentPage(currentPage + 1); };

  const openAddModal = () => {
    setNewRealisation({ service: services[0]?.id || '', titre: '', description: '', photos: [], date: new Date().toISOString().split('T')[0], is_active: true });
    setIsAddModalOpen(true);
  };

  const closeAddModal = () => { setIsAddModalOpen(false); };

  const handleAddRealisation = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      const formData = new FormData();
      formData.append('service', newRealisation.service);
      formData.append('titre', newRealisation.titre);
      formData.append('description', newRealisation.description);
      newRealisation.photos.forEach((photo) => formData.append('photos', photo));
      formData.append('date', newRealisation.date);
      formData.append('is_active', newRealisation.is_active.toString());
      await api.post('/realisations/', formData, { headers: { 'Content-Type': 'multipart/form-data' } });
      setIsAddModalOpen(false);
      fetchRealisations();
    } catch (err: any) {
      setError('Erreur lors de l’ajout de la réalisation.');
    }
  };

  const openEditModal = (realisation: Realisation) => {
    setSelectedRealisation(realisation);
    setEditRealisation({ service: realisation.service, titre: realisation.titre, description: realisation.description, photos: [], date: realisation.date.split('T')[0], is_active: realisation.is_active });
    setIsEditModalOpen(true);
  };

  const closeEditModal = () => { setIsEditModalOpen(false); setSelectedRealisation(null); };

  const handleEditRealisation = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!selectedRealisation) return;
    try {
      const formData = new FormData();
      formData.append('service', editRealisation.service);
      formData.append('titre', editRealisation.titre);
      formData.append('description', editRealisation.description);
      editRealisation.photos.forEach((photo) => formData.append('photos', photo));
      formData.append('date', editRealisation.date);
      formData.append('is_active', editRealisation.is_active.toString());
      await api.put(`/realisations/${selectedRealisation.id}/`, formData, { headers: { 'Content-Type': 'multipart/form-data' } });
      setIsEditModalOpen(false);
      fetchRealisations();
    } catch (err: any) {
      setError('Erreur lors de la mise à jour de la réalisation.');
    }
  };

  const openDeleteModal = (realisation: Realisation) => { setSelectedRealisation(realisation); setIsDeleteModalOpen(true); };
  const closeDeleteModal = () => { setIsDeleteModalOpen(false); setSelectedRealisation(null); };

  const handleDeleteRealisation = async () => {
    if (!selectedRealisation) return;
    try {
      await api.delete(`/realisations/${selectedRealisation.id}/`);
      setIsDeleteModalOpen(false);
      fetchRealisations();
    } catch (err: any) {
      setError('Erreur lors de la suppression de la réalisation.');
    }
  };

  if (loading) return <div className="text-center py-16 text-lightText dark:text-darkText">Chargement...</div>;
  if (error) return <div className="text-center py-16 text-red-500">{error}</div>;

  return (
    <AdminLayout>
      <div className="max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8">
        <h1 className="text-2xl sm:text-3xl font-serif font-medium text-lightText dark:text-darkText mb-6 flex items-center">
          <Wrench className="h-6 w-6 mr-2" /> Gestion des Réalisations
        </h1>

        <div className="mb-6 flex flex-col sm:flex-row gap-4 items-center justify-between">
          <div className="relative w-full sm:w-64">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400" />
            <input
              type="text"
              value={searchQuery}
              onChange={handleSearch}
              placeholder="Rechercher par titre..."
              className="w-full pl-10 pr-4 py-2 border border-lightBorder dark:border-darkBorder rounded-lg bg-lightBg dark:bg-darkBg text-lightText dark:text-darkText focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
          </div>
          <ButtonPrimary onClick={openAddModal} className="px-4 py-2 bg-blue-500 text-white hover:bg-blue-600 flex items-center">
            <PlusCircle className="h-5 w-5 mr-2" /> Ajouter une réalisation
          </ButtonPrimary>
        </div>

        <div className="overflow-x-auto">
          <table className="w-full text-left text-sm">
            <thead className="bg-lightCard dark:bg-darkCard">
              <tr className="border-b border-lightBorder dark:border-darkBorder">
                <th className="py-3 px-4">ID</th>
                <th className="py-3 px-4">Service</th>
                <th className="py-3 px-4">Titre</th>
                <th className="py-3 px-4">Photos</th>
                <th className="py-3 px-4">Date</th>
                <th className="py-3 px-4">Statut</th>
                <th className="py-3 px-4">Actions</th>
              </tr>
            </thead>
            <tbody>
              {realisations.map((realisation) => (
                <tr key={realisation.id} className="border-b border-lightBorder dark:border-darkBorder hover:bg-gray-100 dark:hover:bg-gray-700">
                  <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{realisation.id}</td>
                  <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{realisation.service.nom}</td>
                  <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{realisation.titre}</td>
                  <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{realisation.photos.length}</td>
                  <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{new Date(realisation.date).toLocaleDateString()}</td>
                  <td className="py-3 px-4">
                    <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${realisation.is_active ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200' : 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200'}`}>
                      {realisation.is_active ? 'Actif' : 'Inactif'}
                    </span>
                  </td>
                  <td className="py-3 px-4 flex gap-2">
                    <ButtonPrimary onClick={() => openEditModal(realisation)} className="px-2 py-1 bg-blue-500 text-white hover:bg-blue-600 flex items-center text-sm">
                      <Edit className="h-4 w-4 mr-1" /> Modifier
                    </ButtonPrimary>
                    <ButtonPrimary onClick={() => openDeleteModal(realisation)} className="px-2 py-1 bg-red-500 text-white hover:bg-red-600 flex items-center text-sm">
                      <Trash2 className="h-4 w-4 mr-1" /> Supprimer
                    </ButtonPrimary>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>

        <div className="mt-6 flex flex-col sm:flex-row items-center justify-between gap-4">
          <p className="text-sm text-gray-700 dark:text-gray-300">
            Affichage de {(currentPage - 1) * realisationsPerPage + 1} à {Math.min(currentPage * realisationsPerPage, totalRealisations)} sur {totalRealisations} réalisations
          </p>
          <div className="flex gap-2">
            <ButtonPrimary onClick={handlePrevPage} disabled={currentPage === 1} className="px-3 py-2 bg-lightCard dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600 disabled:opacity-50 flex items-center">
              <ChevronLeft className="h-5 w-5 mr-1" /> Précédent
            </ButtonPrimary>
            <ButtonPrimary onClick={handleNextPage} disabled={currentPage === totalPages} className="px-3 py-2 bg-lightCard dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600 disabled:opacity-50 flex items-center">
              Suivant <ChevronRight className="h-5 w-5 ml-1" />
            </ButtonPrimary>
          </div>
        </div>

        {isAddModalOpen && (
          <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center">
            <div className="bg-lightBg dark:bg-darkBg p-6 rounded-lg shadow-lg w-full max-w-md">
              <h2 className="text-xl font-medium text-lightText dark:text-darkText mb-4 flex items-center">
                <PlusCircle className="h-5 w-5 mr-2" /> Ajouter une réalisation
              </h2>
              <form onSubmit={handleAddRealisation} className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-lightText dark:text-darkText mb-1">Service</label>
                  <select value={newRealisation.service} onChange={(e) => setNewRealisation({ ...newRealisation, service: e.target.value })} className="w-full px-3 py-2 border border-lightBorder dark:border-darkBorder rounded-lg bg-lightCard dark:bg-darkCard text-lightText dark:text-darkText focus:outline-none focus:ring-2 focus:ring-blue-500" required>
                    {services.map((service) => (
                      <option key={service.id} value={service.id}>{service.nom}</option>
                    ))}
                  </select>
                </div>
                <div>
                  <label className="block text-sm font-medium text-lightText dark:text-darkText mb-1">Titre</label>
                  <input type="text" value={newRealisation.titre} onChange={(e) => setNewRealisation({ ...newRealisation, titre: e.target.value })} className="w-full px-3 py-2 border border-lightBorder dark:border-darkBorder rounded-lg bg-lightCard dark:bg-darkCard text-lightText dark:text-darkText focus:outline-none focus:ring-2 focus:ring-blue-500" required />
                </div>
                <div>
                  <label className="block text-sm font-medium text-lightText dark:text-darkText mb-1">Description</label>
                  <textarea value={newRealisation.description} onChange={(e) => setNewRealisation({ ...newRealisation, description: e.target.value })} className="w-full px-3 py-2 border border-lightBorder dark:border-darkBorder rounded-lg bg-lightCard dark:bg-darkCard text-lightText dark:text-darkText focus:outline-none focus:ring-2 focus:ring-blue-500" rows={3} />
                </div>
                <div>
                  <label className="block text-sm font-medium text-lightText dark:text-darkText mb-1">Photos</label>
                  <input type="file" multiple onChange={(e) => setNewRealisation({ ...newRealisation, photos: Array.from(e.target.files || []) })} className="w-full px-3 py-2 border border-lightBorder dark:border-darkBorder rounded-lg bg-lightCard dark:bg-darkCard text-lightText dark:text-darkText" />
                </div>
                <div>
                  <label className="block text-sm font-medium text-lightText dark:text-darkText mb-1">Date</label>
                  <input type="date" value={newRealisation.date} onChange={(e) => setNewRealisation({ ...newRealisation, date: e.target.value })} className="w-full px-3 py-2 border border-lightBorder dark:border-darkBorder rounded-lg bg-lightCard dark:bg-darkCard text-lightText dark:text-darkText focus:outline-none focus:ring-2 focus:ring-blue-500" required />
                </div>
                <div>
                  <label className="block text-sm font-medium text-lightText dark:text-darkText mb-1">Actif</label>
                  <input type="checkbox" checked={newRealisation.is_active} onChange={(e) => setNewRealisation({ ...newRealisation, is_active: e.target.checked })} className="h-5 w-5 text-blue-500 focus:ring-blue-500 border-lightBorder dark:border-darkBorder rounded" />
                </div>
                <div className="flex gap-2 justify-end">
                  <ButtonPrimary type="button" onClick={closeAddModal} className="px-4 py-2 bg-lightCard dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600">Annuler</ButtonPrimary>
                  <ButtonPrimary type="submit" className="px-4 py-2 bg-blue-500 text-white hover:bg-blue-600">Ajouter</ButtonPrimary>
                </div>
              </form>
            </div>
          </div>
        )}

        {isEditModalOpen && selectedRealisation && (
          <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center">
            <div className="bg-lightBg dark:bg-darkBg p-6 rounded-lg shadow-lg w-full max-w-md">
              <h2 className="text-xl font-medium text-lightText dark:text-darkText mb-4 flex items-center">
                <Edit className="h-5 w-5 mr-2" /> Modifier la réalisation
              </h2>
              <form onSubmit={handleEditRealisation} className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-lightText dark:text-darkText mb-1">Service</label>
                  <select value={editRealisation.service} onChange={(e) => setEditRealisation({ ...editRealisation, service: e.target.value })} className="w-full px-3 py-2 border border-lightBorder dark:border-darkBorder rounded-lg bg-lightCard dark:bg-darkCard text-lightText dark:text-darkText focus:outline-none focus:ring-2 focus:ring-blue-500" required>
                    {services.map((service) => (
                      <option key={service.id} value={service.id}>{service.nom}</option>
                    ))}
                  </select>
                </div>
                <div>
                  <label className="block text-sm font-medium text-lightText dark:text-darkText mb-1">Titre</label>
                  <input type="text" value={editRealisation.titre} onChange={(e) => setEditRealisation({ ...editRealisation, titre: e.target.value })} className="w-full px-3 py-2 border border-lightBorder dark:border-darkBorder rounded-lg bg-lightCard dark:bg-darkCard text-lightText dark:text-darkText focus:outline-none focus:ring-2 focus:ring-blue-500" required />
                </div>
                <div>
                  <label className="block text-sm font-medium text-lightText dark:text-darkText mb-1">Description</label>
                  <textarea value={editRealisation.description} onChange={(e) => setEditRealisation({ ...editRealisation, description: e.target.value })} className="w-full px-3 py-2 border border-lightBorder dark:border-darkBorder rounded-lg bg-lightCard dark:bg-darkCard text-lightText dark:text-darkText focus:outline-none focus:ring-2 focus:ring-blue-500" rows={3} />
                </div>
                <div>
                  <label className="block text-sm font-medium text-lightText dark:text-darkText mb-1">Photos</label>
                  <input type="file" multiple onChange={(e) => setEditRealisation({ ...editRealisation, photos: Array.from(e.target.files || []) })} className="w-full px-3 py-2 border border-lightBorder dark:border-darkBorder rounded-lg bg-lightCard dark:bg-darkCard text-lightText dark:text-darkText" />
                  {selectedRealisation.photos.length > 0 && editRealisation.photos.length === 0 && (
                    <div className="mt-2 flex gap-2 flex-wrap">
                      {selectedRealisation.photos.map((photo, index) => (
                        <img key={index} src={photo} alt="Prévisualisation" className="h-16 w-16 object-cover rounded" />
                      ))}
                    </div>
                  )}
                </div>
                <div>
                  <label className="block text-sm font-medium text-lightText dark:text-darkText mb-1">Date</label>
                  <input type="date" value={editRealisation.date} onChange={(e) => setEditRealisation({ ...editRealisation, date: e.target.value })} className="w-full px-3 py-2 border border-lightBorder dark:border-darkBorder rounded-lg bg-lightCard dark:bg-darkCard text-lightText dark:text-darkText focus:outline-none focus:ring-2 focus:ring-blue-500" required />
                </div>
                <div>
                  <label className="block text-sm font-medium text-lightText dark:text-darkText mb-1">Actif</label>
                  <input type="checkbox" checked={editRealisation.is_active} onChange={(e) => setEditRealisation({ ...editRealisation, is_active: e.target.checked })} className="h-5 w-5 text-blue-500 focus:ring-blue-500 border-lightBorder dark:border-darkBorder rounded" />
                </div>
                <div className="flex gap-2 justify-end">
                  <ButtonPrimary type="button" onClick={closeEditModal} className="px-4 py-2 bg-lightCard dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600">Annuler</ButtonPrimary>
                  <ButtonPrimary type="submit" className="px-4 py-2 bg-blue-500 text-white hover:bg-blue-600">Enregistrer</ButtonPrimary>
                </div>
              </form>
            </div>
          </div>
        )}

        {isDeleteModalOpen && selectedRealisation && (
          <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center">
            <div className="bg-lightBg dark:bg-darkBg p-6 rounded-lg shadow-lg w-full max-w-md">
              <h2 className="text-xl font-medium text-lightText dark:text-darkText mb-4 flex items-center">
                <Trash2 className="h-5 w-5 mr-2" /> Supprimer la réalisation
              </h2>
              <p className="text-gray-700 dark:text-gray-300 mb-4">
                Êtes-vous sûr de vouloir supprimer la réalisation <span className="font-medium">{selectedRealisation.titre}</span> ?
              </p>
              <div className="flex gap-2 justify-end">
                <ButtonPrimary type="button" onClick={closeDeleteModal} className="px-4 py-2 bg-lightCard dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600">Annuler</ButtonPrimary>
                <ButtonPrimary onClick={handleDeleteRealisation} className="px-4 py-2 bg-red-500 text-white hover:bg-red-600">Supprimer</ButtonPrimary>
              </div>
            </div>
          </div>
        )}
      </div>
    </AdminLayout>
  );
};

export default AdminRealisationsPage;

--- pages\AdminServicesPage.tsx ---
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import api from '../services/api';
import AdminLayout from '../components/AdminLayout';
import ButtonPrimary from '../components/ButtonPrimary';
import { Wrench, Search, Edit, Trash2, PlusCircle, ChevronLeft, ChevronRight } from 'lucide-react';

interface Service {
  id: string;
  nom: string;
  description: string;
  photos: string[];
  is_active: boolean;
  date_creation: string;
}

interface ApiResponse {
  results: Service[];
  count: number;
  next: string | null;
  previous: string | null;
}

const AdminServicesPage: React.FC = () => {
  const navigate = useNavigate();
  const [services, setServices] = useState<Service[]>([]);
  const [totalServices, setTotalServices] = useState(0);
  const [currentPage, setCurrentPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedService, setSelectedService] = useState<Service | null>(null);
  const [isAddModalOpen, setIsAddModalOpen] = useState(false);
  const [isEditModalOpen, setIsEditModalOpen] = useState(false);
  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);
  const [newService, setNewService] = useState({ nom: '', description: '', photos: [], is_active: true });
  const [editService, setEditService] = useState({ nom: '', description: '', photos: [], is_active: true });
  const servicesPerPage = 10;

  useEffect(() => {
    fetchServices();
  }, [currentPage, searchQuery]);

  const fetchServices = async () => {
    setLoading(true);
    try {
      const response = await api.get<ApiResponse>('/services/', {
        params: { page: currentPage, per_page: servicesPerPage, search: searchQuery || undefined },
      });
      setServices(response.data.results);
      setTotalServices(response.data.count);
      setTotalPages(Math.ceil(response.data.count / servicesPerPage));
      setLoading(false);
    } catch (err: any) {
      setError('Erreur lors du chargement des services.');
      setLoading(false);
    }
  };

  const handleSearch = (e: React.ChangeEvent<HTMLInputElement>) => {
    setSearchQuery(e.target.value);
    setCurrentPage(1);
  };

  const handlePrevPage = () => { if (currentPage > 1) setCurrentPage(currentPage - 1); };
  const handleNextPage = () => { if (currentPage < totalPages) setCurrentPage(currentPage + 1); };

  const openAddModal = () => {
    setNewService({ nom: '', description: '', photos: [], is_active: true });
    setIsAddModalOpen(true);
  };

  const closeAddModal = () => { setIsAddModalOpen(false); };

  const handleAddService = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      await api.post('/services/', newService);
      setIsAddModalOpen(false);
      fetchServices();
    } catch (err: any) {
      setError('Erreur lors de l’ajout du service.');
    }
  };

  const openEditModal = (service: Service) => {
    setSelectedService(service);
    setEditService({ nom: service.nom, description: service.description, photos: service.photos, is_active: service.is_active });
    setIsEditModalOpen(true);
  };

  const closeEditModal = () => { setIsEditModalOpen(false); setSelectedService(null); };

  const handleEditService = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!selectedService) return;
    try {
      await api.put(`/services/${selectedService.id}/`, editService);
      setIsEditModalOpen(false);
      fetchServices();
    } catch (err: any) {
      setError('Erreur lors de la mise à jour du service.');
    }
  };

  const openDeleteModal = (service: Service) => { setSelectedService(service); setIsDeleteModalOpen(true); };
  const closeDeleteModal = () => { setIsDeleteModalOpen(false); setSelectedService(null); };

  const handleDeleteService = async () => {
    if (!selectedService) return;
    try {
      await api.delete(`/services/${selectedService.id}/`);
      setIsDeleteModalOpen(false);
      fetchServices();
    } catch (err: any) {
      setError('Erreur lors de la suppression du service.');
    }
  };

  const handlePhotoChange = (e: React.ChangeEvent<HTMLInputElement>, type: 'new' | 'edit') => {
    const files = e.target.files;
    if (files) {
      const photoUrls = Array.from(files).map(file => URL.createObjectURL(file));
      if (type === 'new') {
        setNewService({ ...newService, photos: photoUrls });
      } else {
        setEditService({ ...editService, photos: photoUrls });
      }
    }
  };

  if (loading) return <div className="text-center py-16 text-lightText dark:text-darkText">Chargement...</div>;
  if (error) return <div className="text-center py-16 text-red-500">{error}</div>;

  return (
    <AdminLayout>
      <div className="max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8">
        <h1 className="text-2xl sm:text-3xl font-serif font-medium text-lightText dark:text-darkText mb-6 flex items-center">
          <Wrench className="h-6 w-6 mr-2" /> Gestion des Services
        </h1>

        <div className="mb-6 flex flex-col sm:flex-row gap-4 items-center justify-between">
          <div className="relative w-full sm:w-64">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400" />
            <input
              type="text"
              value={searchQuery}
              onChange={handleSearch}
              placeholder="Rechercher par nom..."
              className="w-full pl-10 pr-4 py-2 border border-lightBorder dark:border-darkBorder rounded-lg bg-lightBg dark:bg-darkBg text-lightText dark:text-darkText focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
          </div>
          <ButtonPrimary onClick={openAddModal} className="px-4 py-2 bg-blue-500 text-white hover:bg-blue-600 flex items-center">
            <PlusCircle className="h-5 w-5 mr-2" /> Ajouter un service
          </ButtonPrimary>
        </div>

        <div className="overflow-x-auto">
          <table className="w-full text-left text-sm">
            <thead className="bg-lightCard dark:bg-darkCard">
              <tr className="border-b border-lightBorder dark:border-darkBorder">
                <th className="py-3 px-4">ID</th>
                <th className="py-3 px-4">Nom</th>
                <th className="py-3 px-4">Photos</th>
                <th className="py-3 px-4">Statut</th>
                <th className="py-3 px-4">Actions</th>
              </tr>
            </thead>
            <tbody>
              {services.map((service) => (
                <tr key={service.id} className="border-b border-lightBorder dark:border-darkBorder hover:bg-gray-100 dark:hover:bg-gray-700">
                  <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{service.id}</td>
                  <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{service.nom}</td>
                  <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{service.photos.length} photo(s)</td>
                  <td className="py-3 px-4">
                    <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${service.is_active ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200' : 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200'}`}>
                      {service.is_active ? 'Actif' : 'Inactif'}
                    </span>
                  </td>
                  <td className="py-3 px-4 flex gap-2">
                    <ButtonPrimary onClick={() => openEditModal(service)} className="px-2 py-1 bg-blue-500 text-white hover:bg-blue-600 flex items-center text-sm">
                      <Edit className="h-4 w-4 mr-1" /> Modifier
                    </ButtonPrimary>
                    <ButtonPrimary onClick={() => openDeleteModal(service)} className="px-2 py-1 bg-red-500 text-white hover:bg-red-600 flex items-center text-sm">
                      <Trash2 className="h-4 w-4 mr-1" /> Supprimer
                    </ButtonPrimary>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>

        <div className="mt-6 flex flex-col sm:flex-row items-center justify-between gap-4">
          <p className="text-sm text-gray-700 dark:text-gray-300">
            Affichage de {(currentPage - 1) * servicesPerPage + 1} à {Math.min(currentPage * servicesPerPage, totalServices)} sur {totalServices} services
          </p>
          <div className="flex gap-2">
            <ButtonPrimary onClick={handlePrevPage} disabled={currentPage === 1} className="px-3 py-2 bg-lightCard dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600 disabled:opacity-50 flex items-center">
              <ChevronLeft className="h-5 w-5 mr-1" /> Précédent
            </ButtonPrimary>
            <ButtonPrimary onClick={handleNextPage} disabled={currentPage === totalPages} className="px-3 py-2 bg-lightCard dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600 disabled:opacity-50 flex items-center">
              Suivant <ChevronRight className="h-5 w-5 ml-1" />
            </ButtonPrimary>
          </div>
        </div>

        {isAddModalOpen && (
          <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center">
            <div className="bg-lightBg dark:bg-darkBg p-6 rounded-lg shadow-lg w-full max-w-md">
              <h2 className="text-xl font-medium text-lightText dark:text-darkText mb-4 flex items-center">
                <PlusCircle className="h-5 w-5 mr-2" /> Ajouter un service
              </h2>
              <form onSubmit={handleAddService} className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-lightText dark:text-darkText mb-1">Nom</label>
                  <input type="text" value={newService.nom} onChange={(e) => setNewService({ ...newService, nom: e.target.value })} className="w-full px-3 py-2 border border-lightBorder dark:border-darkBorder rounded-lg bg-lightCard dark:bg-darkCard text-lightText dark:text-darkText focus:outline-none focus:ring-2 focus:ring-blue-500" required />
                </div>
                <div>
                  <label className="block text-sm font-medium text-lightText dark:text-darkText mb-1">Description</label>
                  <textarea value={newService.description} onChange={(e) => setNewService({ ...newService, description: e.target.value })} className="w-full px-3 py-2 border border-lightBorder dark:border-darkBorder rounded-lg bg-lightCard dark:bg-darkCard text-lightText dark:text-darkText focus:outline-none focus:ring-2 focus:ring-blue-500" rows={3} />
                </div>
                <div>
                  <label className="block text-sm font-medium text-lightText dark:text-darkText mb-1">Photos</label>
                  <input type="file" multiple onChange={(e) => handlePhotoChange(e, 'new')} className="w-full px-3 py-2 border border-lightBorder dark:border-darkBorder rounded-lg bg-lightCard dark:bg-darkCard text-lightText dark:text-darkText" />
                </div>
                <div>
                  <label className="block text-sm font-medium text-lightText dark:text-darkText mb-1">Actif</label>
                  <input type="checkbox" checked={newService.is_active} onChange={(e) => setNewService({ ...newService, is_active: e.target.checked })} className="h-5 w-5 text-blue-500 focus:ring-blue-500 border-lightBorder dark:border-darkBorder rounded" />
                </div>
                <div className="flex gap-2 justify-end">
                  <ButtonPrimary type="button" onClick={closeAddModal} className="px-4 py-2 bg-lightCard dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600">Annuler</ButtonPrimary>
                  <ButtonPrimary type="submit" className="px-4 py-2 bg-blue-500 text-white hover:bg-blue-600">Ajouter</ButtonPrimary>
                </div>
              </form>
            </div>
          </div>
        )}

        {isEditModalOpen && selectedService && (
          <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center">
            <div className="bg-lightBg dark:bg-darkBg p-6 rounded-lg shadow-lg w-full max-w-md">
              <h2 className="text-xl font-medium text-lightText dark:text-darkText mb-4 flex items-center">
                <Edit className="h-5 w-5 mr-2" /> Modifier le service
              </h2>
              <form onSubmit={handleEditService} className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-lightText dark:text-darkText mb-1">Nom</label>
                  <input type="text" value={editService.nom} onChange={(e) => setEditService({ ...editService, nom: e.target.value })} className="w-full px-3 py-2 border border-lightBorder dark:border-darkBorder rounded-lg bg-lightCard dark:bg-darkCard text-lightText dark:text-darkText focus:outline-none focus:ring-2 focus:ring-blue-500" required />
                </div>
                <div>
                  <label className="block text-sm font-medium text-lightText dark:text-darkText mb-1">Description</label>
                  <textarea value={editService.description} onChange={(e) => setEditService({ ...editService, description: e.target.value })} className="w-full px-3 py-2 border border-lightBorder dark:border-darkBorder rounded-lg bg-lightCard dark:bg-darkCard text-lightText dark:text-darkText focus:outline-none focus:ring-2 focus:ring-blue-500" rows={3} />
                </div>
                <div>
                  <label className="block text-sm font-medium text-lightText dark:text-darkText mb-1">Photos</label>
                  <input type="file" multiple onChange={(e) => handlePhotoChange(e, 'edit')} className="w-full px-3 py-2 border border-lightBorder dark:border-darkBorder rounded-lg bg-lightCard dark:bg-darkCard text-lightText dark:text-darkText" />
                </div>
                <div>
                  <label className="block text-sm font-medium text-lightText dark:text-darkText mb-1">Actif</label>
                  <input type="checkbox" checked={editService.is_active} onChange={(e) => setEditService({ ...editService, is_active: e.target.checked })} className="h-5 w-5 text-blue-500 focus:ring-blue-500 border-lightBorder dark:border-darkBorder rounded" />
                </div>
                <div className="flex gap-2 justify-end">
                  <ButtonPrimary type="button" onClick={closeEditModal} className="px-4 py-2 bg-lightCard dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600">Annuler</ButtonPrimary>
                  <ButtonPrimary type="submit" className="px-4 py-2 bg-blue-500 text-white hover:bg-blue-600">Enregistrer</ButtonPrimary>
                </div>
              </form>
            </div>
          </div>
        )}

        {isDeleteModalOpen && selectedService && (
          <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center">
            <div className="bg-lightBg dark:bg-darkBg p-6 rounded-lg shadow-lg w-full max-w-md">
              <h2 className="text-xl font-medium text-lightText dark:text-darkText mb-4 flex items-center">
                <Trash2 className="h-5 w-5 mr-2" /> Supprimer le service
              </h2>
              <p className="text-gray-700 dark:text-gray-300 mb-4">
                Êtes-vous sûr de vouloir supprimer le service <span className="font-medium">{selectedService.nom}</span> ?
              </p>
              <div className="flex gap-2 justify-end">
                <ButtonPrimary type="button" onClick={closeDeleteModal} className="px-4 py-2 bg-lightCard dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600">Annuler</ButtonPrimary>
                <ButtonPrimary onClick={handleDeleteService} className="px-4 py-2 bg-red-500 text-white hover:bg-red-600">Supprimer</ButtonPrimary>
              </div>
            </div>
          </div>
        )}
      </div>
    </AdminLayout>
  );
};

export default AdminServicesPage;

--- pages\AdminUserBansPage.tsx ---
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { getUsers, updateUser } from '../services/api';
import AdminLayout from '../components/AdminLayout';
import ButtonPrimary from '../components/ButtonPrimary';
import { Users, Search, XCircle, CheckCircle, ChevronLeft, ChevronRight, Ban } from 'lucide-react';

interface User {
  id: string;
  username: string;
  email: string;
  role: string;
  is_active: boolean;
  is_banned: boolean;
  date_creation: string;
  last_login: string | null;
}

interface ApiResponse {
  results: User[];
  count: number;
  next: string | null;
  previous: string | null;
}

const AdminUserBansPage: React.FC = () => {
  const navigate = useNavigate();
  const [bannedUsers, setBannedUsers] = useState<User[]>([]);
  const [totalUsers, setTotalUsers] = useState(0);
  const [currentPage, setCurrentPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedUser, setSelectedUser] = useState<User | null>(null);
  const [isUnbanModalOpen, setIsUnbanModalOpen] = useState(false);
  const [isBanModalOpen, setIsBanModalOpen] = useState(false);
  const usersPerPage = 10;

  useEffect(() => {
    fetchBannedUsers();
  }, [currentPage, searchQuery]);

  const fetchBannedUsers = async () => {
    setLoading(true);
    try {
      const response = await getUsers({
        page: currentPage,
        per_page: usersPerPage,
        search: searchQuery || undefined,
        is_banned: 'true', // Filtrer uniquement les utilisateurs bannis
      });
      setBannedUsers(response.data.results);
      setTotalUsers(response.data.count);
      setTotalPages(Math.ceil(response.data.count / usersPerPage));
      setLoading(false);
    } catch (err: any) {
      console.error('Erreur lors du chargement des utilisateurs bannis:', err.response?.data);
      setError('Erreur lors du chargement des utilisateurs bannis.');
      setLoading(false);
    }
  };

  const handleSearch = (e: React.ChangeEvent<HTMLInputElement>) => {
    setSearchQuery(e.target.value);
    setCurrentPage(1);
  };

  const handlePrevPage = () => {
    if (currentPage > 1) setCurrentPage(currentPage - 1);
  };

  const handleNextPage = () => {
    if (currentPage < totalPages) setCurrentPage(currentPage + 1);
  };

  const openUnbanModal = (user: User) => {
    setSelectedUser(user);
    setIsUnbanModalOpen(true);
  };

  const closeUnbanModal = () => {
    setIsUnbanModalOpen(false);
    setSelectedUser(null);
  };

  const handleUnbanUser = async () => {
    if (!selectedUser) return;

    try {
      await updateUser(selectedUser.id, { is_banned: false, is_active: true });
      setIsUnbanModalOpen(false);
      fetchBannedUsers();
    } catch (err: any) {
      console.error('Erreur lors du dé-bannissement de l’utilisateur:', err.response?.data);
      setError('Erreur lors du dé-bannissement de l’utilisateur.');
    }
  };

  const openBanModal = () => {
    setIsBanModalOpen(true);
  };

  const closeBanModal = () => {
    setIsBanModalOpen(false);
    setSelectedUser(null);
  };

  const handleBanUser = async (email: string) => {
    try {
      const response = await getUsers({ search: email });
      const userToBan = response.data.results.find((u: User) => u.email === email);
      if (!userToBan) {
        setError('Utilisateur non trouvé.');
        return;
      }
      if (userToBan.is_banned) {
        setError('Cet utilisateur est déjà banni.');
        return;
      }
      await updateUser(userToBan.id, { is_banned: true, is_active: false });
      setIsBanModalOpen(false);
      fetchBannedUsers();
    } catch (err: any) {
      console.error('Erreur lors du bannissement de l’utilisateur:', err.response?.data);
      setError('Erreur lors du bannissement de l’utilisateur.');
    }
  };

  if (loading) {
    return <div className="text-center py-16 text-lightText dark:text-darkText">Chargement...</div>;
  }

  if (error) {
    return <div className="text-center py-16 text-red-500">{error}</div>;
  }

  return (
    <AdminLayout>
      <div className="max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8">
        <h1 className="text-2xl sm:text-3xl font-serif font-medium text-lightText dark:text-darkText mb-4 sm:mb-6 flex items-center">
          <Ban className="h-6 w-6 mr-2" /> Gestion des Bannissements
        </h1>

        {/* Recherche et Bouton Bannir */}
        <div className="mb-6 flex flex-col sm:flex-row gap-4 items-center justify-between">
          <div className="relative w-full sm:w-64">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400" />
            <input
              type="text"
              value={searchQuery}
              onChange={handleSearch}
              placeholder="Rechercher par email ou nom..."
              className="w-full pl-10 pr-4 py-2 border border-lightBorder dark:border-darkBorder rounded-lg bg-lightBg dark:bg-darkBg text-lightText dark:text-darkText focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
          </div>
          <ButtonPrimary
            onClick={openBanModal}
            className="px-4 py-2 bg-red-500 text-white hover:bg-red-600 flex items-center"
          >
            <Ban className="h-5 w-5 mr-2" /> Bannir un utilisateur
          </ButtonPrimary>
        </div>

        {/* Liste des utilisateurs bannis */}
        <div className="overflow-x-auto">
          <table className="w-full text-left text-sm">
            <thead className="bg-lightCard dark:bg-darkCard">
              <tr className="border-b border-lightBorder dark:border-darkBorder">
                <th className="py-3 px-4 text-lightText dark:text-darkText">ID</th>
                <th className="py-3 px-4 text-lightText dark:text-darkText">Nom</th>
                <th className="py-3 px-4 text-lightText dark:text-darkText">Email</th>
                <th className="py-3 px-4 text-lightText dark:text-darkText">Rôle</th>
                <th className="py-3 px-4 text-lightText dark:text-darkText">Statut</th>
                <th className="py-3 px-4 text-lightText dark:text-darkText">Créé le</th>
                <th className="py-3 px-4 text-lightText dark:text-darkText">Dernière connexion</th>
                <th className="py-3 px-4 text-lightText dark:text-darkText">Actions</th>
              </tr>
            </thead>
            <tbody>
              {bannedUsers.map((user) => (
                <tr key={user.id} className="border-b border-lightBorder dark:border-darkBorder hover:bg-gray-100 dark:hover:bg-gray-700">
                  <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{user.id}</td>
                  <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{user.username}</td>
                  <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{user.email}</td>
                  <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{user.role}</td>
                  <td className="py-3 px-4">
                    {user.is_banned && (
                    <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200">
                      <XCircle className="h-4 w-4 mr-1" /> Banni
                    </span>)}
                  </td>
                    
                  <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{new Date(user.date_creation).toLocaleDateString()}</td>
                  <td className="py-3 px-4 text-gray-700 dark:text-gray-300">
                    {user.last_login ? new Date(user.last_login).toLocaleDateString() : 'Jamais'}
                  </td>
                  <td className="py-3 px-4">
                    {user.is_banned && 
                        (
                            <ButtonPrimary
                      onClick={() => openUnbanModal(user)}
                      className="px-2 py-1 bg-green-500 text-white hover:bg-green-600 flex items-center text-sm"
                    >
                      <CheckCircle className="h-4 w-4 mr-1" /> Lever le ban
                    </ButtonPrimary>
                        )
                    }
                    
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>

        {/* Pagination */}
        <div className="mt-6 flex flex-col sm:flex-row items-center justify-between gap-4">
          <p className="text-sm text-gray-700 dark:text-gray-300">
            Affichage de {(currentPage - 1) * usersPerPage + 1} à{' '}
            {Math.min(currentPage * usersPerPage, totalUsers)} sur {totalUsers} utilisateurs bannis
          </p>
          <div className="flex gap-2">
            <ButtonPrimary
              onClick={handlePrevPage}
              disabled={currentPage === 1}
              className="px-3 py-2 bg-lightCard dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600 disabled:opacity-50 flex items-center"
            >
              <ChevronLeft className="h-5 w-5 mr-1" /> Précédent
            </ButtonPrimary>
            <ButtonPrimary
              onClick={handleNextPage}
              disabled={currentPage === totalPages}
              className="px-3 py-2 bg-lightCard dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600 disabled:opacity-50 flex items-center"
            >
              Suivant <ChevronRight className="h-5 w-5 ml-1" />
            </ButtonPrimary>
          </div>
        </div>

        {/* Modal pour lever un ban */}
        {isUnbanModalOpen && selectedUser && (
          <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center">
            <div className="bg-lightBg dark:bg-darkBg p-6 rounded-lg shadow-lg w-full max-w-md">
              <h2 className="text-xl font-medium text-lightText dark:text-darkText mb-4 flex items-center">
                <CheckCircle className="h-5 w-5 mr-2" /> Lever le bannissement
              </h2>
              <p className="text-gray-700 dark:text-gray-300 mb-4">
                Êtes-vous sûr de vouloir lever le bannissement de <span className="font-medium">{selectedUser.email}</span> ?
              </p>
              <div className="flex gap-2 justify-end">
                <ButtonPrimary
                  type="button"
                  onClick={closeUnbanModal}
                  className="px-4 py-2 bg-lightCard dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600"
                >
                  Annuler
                </ButtonPrimary>
                <ButtonPrimary
                  onClick={handleUnbanUser}
                  className="px-4 py-2 bg-green-500 text-white hover:bg-green-600"
                >
                  Confirmer
                </ButtonPrimary>
              </div>
            </div>
          </div>
        )}

        {/* Modal pour bannir un utilisateur */}
        {isBanModalOpen && (
          <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center">
            <div className="bg-lightBg dark:bg-darkBg p-6 rounded-lg shadow-lg w-full max-w-md">
              <h2 className="text-xl font-medium text-lightText dark:text-darkText mb-4 flex items-center">
                <Ban className="h-5 w-5 mr-2" /> Bannir un utilisateur
              </h2>
              <form
                onSubmit={(e) => {
                  e.preventDefault();
                  const email = (e.target as any).email.value;
                  handleBanUser(email);
                }}
                className="space-y-4"
              >
                <div>
                  <label className="block text-sm font-medium text-lightText dark:text-darkText mb-1">Email de l’utilisateur</label>
                  <input
                    type="email"
                    name="email"
                    className="w-full px-3 py-2 border border-lightBorder dark:border-darkBorder rounded-lg bg-lightCard dark:bg-darkCard text-lightText dark:text-darkText focus:outline-none focus:ring-2 focus:ring-blue-500"
                    required
                  />
                </div>
                <div className="flex gap-2 justify-end">
                  <ButtonPrimary
                    type="button"
                    onClick={closeBanModal}
                    className="px-4 py-2 bg-lightCard dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600"
                  >
                    Annuler
                  </ButtonPrimary>
                  <ButtonPrimary type="submit" className="px-4 py-2 bg-red-500 text-white hover:bg-red-600">
                    Bannir
                  </ButtonPrimary>
                </div>
              </form>
            </div>
          </div>
        )}
      </div>
    </AdminLayout>
  );
};

export default AdminUserBansPage;

--- pages\AdminUsersPage.tsx ---
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { getUsers, createUser, updateUser, deleteUser } from '../services/api'; // Importez depuis api.ts
import AdminLayout from '../components/AdminLayout';
import ButtonPrimary from '../components/ButtonPrimary';
import { Users, Search, Filter, Edit, Trash2, PlusCircle, CheckCircle, XCircle, ChevronLeft, ChevronRight } from 'lucide-react';

interface User {
  id: string;
  username: string;
  email: string;
  role: string;
  is_active: boolean;
  is_banned: boolean;
  date_creation: string;
  last_login: string | null;
}

interface ApiResponse {
  results: User[]; // Avec pagination
  count: number;
  next: string | null;
  previous: string | null;
}

const AdminUsersPage: React.FC = () => {
  const navigate = useNavigate();
  const [users, setUsers] = useState<User[]>([]);
  const [totalUsers, setTotalUsers] = useState(0);
  const [currentPage, setCurrentPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [searchQuery, setSearchQuery] = useState('');
  const [filterRole, setFilterRole] = useState<string>('all');
  const [filterStatus, setFilterStatus] = useState<string>('all');
  const [selectedUser, setSelectedUser] = useState<User | null>(null);
  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);
  const [isEditModalOpen, setIsEditModalOpen] = useState(false);
  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);
  const [newUser, setNewUser] = useState({ email: '', username: '', password: '', role: 'client' });
  const [editUser, setEditUser] = useState({ email: '', username: '', role: '', is_active: true, is_banned: false });
  const usersPerPage = 10;

  useEffect(() => {
    fetchUsers();
  }, [currentPage, searchQuery, filterRole, filterStatus]);

  const fetchUsers = async () => {
    setLoading(true);
    try {
      const statusFilter = filterStatus === 'all' ? undefined : filterStatus === 'active' ? 'true' : 'false';
      const response = await getUsers({
        page: currentPage,
        per_page: usersPerPage,
        search: searchQuery || undefined,
        role: filterRole !== 'all' ? filterRole : undefined,
        is_active: statusFilter,
      });
      setUsers(response.data.results);
      setTotalUsers(response.data.count);
      setTotalPages(Math.ceil(response.data.count / usersPerPage));
      setLoading(false);
    } catch (err: any) {
      console.error('Erreur lors du chargement des utilisateurs:', err.response?.data);
      setError('Erreur lors du chargement des utilisateurs.');
      setLoading(false);
    }
  };

  const handleSearch = (e: React.ChangeEvent<HTMLInputElement>) => {
    setSearchQuery(e.target.value);
    setCurrentPage(1);
  };

  const handleFilterRole = (e: React.ChangeEvent<HTMLSelectElement>) => {
    setFilterRole(e.target.value);
    setCurrentPage(1);
  };

  const handleFilterStatus = (e: React.ChangeEvent<HTMLSelectElement>) => {
    setFilterStatus(e.target.value);
    setCurrentPage(1);
  };

  const handlePrevPage = () => {
    if (currentPage > 1) setCurrentPage(currentPage - 1);
  };

  const handleNextPage = () => {
    if (currentPage < totalPages) setCurrentPage(currentPage + 1);
  };

  const openCreateModal = () => {
    setNewUser({ email: '', username: '', password: '', role: 'client' });
    setIsCreateModalOpen(true);
  };

  const closeCreateModal = () => {
    setIsCreateModalOpen(false);
  };

  const handleCreateUser = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      await createUser(newUser);
      setIsCreateModalOpen(false);
      fetchUsers();
    } catch (err: any) {
      console.error('Erreur lors de la création de l’utilisateur:', err.response?.data);
      setError('Erreur lors de la création de l’utilisateur.');
    }
  };

  const openEditModal = (user: User) => {
    setSelectedUser(user);
    setEditUser({
      email: user.email,
      username: user.username,
      role: user.role,
      is_active: user.is_active,
      is_banned: user.is_banned,
    });
    setIsEditModalOpen(true);
  };

  const closeEditModal = () => {
    setIsEditModalOpen(false);
    setSelectedUser(null);
  };

  const handleEditUser = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!selectedUser) return;

    try {
      await updateUser(selectedUser.id, editUser);
      setIsEditModalOpen(false);
      fetchUsers();
    } catch (err: any) {
      console.error('Erreur lors de la mise à jour de l’utilisateur:', err.response?.data);
      setError('Erreur lors de la mise à jour de l’utilisateur.');
    }
  };

  const openDeleteModal = (user: User) => {
    setSelectedUser(user);
    setIsDeleteModalOpen(true);
  };

  const closeDeleteModal = () => {
    setIsDeleteModalOpen(false);
    setSelectedUser(null);
  };

  const handleDeleteUser = async () => {
    if (!selectedUser) return;

    try {
      await deleteUser(selectedUser.id);
      setIsDeleteModalOpen(false);
      fetchUsers();
    } catch (err: any) {
      console.error('Erreur lors de la suppression de l’utilisateur:', err.response?.data);
      setError('Erreur lors de la suppression de l’utilisateur.');
    }
  };

  if (loading) {
    return <div className="text-center py-16 text-lightText dark:text-darkText">Chargement...</div>;
  }

  if (error) {
    return <div className="text-center py-16 text-red-500">{error}</div>;
  }

  return (
    <AdminLayout>
      <div className="max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8">
        <h1 className="text-2xl sm:text-3xl font-serif font-medium text-lightText dark:text-darkText mb-4 sm:mb-6 flex items-center">
          <Users className="h-6 w-6 mr-2" /> Gestion des Utilisateurs
        </h1>

        {/* Filtres et Recherche */}
        <div className="mb-6 flex flex-col sm:flex-row gap-4 items-center justify-between">
          <div className="flex flex-col sm:flex-row gap-4 w-full sm:w-auto">
            <div className="relative w-full sm:w-64">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400" />
              <input
                type="text"
                value={searchQuery}
                onChange={handleSearch}
                placeholder="Rechercher par email ou nom..."
                className="w-full pl-10 pr-4 py-2 border border-lightBorder dark:border-darkBorder rounded-lg bg-lightBg dark:bg-darkBg text-lightText dark:text-darkText focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
            </div>
            <div className="flex gap-2">
              <select
                value={filterRole}
                onChange={handleFilterRole}
                className="px-4 py-2 border border-lightBorder dark:border-darkBorder rounded-lg bg-lightBg dark:bg-darkBg text-lightText dark:text-darkText focus:outline-none focus:ring-2 focus:ring-blue-500"
              >
                <option value="all">Tous les rôles</option>
                <option value="admin">Admin</option>
                <option value="client">Client</option>
              </select>
              <select
                value={filterStatus}
                onChange={handleFilterStatus}
                className="px-4 py-2 border border-lightBorder dark:border-darkBorder rounded-lg bg-lightBg dark:bg-darkBg text-lightText dark:text-darkText focus:outline-none focus:ring-2 focus:ring-blue-500"
              >
                <option value="all">Tous les statuts</option>
                <option value="active">Actif</option>
                <option value="inactive">Inactif</option>
              </select>
            </div>
          </div>
          <ButtonPrimary
            onClick={openCreateModal}
            className="px-4 py-2 bg-blue-500 text-white hover:bg-blue-600 flex items-center"
          >
            <PlusCircle className="h-5 w-5 mr-2" /> Ajouter un utilisateur
          </ButtonPrimary>
        </div>

        {/* Liste des utilisateurs */}
        <div className="overflow-x-auto">
          <table className="w-full text-left text-sm">
            <thead className="bg-lightCard dark:bg-darkCard">
              <tr className="border-b border-lightBorder dark:border-darkBorder">
                <th className="py-3 px-4 text-lightText dark:text-darkText">ID</th>
                <th className="py-3 px-4 text-lightText dark:text-darkText">Nom</th>
                <th className="py-3 px-4 text-lightText dark:text-darkText">Email</th>
                <th className="py-3 px-4 text-lightText dark:text-darkText">Rôle</th>
                <th className="py-3 px-4 text-lightText dark:text-darkText">Statut</th>
                <th className="py-3 px-4 text-lightText dark:text-darkText">Créé le</th>
                <th className="py-3 px-4 text-lightText dark:text-darkText">Dernière connexion</th>
                <th className="py-3 px-4 text-lightText dark:text-darkText">Actions</th>
              </tr>
            </thead>
            <tbody>
              {users.map((user) => (
                <tr key={user.id} className="border-b border-lightBorder dark:border-darkBorder hover:bg-gray-100 dark:hover:bg-gray-700">
                  <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{user.id}</td>
                  <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{user.username}</td>
                  <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{user.email}</td>
                  <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{user.role}</td>
                  <td className="py-3 px-4">
                    <span
                      className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${
                        user.is_active && !user.is_banned
                          ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200'
                          : user.is_banned
                          ? 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200'
                          : 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200'
                      }`}
                    >
                      {user.is_active && !user.is_banned ? (
                        <CheckCircle className="h-4 w-4 mr-1" />
                      ) : (
                        <XCircle className="h-4 w-4 mr-1" />
                      )}
                      {user.is_active && !user.is_banned ? 'Actif' : user.is_banned ? 'Banni' : 'Inactif'}
                    </span>
                  </td>
                  <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{new Date(user.date_creation).toLocaleDateString()}</td>
                  <td className="py-3 px-4 text-gray-700 dark:text-gray-300">
                    {user.last_login ? new Date(user.last_login).toLocaleDateString() : 'Jamais'}
                  </td>
                  <td className="py-3 px-4 flex gap-2">
                    <button
                      onClick={() => openEditModal(user)}
                      className="p-1 text-blue-500 hover:text-blue-700"
                    >
                      <Edit className="h-5 w-5" />
                    </button>
                    <button
                      onClick={() => openDeleteModal(user)}
                      className="p-1 text-red-500 hover:text-red-700"
                    >
                      <Trash2 className="h-5 w-5" />
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>

        {/* Pagination */}
        <div className="mt-6 flex flex-col sm:flex-row items-center justify-between gap-4">
          <p className="text-sm text-gray-700 dark:text-gray-300">
            Affichage de {(currentPage - 1) * usersPerPage + 1} à{' '}
            {Math.min(currentPage * usersPerPage, totalUsers)} sur {totalUsers} utilisateurs
          </p>
          <div className="flex gap-2">
            <ButtonPrimary
              onClick={handlePrevPage}
              disabled={currentPage === 1}
              className="px-3 py-2 bg-lightCard dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600 disabled:opacity-50 flex items-center"
            >
              <ChevronLeft className="h-5 w-5 mr-1" /> Précédent
            </ButtonPrimary>
            <ButtonPrimary
              onClick={handleNextPage}
              disabled={currentPage === totalPages}
              className="px-3 py-2 bg-lightCard dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600 disabled:opacity-50 flex items-center"
            >
              Suivant <ChevronRight className="h-5 w-5 ml-1" />
            </ButtonPrimary>
          </div>
        </div>

        {/* Modal de création */}
        {isCreateModalOpen && (
          <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center">
            <div className="bg-lightBg dark:bg-darkBg p-6 rounded-lg shadow-lg w-full max-w-md">
              <h2 className="text-xl font-medium text-lightText dark:text-darkText mb-4 flex items-center">
                <PlusCircle className="h-5 w-5 mr-2" /> Ajouter un utilisateur
              </h2>
              <form onSubmit={handleCreateUser} className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-lightText dark:text-darkText mb-1">Nom d’utilisateur</label>
                  <input
                    type="text"
                    value={newUser.username}
                    onChange={(e) => setNewUser({ ...newUser, username: e.target.value })}
                    className="w-full px-3 py-2 border border-lightBorder dark:border-darkBorder rounded-lg bg-lightCard dark:bg-darkCard text-lightText dark:text-darkText focus:outline-none focus:ring-2 focus:ring-blue-500"
                    required
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-lightText dark:text-darkText mb-1">Email</label>
                  <input
                    type="email"
                    value={newUser.email}
                    onChange={(e) => setNewUser({ ...newUser, email: e.target.value })}
                    className="w-full px-3 py-2 border border-lightBorder dark:border-darkBorder rounded-lg bg-lightCard dark:bg-darkCard text-lightText dark:text-darkText focus:outline-none focus:ring-2 focus:ring-blue-500"
                    required
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-lightText dark:text-darkText mb-1">Mot de passe</label>
                  <input
                    type="password"
                    value={newUser.password}
                    onChange={(e) => setNewUser({ ...newUser, password: e.target.value })}
                    className="w-full px-3 py-2 border border-lightBorder dark:border-darkBorder rounded-lg bg-lightCard dark:bg-darkCard text-lightText dark:text-darkText focus:outline-none focus:ring-2 focus:ring-blue-500"
                    required
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-lightText dark:text-darkText mb-1">Rôle</label>
                  <select
                    value={newUser.role}
                    onChange={(e) => setNewUser({ ...newUser, role: e.target.value })}
                    className="w-full px-3 py-2 border border-lightBorder dark:border-darkBorder rounded-lg bg-lightCard dark:bg-darkCard text-lightText dark:text-darkText focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="client">Client</option>
                    <option value="admin">Admin</option>
                  </select>
                </div>
                <div className="flex gap-2 justify-end">
                  <ButtonPrimary
                    type="button"
                    onClick={closeCreateModal}
                    className="px-4 py-2 bg-lightCard dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600"
                  >
                    Annuler
                  </ButtonPrimary>
                  <ButtonPrimary type="submit" className="px-4 py-2 bg-blue-500 text-white hover:bg-blue-600">
                    Créer
                  </ButtonPrimary>
                </div>
              </form>
            </div>
          </div>
        )}

        {/* Modal d’édition */}
        {isEditModalOpen && selectedUser && (
          <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center">
            <div className="bg-lightBg dark:bg-darkBg p-6 rounded-lg shadow-lg w-full max-w-md">
              <h2 className="text-xl font-medium text-lightText dark:text-darkText mb-4 flex items-center">
                <Edit className="h-5 w-5 mr-2" /> Modifier l’utilisateur
              </h2>
              <form onSubmit={handleEditUser} className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-lightText dark:text-darkText mb-1">Nom d’utilisateur</label>
                  <input
                    type="text"
                    value={editUser.username}
                    onChange={(e) => setEditUser({ ...editUser, username: e.target.value })}
                    className="w-full px-3 py-2 border border-lightBorder dark:border-darkBorder rounded-lg bg-lightCard dark:bg-darkCard text-lightText dark:text-darkText focus:outline-none focus:ring-2 focus:ring-blue-500"
                    required
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-lightText dark:text-darkText mb-1">Email</label>
                  <input
                    type="email"
                    value={editUser.email}
                    onChange={(e) => setEditUser({ ...editUser, email: e.target.value })}
                    className="w-full px-3 py-2 border border-lightBorder dark:border-darkBorder rounded-lg bg-lightCard dark:bg-darkCard text-lightText dark:text-darkText focus:outline-none focus:ring-2 focus:ring-blue-500"
                    required
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-lightText dark:text-darkText mb-1">Rôle</label>
                  <select
                    value={editUser.role}
                    onChange={(e) => setEditUser({ ...editUser, role: e.target.value })}
                    className="w-full px-3 py-2 border border-lightBorder dark:border-darkBorder rounded-lg bg-lightCard dark:bg-darkCard text-lightText dark:text-darkText focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="client">Client</option>
                    <option value="admin">Admin</option>
                  </select>
                </div>
                <div>
                  <label className="block text-sm font-medium text-lightText dark:text-darkText mb-1">Actif</label>
                  <input
                    type="checkbox"
                    checked={editUser.is_active}
                    onChange={(e) => setEditUser({ ...editUser, is_active: e.target.checked })}
                    className="h-5 w-5 text-blue-500 focus:ring-blue-500 border-lightBorder dark:border-darkBorder rounded"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-lightText dark:text-darkText mb-1">Banni</label>
                  <input
                    type="checkbox"
                    checked={editUser.is_banned}
                    onChange={(e) => setEditUser({ ...editUser, is_banned: e.target.checked })}
                    className="h-5 w-5 text-blue-500 focus:ring-blue-500 border-lightBorder dark:border-darkBorder rounded"
                  />
                </div>
                <div className="flex gap-2 justify-end">
                  <ButtonPrimary
                    type="button"
                    onClick={closeEditModal}
                    className="px-4 py-2 bg-lightCard dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600"
                  >
                    Annuler
                  </ButtonPrimary>
                  <ButtonPrimary type="submit" className="px-4 py-2 bg-blue-500 text-white hover:bg-blue-600">
                    Enregistrer
                  </ButtonPrimary>
                </div>
              </form>
            </div>
          </div>
        )}

        {/* Modal de suppression */}
        {isDeleteModalOpen && selectedUser && (
          <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center">
            <div className="bg-lightBg dark:bg-darkBg p-6 rounded-lg shadow-lg w-full max-w-md">
              <h2 className="text-xl font-medium text-lightText dark:text-darkText mb-4 flex items-center">
                <Trash2 className="h-5 w-5 mr-2" /> Supprimer l’utilisateur
              </h2>
              <p className="text-gray-700 dark:text-gray-300 mb-4">
                Êtes-vous sûr de vouloir supprimer l’utilisateur <span className="font-medium">{selectedUser.email}</span> ? Cette action est irréversible.
              </p>
              <div className="flex gap-2 justify-end">
                <ButtonPrimary
                  type="button"
                  onClick={closeDeleteModal}
                  className="px-4 py-2 bg-lightCard dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600"
                >
                  Annuler
                </ButtonPrimary>
                <ButtonPrimary
                  onClick={handleDeleteUser}
                  className="px-4 py-2 bg-red-500 text-white hover:bg-red-600"
                >
                  Supprimer
                </ButtonPrimary>
              </div>
            </div>
          </div>
        )}
      </div>
    </AdminLayout>
  );
};

export default AdminUsersPage;

--- pages\AdminUserStatsPage.tsx ---
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { Bar, Line } from 'react-chartjs-2';
import { Chart as ChartJS, CategoryScale, LinearScale, BarElement, LineElement, PointElement, Title, Tooltip, Legend } from 'chart.js';
import { Users, BarChart2, XCircle, CheckCircle } from 'lucide-react';
import AdminLayout from '../components/AdminLayout';
import ButtonPrimary from '../components/ButtonPrimary';
import { getUserStats } from '../services/api'; // Utilisation de l’instance axios existante
import api from '../services/api'; // Utilisation de l’instance axios existante


ChartJS.register(CategoryScale, LinearScale, BarElement, LineElement, PointElement, Title, Tooltip, Legend);

interface DashboardData {
  users: {
    total: number;
    active: number;
    banned: number;
    by_role: { [key: string]: number };
    new_last_7_days: number;
  };
}

interface UserStats {
  registrations_by_day: { date: string; count: number }[];
  logins_by_day: { date: string; count: number }[];
}

const AdminUserStatsPage: React.FC = () => {
  const navigate = useNavigate();
  const [dashboardData, setDashboardData] = useState<DashboardData | null>(null);
  const [statsData, setStatsData] = useState<UserStats | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [daysFilter, setDaysFilter] = useState<number>(7);

  useEffect(() => {
    fetchDashboardData();
    fetchStatsData();
  }, [daysFilter]);

  const fetchDashboardData = async () => {
    setLoading(true);
    try {
      const response = await api.get('/utilisateurs/dashboard/', {
        params: { days: daysFilter },
      });
      setDashboardData(response.data);
      setLoading(false);
    } catch (err: any) {
      console.error('Erreur lors du chargement des données du tableau de bord:', err.response?.data);
      setError('Erreur lors du chargement des données.');
      setLoading(false);
    }
  };

  const fetchStatsData = async () => {
    setLoading(true);
    try {
      const response = await getUserStats(
        { days: daysFilter },
      );
      setStatsData(response.data);
      setLoading(false);
    } catch (err: any) {
      console.error('Erreur lors du chargement des statistiques:', err.response?.data);
      setError('Erreur lors du chargement des statistiques.');
      setLoading(false);
    }
  };

  const handleFilterChange = (days: number) => {
    setDaysFilter(days);
  };

  // Graphique des utilisateurs par rôle
  const roleChartData = {
    labels: dashboardData ? Object.keys(dashboardData.users.by_role) : [],
    datasets: [
      {
        label: 'Nombre d’utilisateurs par rôle',
        data: dashboardData ? Object.values(dashboardData.users.by_role) : [],
        backgroundColor: '#2196F3',
      },
    ],
  };

  // Graphique des inscriptions par jour
  const registrationChartData = {
    labels: statsData ? statsData.registrations_by_day.map((item) => item.date) : [],
    datasets: [
      {
        label: 'Inscriptions par jour',
        data: statsData ? statsData.registrations_by_day.map((item) => item.count) : [],
        borderColor: '#4CAF50',
        backgroundColor: 'rgba(76, 175, 80, 0.2)',
        fill: true,
      },
    ],
  };

  // Graphique des connexions par jour
  const loginChartData = {
    labels: statsData ? statsData.logins_by_day.map((item) => item.date) : [],
    datasets: [
      {
        label: 'Connexions par jour',
        data: statsData ? statsData.logins_by_day.map((item) => item.count) : [],
        borderColor: '#FF9800',
        backgroundColor: 'rgba(255, 152, 0, 0.2)',
        fill: true,
      },
    ],
  };

  const chartOptions = {
    responsive: true,
    maintainAspectRatio: false,
    plugins: {
      legend: { position: 'top' as const },
      title: { display: true, text: '' },
    },
  };

  if (loading) {
    return <div className="text-center py-16 text-lightText dark:text-darkText">Chargement...</div>;
  }

  if (error) {
    return <div className="text-center py-16 text-red-500">{error}</div>;
  }

  return (
    <AdminLayout>
      <div className="max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8">
        <h1 className="text-2xl sm:text-3xl font-serif font-medium text-lightText dark:text-darkText mb-4 sm:mb-6 flex items-center">
          <BarChart2 className="h-6 w-6 mr-2" /> Statistiques des Utilisateurs
        </h1>

        {/* Filtres */}
        <div className="mb-6 flex flex-wrap gap-2">
          <ButtonPrimary
            onClick={() => handleFilterChange(7)}
            className={`px-4 py-2 text-sm sm:text-base ${daysFilter === 7 ? 'bg-blue-500 text-white' : 'bg-lightCard dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600'}`}
          >
            7 jours
          </ButtonPrimary>
          <ButtonPrimary
            onClick={() => handleFilterChange(30)}
            className={`px-4 py-2 text-sm sm:text-base ${daysFilter === 30 ? 'bg-blue-500 text-white' : 'bg-lightCard dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600'}`}
          >
            30 jours
          </ButtonPrimary>
          <ButtonPrimary
            onClick={() => handleFilterChange(90)}
            className={`px-4 py-2 text-sm sm:text-base ${daysFilter === 90 ? 'bg-blue-500 text-white' : 'bg-lightCard dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600'}`}
          >
            90 jours
          </ButtonPrimary>
        </div>

        {/* Statistiques générales */}
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 mb-6">
          <div className="bg-lightCard dark:bg-darkCard p-4 rounded-lg shadow-md">
            <h2 className="text-lg font-medium text-lightText dark:text-darkText mb-2 flex items-center">
              <Users className="h-5 w-5 mr-2" /> Total
            </h2>
            <p className="text-2xl font-bold text-gray-700 dark:text-gray-300">{dashboardData?.users.total}</p>
          </div>
          <div className="bg-lightCard dark:bg-darkCard p-4 rounded-lg shadow-md">
            <h2 className="text-lg font-medium text-lightText dark:text-darkText mb-2 flex items-center">
              <CheckCircle className="h-5 w-5 mr-2" /> Actifs
            </h2>
            <p className="text-2xl font-bold text-gray-700 dark:text-gray-300">{dashboardData?.users.active}</p>
          </div>
          <div className="bg-lightCard dark:bg-darkCard p-4 rounded-lg shadow-md">
            <h2 className="text-lg font-medium text-lightText dark:text-darkText mb-2 flex items-center">
              <XCircle className="h-5 w-5 mr-2" /> Bannis
            </h2>
            <p className="text-2xl font-bold text-gray-700 dark:text-gray-300">{dashboardData?.users.banned}</p>
          </div>
          <div className="bg-lightCard dark:bg-darkCard p-4 rounded-lg shadow-md">
            <h2 className="text-lg font-medium text-lightText dark:text-darkText mb-2 flex items-center">
              <Users className="h-5 w-5 mr-2" /> Nouveaux ({daysFilter} jours)
            </h2>
            <p className="text-2xl font-bold text-gray-700 dark:text-gray-300">{dashboardData?.users.new_last_7_days}</p>
          </div>
        </div>

        {/* Graphiques */}
        <div className="space-y-6">
          <div className="bg-lightCard dark:bg-darkCard p-4 rounded-lg shadow-md">
            <h2 className="text-lg font-medium text-lightText dark:text-darkText mb-2">Utilisateurs par rôle</h2>
            <div className="h-48 sm:h-64">
              <Bar
                data={roleChartData}
                options={{ ...chartOptions, plugins: { ...chartOptions.plugins, title: { text: 'Répartition par rôle' } } }}
              />
            </div>
          </div>

          <div className="bg-lightCard dark:bg-darkCard p-4 rounded-lg shadow-md">
            <h2 className="text-lg font-medium text-lightText dark:text-darkText mb-2">Inscriptions par jour</h2>
            <div className="h-48 sm:h-64">
              <Line
                data={registrationChartData}
                options={{ ...chartOptions, plugins: { ...chartOptions.plugins, title: { text: 'Inscriptions sur ' + daysFilter + ' jours' } } }}
              />
            </div>
          </div>

          <div className="bg-lightCard dark:bg-darkCard p-4 rounded-lg shadow-md">
            <h2 className="text-lg font-medium text-lightText dark:text-darkText mb-2">Connexions par jour</h2>
            <div className="h-48 sm:h-64">
              <Line
                data={loginChartData}
                options={{ ...chartOptions, plugins: { ...chartOptions.plugins, title: { text: 'Connexions sur ' + daysFilter + ' jours' } } }}
              />
            </div>
          </div>
        </div>
      </div>
    </AdminLayout>
  );
};

export default AdminUserStatsPage;

--- pages\AdminWishListsPage.tsx ---
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import api, { getWishlist, supprimerProduitWishlist,  } from '../services/api'; // Importez les fonctions nécessaires
import AdminLayout from '../components/AdminLayout';
import ButtonPrimary from '../components/ButtonPrimary';
import { Heart, Search, Trash2, ChevronLeft, ChevronRight, Eye } from 'lucide-react';

interface Wishlist {
  id: string;
  client: {
    id: string;
    username: string;
    email: string;
  };
  produits: {
    id: string;
    nom: string;
    prix: string;
  }[];
}

interface ApiResponse {
  results: Wishlist[];
  count: number;
  next: string | null;
  previous: string | null;
}

const AdminWishlistsPage: React.FC = () => {
  const navigate = useNavigate();
  const [wishlists, setWishlists] = useState<Wishlist[]>([]);
  const [totalWishlists, setTotalWishlists] = useState(0);
  const [currentPage, setCurrentPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedWishlist, setSelectedWishlist] = useState<Wishlist | null>(null);
  const [isDetailsModalOpen, setIsDetailsModalOpen] = useState(false);
  const [isDeleteProductModalOpen, setIsDeleteProductModalOpen] = useState(false);
  const [isDeleteWishlistModalOpen, setIsDeleteWishlistModalOpen] = useState(false);
  const [productToDelete, setProductToDelete] = useState<{ wishlistId: string; productId: string } | null>(null);
  const wishlistsPerPage = 10;

  useEffect(() => {
    fetchWishlists();
  }, [currentPage, searchQuery]);

  const fetchWishlists = async () => {
    setLoading(true);
    try {
      const response = await api.get<ApiResponse>('/wishlist/', {
        params: {
          page: currentPage,
          per_page: wishlistsPerPage,
          search: searchQuery || undefined, // Recherche par email ou nom d’utilisateur du client
        },
      });
      setWishlists(response.data.results);
      setTotalWishlists(response.data.count);
      setTotalPages(Math.ceil(response.data.count / wishlistsPerPage));
      setLoading(false);
    } catch (err: any) {
      console.error('Erreur lors du chargement des wishlists:', err.response?.data);
      setError('Erreur lors du chargement des wishlists.');
      setLoading(false);
    }
  };

  const handleSearch = (e: React.ChangeEvent<HTMLInputElement>) => {
    setSearchQuery(e.target.value);
    setCurrentPage(1);
  };

  const handlePrevPage = () => {
    if (currentPage > 1) setCurrentPage(currentPage - 1);
  };

  const handleNextPage = () => {
    if (currentPage < totalPages) setCurrentPage(currentPage + 1);
  };

  const openDetailsModal = (wishlist: Wishlist) => {
    setSelectedWishlist(wishlist);
    setIsDetailsModalOpen(true);
  };

  const closeDetailsModal = () => {
    setIsDetailsModalOpen(false);
    setSelectedWishlist(null);
  };

  const openDeleteProductModal = (wishlistId: string, productId: string) => {
    setProductToDelete({ wishlistId, productId });
    setIsDeleteProductModalOpen(true);
  };

  const closeDeleteProductModal = () => {
    setIsDeleteProductModalOpen(false);
    setProductToDelete(null);
  };

  const handleDeleteProduct = async () => {
    if (!productToDelete) return;

    try {
      await supprimerProduitWishlist(productToDelete.productId);
      setIsDeleteProductModalOpen(false);
      fetchWishlists(); // Rafraîchir la liste
    } catch (err: any) {
      console.error('Erreur lors de la suppression du produit de la wishlist:', err.response?.data);
      setError('Erreur lors de la suppression du produit.');
    }
  };

  const openDeleteWishlistModal = (wishlist: Wishlist) => {
    setSelectedWishlist(wishlist);
    setIsDeleteWishlistModalOpen(true);
  };

  const closeDeleteWishlistModal = () => {
    setIsDeleteWishlistModalOpen(false);
    setSelectedWishlist(null);
  };

  const handleDeleteWishlist = async () => {
    if (!selectedWishlist) return;

    try {
      await api.delete(`/wishlist/${selectedWishlist.id}/`);
      setIsDeleteWishlistModalOpen(false);
      fetchWishlists();
    } catch (err: any) {
      console.error('Erreur lors de la suppression de la wishlist:', err.response?.data);
      setError('Erreur lors de la suppression de la wishlist.');
    }
  };

  if (loading) {
    return <div className="text-center py-16 text-lightText dark:text-darkText">Chargement...</div>;
  }

  if (error) {
    return <div className="text-center py-16 text-red-500">{error}</div>;
  }

  return (
    <AdminLayout>
      <div className="max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8">
        <h1 className="text-2xl sm:text-3xl font-serif font-medium text-lightText dark:text-darkText mb-4 sm:mb-6 flex items-center">
          <Heart className="h-6 w-6 mr-2" /> Gestion des Wishlists
        </h1>

        {/* Recherche */}
        <div className="mb-6 flex flex-col sm:flex-row gap-4 items-center justify-between">
          <div className="relative w-full sm:w-64">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400" />
            <input
              type="text"
              value={searchQuery}
              onChange={handleSearch}
              placeholder="Rechercher par email ou nom d’utilisateur..."
              className="w-full pl-10 pr-4 py-2 border border-lightBorder dark:border-darkBorder rounded-lg bg-lightBg dark:bg-darkBg text-lightText dark:text-darkText focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
          </div>
        </div>

        {/* Liste des wishlists */}
        <div className="overflow-x-auto">
          <table className="w-full text-left text-sm">
            <thead className="bg-lightCard dark:bg-darkCard">
              <tr className="border-b border-lightBorder dark:border-darkBorder">
                <th className="py-3 px-4 text-lightText dark:text-darkText">ID</th>
                <th className="py-3 px-4 text-lightText dark:text-darkText">Utilisateur</th>
                <th className="py-3 px-4 text-lightText dark:text-darkText">Email</th>
                <th className="py-3 px-4 text-lightText dark:text-darkText">Nb Produits</th>
                <th className="py-3 px-4 text-lightText dark:text-darkText">Actions</th>
              </tr>
            </thead>
            <tbody>
              {wishlists.map((wishlist) => (
                <tr key={wishlist.id} className="border-b border-lightBorder dark:border-darkBorder hover:bg-gray-100 dark:hover:bg-gray-700">
                  <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{wishlist.id}</td>
                  <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{wishlist.client.username}</td>
                  <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{wishlist.client.email}</td>
                  <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{wishlist.produits.length}</td>
                  <td className="py-3 px-4 flex gap-2">
                    <ButtonPrimary
                      onClick={() => openDetailsModal(wishlist)}
                      className="px-2 py-1 bg-blue-500 text-white hover:bg-blue-600 flex items-center text-sm"
                    >
                      <Eye className="h-4 w-4 mr-1" /> Détails
                    </ButtonPrimary>
                    <ButtonPrimary
                      onClick={() => openDeleteWishlistModal(wishlist)}
                      className="px-2 py-1 bg-red-500 text-white hover:bg-red-600 flex items-center text-sm"
                    >
                      <Trash2 className="h-4 w-4 mr-1" /> Supprimer
                    </ButtonPrimary>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>

        {/* Pagination */}
        <div className="mt-6 flex flex-col sm:flex-row items-center justify-between gap-4">
          <p className="text-sm text-gray-700 dark:text-gray-300">
            Affichage de {(currentPage - 1) * wishlistsPerPage + 1} à{' '}
            {Math.min(currentPage * wishlistsPerPage, totalWishlists)} sur {totalWishlists} wishlists
          </p>
          <div className="flex gap-2">
            <ButtonPrimary
              onClick={handlePrevPage}
              disabled={currentPage === 1}
              className="px-3 py-2 bg-lightCard dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600 disabled:opacity-50 flex items-center"
            >
              <ChevronLeft className="h-5 w-5 mr-1" /> Précédent
            </ButtonPrimary>
            <ButtonPrimary
              onClick={handleNextPage}
              disabled={currentPage === totalPages}
              className="px-3 py-2 bg-lightCard dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600 disabled:opacity-50 flex items-center"
            >
              Suivant <ChevronRight className="h-5 w-5 ml-1" />
            </ButtonPrimary>
          </div>
        </div>

        {/* Modal pour voir les détails */}
        {isDetailsModalOpen && selectedWishlist && (
          <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center">
            <div className="bg-lightBg dark:bg-darkBg p-6 rounded-lg shadow-lg w-full max-w-2xl">
              <h2 className="text-xl font-medium text-lightText dark:text-darkText mb-4 flex items-center">
                <Eye className="h-5 w-5 mr-2" /> Détails de la Wishlist de {selectedWishlist.client.username}
              </h2>
              <div className="overflow-x-auto">
                <table className="w-full text-left text-sm">
                  <thead className="bg-lightCard dark:bg-darkCard">
                    <tr className="border-b border-lightBorder dark:border-darkBorder">
                      <th className="py-3 px-4 text-lightText dark:text-darkText">ID Produit</th>
                      <th className="py-3 px-4 text-lightText dark:text-darkText">Nom</th>
                      <th className="py-3 px-4 text-lightText dark:text-darkText">Prix</th>
                      <th className="py-3 px-4 text-lightText dark:text-darkText">Action</th>
                    </tr>
                  </thead>
                  <tbody>
                    {selectedWishlist.produits.map((product) => (
                      <tr key={product.id} className="border-b border-lightBorder dark:border-darkBorder">
                        <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{product.id}</td>
                        <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{product.nom}</td>
                        <td className="py-3 px-4 text-gray-700 dark:text-gray-300">{product.prix} FCFA</td>
                        <td className="py-3 px-4">
                          <ButtonPrimary
                            onClick={() => openDeleteProductModal(selectedWishlist.id, product.id)}
                            className="px-2 py-1 bg-red-500 text-white hover:bg-red-600 flex items-center text-sm"
                          >
                            <Trash2 className="h-4 w-4 mr-1" /> Supprimer
                          </ButtonPrimary>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
              <div className="mt-4 flex justify-end">
                <ButtonPrimary
                  onClick={closeDetailsModal}
                  className="px-4 py-2 bg-lightCard dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600"
                >
                  Fermer
                </ButtonPrimary>
              </div>
            </div>
          </div>
        )}

        {/* Modal pour supprimer un produit */}
        {isDeleteProductModalOpen && productToDelete && (
          <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center">
            <div className="bg-lightBg dark:bg-darkBg p-6 rounded-lg shadow-lg w-full max-w-md">
              <h2 className="text-xl font-medium text-lightText dark:text-darkText mb-4 flex items-center">
                <Trash2 className="h-5 w-5 mr-2" /> Supprimer un produit
              </h2>
              <p className="text-gray-700 dark:text-gray-300 mb-4">
                Êtes-vous sûr de vouloir supprimer ce produit de la wishlist ?
              </p>
              <div className="flex gap-2 justify-end">
                <ButtonPrimary
                  type="button"
                  onClick={closeDeleteProductModal}
                  className="px-4 py-2 bg-lightCard dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600"
                >
                  Annuler
                </ButtonPrimary>
                <ButtonPrimary
                  onClick={handleDeleteProduct}
                  className="px-4 py-2 bg-red-500 text-white hover:bg-red-600"
                >
                  Supprimer
                </ButtonPrimary>
              </div>
            </div>
          </div>
        )}

        {/* Modal pour supprimer une wishlist */}
        {isDeleteWishlistModalOpen && selectedWishlist && (
          <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center">
            <div className="bg-lightBg dark:bg-darkBg p-6 rounded-lg shadow-lg w-full max-w-md">
              <h2 className="text-xl font-medium text-lightText dark:text-darkText mb-4 flex items-center">
                <Trash2 className="h-5 w-5 mr-2" /> Supprimer la Wishlist
              </h2>
              <p className="text-gray-700 dark:text-gray-300 mb-4">
                Êtes-vous sûr de vouloir supprimer la wishlist de <span className="font-medium">{selectedWishlist.client.email}</span> ?
              </p>
              <div className="flex gap-2 justify-end">
                <ButtonPrimary
                  type="button"
                  onClick={closeDeleteWishlistModal}
                  className="px-4 py-2 bg-lightCard dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600"
                >
                  Annuler
                </ButtonPrimary>
                <ButtonPrimary
                  onClick={handleDeleteWishlist}
                  className="px-4 py-2 bg-red-500 text-white hover:bg-red-600"
                >
                  Supprimer
                </ButtonPrimary>
              </div>
            </div>
          </div>
        )}
      </div>
    </AdminLayout>
  );
};

export default AdminWishlistsPage;

--- pages\ArticleDetailPage.tsx ---
import React, { useState, useEffect } from 'react';
import { useParams, useNavigate, Link } from 'react-router-dom';
import NavBar from '../components/NavBar';
import Footer from '../components/Footer';
import PageContainer from '../components/PageContainer';
import ButtonPrimary from '../components/ButtonPrimary';
import { getArticle, createCommentaire, getUserProfile } from '../services/api';
import { motion } from 'framer-motion';
import { Calendar, Send } from 'lucide-react';

interface Commentaire {
  id: string;
  client: string;
  texte: string;
  date: string;
  reponses: Commentaire[];
}

interface Article {
  id: string;
  titre: string;
  contenu: string;
  cover: string | null;
  auteur: string;
  date_publication: string;
  commentaires?: Commentaire[]; // Optionnel pour éviter l'erreur si absent
}

const ArticleDetailPage: React.FC = () => {
  const { id } = useParams<{ id: string }>();
  const navigate = useNavigate();
  const [article, setArticle] = useState<Article | null>(null);
  const [commentText, setCommentText] = useState('');
  const [replyText, setReplyText] = useState<{ [key: string]: string }>({});
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchData = async () => {
      try {
        const articleResponse = await getArticle(id!);
        console.log('Article chargé:', articleResponse.data);
        setArticle(articleResponse.data);

        const token = localStorage.getItem('access_token');
        if (token) {
          await getUserProfile();
          setIsAuthenticated(true);
        }
        setLoading(false);
      } catch (err: any) {
        console.error('Erreur lors du chargement:', err.response?.status, err.response?.data);
        setError('Erreur lors du chargement de l’article.');
        setLoading(false);
      }
    };

    fetchData();
  }, [id]);

  const handleCommentSubmit = async () => {
    if (!isAuthenticated) {
      navigate('/auth');
      return;
    }
    if (!commentText.trim()) {
      alert('Veuillez entrer un commentaire.');
      return;
    }

    try {
      await createCommentaire({ article: id!, texte: commentText });
      const updatedArticle = await getArticle(id!);
      console.log('Article mis à jour après commentaire:', updatedArticle.data);
      setArticle(updatedArticle.data);
      setCommentText('');
    } catch (err: any) {
      console.error('Erreur lors de l’ajout du commentaire:', err.response?.data);
      alert('Erreur lors de l’ajout du commentaire.');
    }
  };

  const handleReplySubmit = async (parentId: string) => {
    if (!isAuthenticated) {
      navigate('/auth');
      return;
    }
    const reply = replyText[parentId]?.trim();
    if (!reply) {
      alert('Veuillez entrer une réponse.');
      return;
    }

    try {
      await createCommentaire({ article: id!, texte: reply, parent: parentId });
      const updatedArticle = await getArticle(id!);
      console.log('Article mis à jour après réponse:', updatedArticle.data);
      setArticle(updatedArticle.data);
      setReplyText((prev) => ({ ...prev, [parentId]: '' }));
    } catch (err: any) {
      console.error('Erreur lors de l’ajout de la réponse:', err.response?.data);
      alert('Erreur lors de l’ajout de la réponse.');
    }
  };

  const renderComments = (commentaires: Commentaire[], level = 0) => (
    <div className={`space-y-4 ${level > 0 ? 'ml-8' : ''}`}>
      {commentaires.map((comment) => (
        <div key={comment.id} className="bg-white p-4 rounded-lg shadow-md">
          <p className="text-soft-brown/90">{comment.texte}</p>
          <p className="text-soft-brown/70 text-sm mt-2">
            Par {comment.client} - {new Date(comment.date).toLocaleString('fr-FR')}
          </p>
          {isAuthenticated && (
            <div className="mt-2">
              <textarea
                value={replyText[comment.id] || ''}
                onChange={(e) => setReplyText((prev) => ({ ...prev, [comment.id]: e.target.value }))}
                placeholder="Répondre..."
                className="w-full p-2 border border-soft-brown/30 rounded-md focus:outline-none focus:ring-2 focus:ring-soft-green"
              />
              <ButtonPrimary
                onClick={() => handleReplySubmit(comment.id)}
                className="mt-2 bg-soft-green hover:bg-soft-green/90"
              >
                <Send className="h-4 w-4 mr-2" /> Répondre
              </ButtonPrimary>
            </div>
          )}
          {comment.reponses.length > 0 && renderComments(comment.reponses, level + 1)}
        </div>
      ))}
    </div>
  );

  if (loading) {
    return <div className="text-center py-16">Chargement...</div>;
  }

  if (error || !article) {
    return <div className="text-center py-16 text-powder-pink">{error || 'Article non trouvé'}</div>;
  }

  return (
    <>
      <NavBar />
      <PageContainer>
        <div className="max-w-4xl mx-auto py-12 px-4 sm:px-6 lg:px-8">
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5 }}
          >
            <h1 className="text-3xl font-serif font-medium text-soft-brown mb-4">{article.titre}</h1>
            <p className="text-soft-brown/70 text-sm mb-4 flex items-center">
              <Calendar className="h-4 w-4 mr-1" />
              {new Date(article.date_publication).toLocaleDateString('fr-FR', {
                day: '2-digit',
                month: 'long',
                year: 'numeric',
              })}
              <span className="ml-2">par {article.auteur || 'Anonyme'}</span>
            </p>
            {article.cover && (
              <img src={article.cover} alt={article.titre} className="w-full h-64 object-cover rounded-lg mb-6" />
            )}
            <p className="text-soft-brown/90 leading-relaxed mb-8">{article.contenu}</p>

            <h2 className="text-2xl font-medium text-soft-brown mb-4">Commentaires</h2>
            {isAuthenticated ? (
              <div className="mb-6">
                <textarea
                  value={commentText}
                  onChange={(e) => setCommentText(e.target.value)}
                  placeholder="Ajouter un commentaire..."
                  className="w-full p-2 border border-soft-brown/30 rounded-md focus:outline-none focus:ring-2 focus:ring-soft-green h-24"
                />
                <ButtonPrimary
                  onClick={handleCommentSubmit}
                  className="mt-2 bg-soft-green hover:bg-soft-green/90"
                >
                  <Send className="h-4 w-4 mr-2" /> Publier
                </ButtonPrimary>
              </div>
            ) : (
              <p className="text-soft-brown/70 mb-6">
                <Link to="/auth" className="text-soft-green underline">Connectez-vous</Link> pour commenter.
              </p>
            )}
            {article.commentaires && article.commentaires.length > 0 ? (
              renderComments(article.commentaires)
            ) : (
              <p className="text-soft-brown/70">Aucun commentaire pour le moment.</p>
            )}
          </motion.div>
        </div>
      </PageContainer>
      <Footer />
    </>
  );
};

export default ArticleDetailPage;

--- pages\ArticlesPage.tsx ---
"use client"

import type React from "react"
import { useState, useEffect } from "react"
import { useNavigate, Link } from "react-router-dom"
import NavBar from "../components/NavBar"
import Footer from "../components/Footer"
import PageContainer from "../components/PageContainer"
import ButtonPrimary from "../components/ButtonPrimary"
import { getArticles } from "../services/api"
import { motion, AnimatePresence } from "framer-motion"
import { Calendar, User, MessageCircle } from "lucide-react"

interface Article {
  id: string
  titre: string
  contenu: string
  cover: string | null
  auteur: string
  date_publication: string
  commentaires_count?: number
}

const ArticlesPage: React.FC = () => {
  const navigate = useNavigate()
  const [articles, setArticles] = useState<Article[]>([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)

  useEffect(() => {
    const fetchArticles = async () => {
      try {
        const response = await getArticles()
        setArticles(response.data.results)
        setLoading(false)
      } catch (err: any) {
        console.error("Erreur lors du chargement:", err.response?.data)
        setError("Erreur lors du chargement des articles.")
        setLoading(false)
      }
    }

    fetchArticles()
  }, [])

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-screen bg-light-beige">
        <div className="animate-spin rounded-full h-32 w-32 border-t-2 border-b-2 border-soft-green"></div>
      </div>
    )
  }

  if (error) {
    return (
      <div className="flex items-center justify-center min-h-screen bg-light-beige">
        <div className="text-center py-16 text-powder-pink bg-white rounded-lg shadow-md p-8">
          <h2 className="text-2xl font-serif mb-4">Oops !</h2>
          <p>{error}</p>
        </div>
      </div>
    )
  }

  return (
    <>
      <NavBar />
      <PageContainer>
        <div className="max-w-6xl mx-auto py-12 px-4 sm:px-6 lg:px-8">
          <h1 className="text-4xl font-serif font-medium text-soft-brown mb-8 text-center">Blog ChezFlora</h1>

          <div className="space-y-12">
            {articles.length > 0 ? (
              <AnimatePresence>
                {articles.map((article, index) => (
                  <motion.div
                    key={article.id}
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    exit={{ opacity: 0, y: -20 }}
                    transition={{ duration: 0.5, delay: index * 0.1 }}
                    className="bg-white p-6 rounded-lg shadow-lg hover:shadow-xl transition-shadow duration-300 flex flex-col md:flex-row items-center"
                  >
                    {article.cover && (
                      <img
                        src={article.cover || "/placeholder.svg"}
                        alt={article.titre}
                        className="w-full md:w-1/3 h-64 object-cover rounded-md mb-4 md:mb-0 md:mr-6"
                      />
                    )}
                    <div className="flex-1">
                      <h2 className="text-2xl font-serif font-medium text-soft-brown mb-3">{article.titre}</h2>
                      <div className="flex items-center text-soft-brown/70 text-sm mb-3">
                        <Calendar className="h-4 w-4 mr-1" />
                        <span>
                          {new Date(article.date_publication).toLocaleDateString("fr-FR", {
                            day: "2-digit",
                            month: "long",
                            year: "numeric",
                          })}
                        </span>
                        <User className="h-4 w-4 ml-4 mr-1" />
                        <span>{article.auteur}</span>
                        {article.commentaires_count !== undefined && (
                          <>
                            <MessageCircle className="h-4 w-4 ml-4 mr-1" />
                            <span>{article.commentaires_count} commentaire(s)</span>
                          </>
                        )}
                      </div>
                      <p className="text-soft-brown/90 mb-4 line-clamp-3">{article.contenu}</p>
                      <Link to={`/blog/${article.id}`}>
                        <ButtonPrimary className="bg-soft-green hover:bg-soft-green/90 transition-colors duration-300 text-white font-medium py-2 px-4 rounded-full shadow-md hover:shadow-lg">
                          Lire la suite
                        </ButtonPrimary>
                      </Link>
                    </div>
                  </motion.div>
                ))}
              </AnimatePresence>
            ) : (
              <div className="text-center py-16 bg-white rounded-lg shadow-md">
                <p className="text-soft-brown/70 text-lg">Aucun article disponible pour le moment.</p>
                <p className="text-soft-brown/50 mt-2">Revenez bientôt pour découvrir nos nouveaux articles !</p>
              </div>
            )}
          </div>
        </div>
      </PageContainer>
      <Footer />
    </>
  )
}

export default ArticlesPage



--- pages\AteliersPage.tsx ---
import React, { useState, useEffect } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import NavBar from '../components/NavBar';
import Footer from '../components/Footer';
import PageContainer from '../components/PageContainer';
import ButtonPrimary from '../components/ButtonPrimary';
import { getAteliers, inscrireAtelier, desinscrireAtelier, getUserProfile } from '../services/api';
import { motion, AnimatePresence } from 'framer-motion';
import { Calendar } from 'lucide-react';

interface Atelier {
  id: string;
  titre: string;
  description: string;
  date: string;
  places_disponibles: number;
  prix: string;
  participants: string[];
  is_active: boolean;
}

const AteliersPage: React.FC = () => {
  const navigate = useNavigate();
  const [ateliers, setAteliers] = useState<Atelier[]>([]);
  const [userId, setUserId] = useState<string | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [actionLoading, setActionLoading] = useState<string | null>(null);

  useEffect(() => {
    const fetchData = async () => {
      const token = localStorage.getItem('access_token');
      if (!token) {
        navigate('/auth');
        return;
      }

      try {
        const [ateliersResponse, userResponse] = await Promise.all([getAteliers(), getUserProfile()]);
        console.log('Ateliers:', ateliersResponse.data);
        setAteliers(ateliersResponse.data);
        setUserId(userResponse.data.id);
        setLoading(false);
      } catch (err: any) {
        console.error('Erreur lors du chargement:', err.response?.status, err.response?.data);
        setError('Erreur lors du chargement des ateliers.');
        setLoading(false);
        if (err.response?.status === 401) {
          localStorage.removeItem('access_token');
          navigate('/auth');
        }
      }
    };

    fetchData();
  }, [navigate]);

  const handleInscription = async (atelierId: string) => {
    setActionLoading(atelierId);
    try {
      const response = await inscrireAtelier(atelierId);
      console.log('Réponse inscription:', response.data);
      const updatedAteliers = await getAteliers();
      setAteliers(updatedAteliers.data);
      alert('Inscription réussie !');
    } catch (err: any) {
      console.error('Erreur lors de l’inscription:', err.response?.data);
      alert('Erreur lors de l’inscription : ' + (err.response?.data?.error || 'Vérifiez votre connexion.'));
    } finally {
      setActionLoading(null);
    }
  };

  const handleDesinscription = async (atelierId: string) => {
    if (!window.confirm('Êtes-vous sûr de vouloir vous désinscrire de cet atelier ?')) return;
    setActionLoading(atelierId);
    try {
      const response = await desinscrireAtelier(atelierId);
      console.log('Réponse désinscription:', response.data);
      const updatedAteliers = await getAteliers();
      setAteliers(updatedAteliers.data);
      alert('Désinscription réussie.');
    } catch (err: any) {
      console.error('Erreur lors de la désinscription:', err.response?.data);
      alert('Erreur lors de la désinscription : ' + (err.response?.data?.error || 'Vérifiez votre connexion.'));
    } finally {
      setActionLoading(null);
    }
  };

  if (loading) {
    return <div className="text-center py-16">Chargement...</div>;
  }

  if (error) {
    return (
      <div className="text-center py-16 text-powder-pink">
        {error} <Link to="/auth" className="underline">Connectez-vous</Link>
      </div>
    );
  }

  return (
    <>
      <NavBar />
      <PageContainer>
        <div className="max-w-6xl mx-auto py-12 px-4 sm:px-6 lg:px-8">
          <h1 className="text-3xl font-serif font-medium text-soft-brown mb-6">Ateliers floraux</h1>

          <div className="space-y-6">
            {ateliers.length > 0 ? (
              <AnimatePresence>
                {ateliers.map((atelier) => {
                  const isInscrit = userId && atelier.participants.includes(userId);
                  const isAnnule = !atelier.is_active;

                  return (
                    <motion.div
                      key={atelier.id}
                      initial={{ opacity: 0, y: 20 }}
                      animate={{ opacity: 1, y: 0 }}
                      exit={{ opacity: 0, y: -20 }}
                      transition={{ duration: 0.5 }}
                      className="bg-light-beige p-4 rounded-lg shadow-md"
                    >
                      <div className="flex justify-between items-center mb-4">
                        <h2 className="text-lg font-medium text-soft-brown">{atelier.titre}</h2>
                        <div className="text-right">
                          <p className={`text-sm ${atelier.places_disponibles > 0 ? 'text-soft-green' : 'text-powder-pink'}`}>
                            {atelier.places_disponibles > 0 ? `${atelier.places_disponibles} places restantes` : 'Complet'}
                          </p>
                          {isAnnule && <p className="text-sm text-powder-pink">Annulé</p>}
                        </div>
                      </div>
                      <p className="text-soft-brown/90 mb-2">{atelier.description}</p>
                      <p className="text-soft-brown/70 text-sm mb-2 flex items-center">
                        <Calendar className="h-4 w-4 mr-1" />
                        {new Date(atelier.date).toLocaleString('fr-FR', {
                          day: '2-digit',
                          month: 'long',
                          year: 'numeric',
                          hour: '2-digit',
                          minute: '2-digit',
                        })}
                      </p>
                      <p className="text-soft-brown mb-2">Prix : {atelier.prix} FCFA</p>
                      {isInscrit && !isAnnule && (
                        <p className="text-soft-green text-sm mb-2">Vous êtes inscrit à cet atelier.</p>
                      )}
                      {isAnnule ? (
                        <p className="text-powder-pink text-sm mb-2">Cet atelier a été annulé.</p>
                      ) : (
                        <ButtonPrimary
                          onClick={() => (isInscrit ? handleDesinscription(atelier.id) : handleInscription(atelier.id))}
                          disabled={actionLoading === atelier.id || (!isInscrit && atelier.places_disponibles <= 0)}
                          className={`mt-2 ${isInscrit ? 'bg-powder-pink hover:bg-powder-pink/90' : 'bg-soft-green hover:bg-soft-green/90'}`}
                        >
                          {actionLoading === atelier.id
                            ? isInscrit
                              ? 'Désinscription...'
                              : 'Inscription...'
                            : isInscrit
                              ? 'Se désinscrire'
                              : 'S’inscrire'}
                        </ButtonPrimary>
                      )}
                    </motion.div>
                  );
                })}
              </AnimatePresence>
            ) : (
              <p className="text-center text-soft-brown/70">Aucun atelier disponible pour le moment.</p>
            )}
          </div>
        </div>
      </PageContainer>
      <Footer />
    </>
  );
};

export default AteliersPage;

--- pages\AuthPage.tsx ---
import React, { useState } from 'react';
import { motion } from 'framer-motion';
import NavBar from '../components/NavBar';
import Footer from '../components/Footer';
import PageContainer from '../components/PageContainer';
import AuthTabs from '../components/AuthTabs';
import AuthLoginForm from '../components/AuthLoginForm';
import AuthRegisterForm from '../components/AuthRegisterForm';

const AuthPage: React.FC = () => {
  const [activeTab, setActiveTab] = useState('login');

  return (
    <>
      <NavBar />
      <PageContainer>
        <div className="max-w-4xl mx-auto">
          <div className="grid md:grid-cols-5 gap-8 items-center">
            <motion.div
              className="hidden md:block md:col-span-2 relative"
              initial={{ opacity: 0, x: -20 }}
              animate={{ opacity: 1, x: 0 }}
              transition={{ duration: 0.6 }}
            >
              <div className="relative aspect-[3/4] rounded-2xl overflow-hidden bg-light-beige shadow-lg">
                <div className="absolute inset-0 bg-floral-pattern bg-repeat opacity-10"></div>
                <div className="absolute inset-0 flex flex-col justify-center items-center p-8 text-center">
                  <div className="w-16 h-16 mb-6">
                    <svg viewBox="0 0 100 100" fill="none" xmlns="http://www.w3.org/2000/svg">
                      <path d="M50 10C50 32.0914 67.9086 50 90 50C67.9086 50 50 67.9086 50 90C50 67.9086 32.0914 50 10 50C32.0914 50 50 32.0914 50 10Z" fill="#A8D5BA" fillOpacity="0.8" />
                      <path d="M70 30C70 41.0457 79.0543 50 90 50C79.0543 50 70 59.0543 70 70C70 59.0543 60.9457 50 50 50C60.9457 50 70 41.0457 70 30Z" fill="#F8C1CC" fillOpacity="0.8" />
                      <path d="M30 30C30 41.0457 39.0543 50 50 50C39.0543 50 30 59.0543 30 70C30 59.0543 20.9457 50 10 50C20.9457 50 30 41.0457 30 30Z" fill="#A8D5BA" fillOpacity="0.8" />
                    </svg>
                  </div>
                  <h2 className="text-2xl font-serif font-bold text-soft-brown mb-4">ChezFlora</h2>
                  <p className="text-soft-brown/80">Rejoignez notre communauté et découvrez notre sélection de fleurs et plantes pour embellir votre quotidien.</p>
                  <div className="absolute bottom-8 left-8 w-12 h-12 rounded-full bg-soft-green/20 flex items-center justify-center">
                    <div className="w-6 h-6 rounded-full bg-soft-green/40"></div>
                  </div>
                  <div className="absolute top-8 right-8 w-10 h-10 rounded-full bg-powder-pink/20 flex items-center justify-center">
                    <div className="w-5 h-5 rounded-full bg-powder-pink/40"></div>
                  </div>
                </div>
              </div>
            </motion.div>
            <div className="md:col-span-3">
              <AuthTabs defaultTab={activeTab} onTabChange={setActiveTab}>
                {activeTab === 'login' ? <AuthLoginForm /> : <AuthRegisterForm />}
              </AuthTabs>
            </div>
          </div>
        </div>
      </PageContainer>
      <Footer />
    </>
  );
};

export default AuthPage;

--- pages\CartPage.tsx ---
import React, { useState, useEffect } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import NavBar from '../components/NavBar';
import Footer from '../components/Footer';
import PageContainer from '../components/PageContainer';
import ButtonPrimary from '../components/ButtonPrimary';
import { getCart, validateCart, updateCartQuantity, removeFromCart } from '../services/api';
import { Trash2, Plus, Minus } from 'lucide-react';

interface Photo {
  image: string;
}

interface CartItem {
  id: string;
  produit: {
    id: string;
    nom: string;
    prix: number;
    prix_reduit?: number;
    photos: Photo[];
  };
  quantite: number;
}

interface Cart {
  id: string;
  items: CartItem[];
  total: string;
}

const CartPage: React.FC = () => {
  const navigate = useNavigate();
  const [cart, setCart] = useState<Cart | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [checkoutLoading, setCheckoutLoading] = useState(false);

  useEffect(() => {
    const fetchCart = async () => {
      const token = localStorage.getItem('access_token');
      console.log('Token:', token); // Log du token
      if (!token) {
        navigate('/auth');
        return;
      }

      try {
        const response = await getCart();
        console.log('Réponse getCart:', response.data); // Log de la réponse
        setCart(response.data);
        setLoading(false);
      } catch (err: any) {
        console.error('Erreur lors de getCart:', err.response?.status, err.response?.data);
        setError('Erreur lors du chargement du panier.');
        setLoading(false);
        if (err.response?.status === 401) {
          localStorage.removeItem('access_token');
          navigate('/auth');
        }
      }
    };

    fetchCart();
  }, [navigate]);

  const handleQuantityChange = async (itemId: string, produitId: string, delta: number) => {
    if (!cart) return;
    const item = cart.items.find((i) => i.id === itemId);
    if (!item) return;

    const newQuantity = item.quantite + delta;
    if (newQuantity <= 0) return;

    try {
      await updateCartQuantity(cart.id, { produit_id: produitId, quantite: newQuantity });
      const response = await getCart();
      setCart(response.data);
    } catch (err) {
      console.error('Erreur lors de la mise à jour de la quantité:', err);
    }
  };

  const handleRemoveItem = async (produitId: string) => {
    if (!cart) return;
    try {
      await removeFromCart(cart.id, { produit_id: produitId });
      const response = await getCart();
      setCart(response.data);
    } catch (err) {
      console.error('Erreur lors de la suppression du produit:', err);
    }
  };

  // const handleCheckout = async () => {
  //   if (!cart) return;
  //   setCheckoutLoading(true);
  //   try {
  //     await validateCart(cart.id);
  //     alert('Commande validée avec succès !');
  //     setCart(null);
  //   } catch (err) {
  //     alert('Erreur lors de la validation du panier.');
  //   } finally {
  //     setCheckoutLoading(false);
  //   }
  // };

  if (loading) {
    return <div className="text-center py-16">Chargement...</div>;
  }

  if (error) {
    return (
      <div className="text-center py-16 text-powder-pink">
        {error} <Link to="/auth" className="underline">Connectez-vous</Link>
      </div>
    );
  }

  return (
    <>
      <NavBar />
      <PageContainer>
        <div className="max-w-4xl mx-auto py-8 px-4 sm:px-6 lg:px-8">
          <h1 className="text-3xl font-serif font-medium text-soft-brown mb-6">Votre panier</h1>
          {cart && cart.items.length > 0 ? (
            <>
              <div className="space-y-4">
                {cart.items.map((item) => (
                  <div key={item.id} className="flex items-center bg-light-beige p-4 rounded-lg shadow-md">
                    <Link to={`/products/${item.produit.id}`}>
                      <img
                        src={item.produit.photos[0].image || '/images/placeholder-image.jpg'}
                        alt={item.produit.nom}
                        className="w-20 h-20 object-cover rounded-md mr-4 hover:opacity-80 transition-opacity"
                      />
                    </Link>
                    <div className="flex-grow">
                      <h2 className="text-lg font-medium text-soft-brown">{item.produit.nom}</h2>
                      <div className="flex items-center space-x-4 mt-2">
                        <div className="flex items-center bg-white rounded-full px-2 py-1">
                          <button
                            onClick={() => handleQuantityChange(item.id, item.produit.id, -1)}
                            disabled={item.quantite <= 1}
                            className="p-1 text-soft-brown hover:text-soft-green transition-colors disabled:opacity-50"
                          >
                            <Minus className="w-5 h-5" />
                          </button>
                          <span className="w-12 text-center text-soft-brown font-medium">{item.quantite}</span>
                          <button
                            onClick={() => handleQuantityChange(item.id, item.produit.id, 1)}
                            className="p-1 text-soft-brown hover:text-soft-green transition-colors"
                          >
                            <Plus className="w-5 h-5" />
                          </button>
                        </div>
                        <p className="text-soft-brown">
                          {item.produit.prix_reduit ? (
                            <>
                              <span className="text-powder-pink font-bold">{item.produit.prix_reduit} FCFA</span>
                              <span className="text-soft-brown/60 line-through ml-2">{item.produit.prix} FCFA</span>
                            </>
                          ) : (
                            <span className="font-bold">{item.produit.prix.toFixed(2)} FCFA</span>
                          )}
                        </p>
                      </div>
                    </div>
                    <button
                      onClick={() => handleRemoveItem(item.produit.id)}
                      className="ml-4 text-soft-brown hover:text-powder-pink transition-colors"
                    >
                      <Trash2 className="w-6 h-6" />
                    </button>
                  </div>
                ))}
              </div>
              <div className="mt-6 text-right">
                <p className="text-xl font-medium text-soft-brown">Total : {cart.total} FCFA</p>
                <ButtonPrimary
                  onClick={() => navigate('/checkout')}
                  disabled={checkoutLoading}
                  className="mt-4 bg-soft-green hover:bg-soft-green/90"
                >
                  Passer à la caisse
                </ButtonPrimary>
              </div>
            </>
          ) : (
            <div className="text-center">
              <p className="text-soft-brown/70 mb-4">Votre panier est vide.</p>
              <Link to="/products">
                <ButtonPrimary className="bg-soft-green hover:bg-soft-green/90">
                  Continuer vos achats
                </ButtonPrimary>
              </Link>
            </div>
          )}
        </div>
      </PageContainer>
      <Footer />
    </>
  );
};

export default CartPage;

--- pages\CheckoutPage.tsx ---
import React, { useState, useEffect } from 'react';
import { useNavigate, Link } from 'react-router-dom';
import NavBar from '../components/NavBar';
import Footer from '../components/Footer';
import PageContainer from '../components/PageContainer';
import ButtonPrimary from '../components/ButtonPrimary';
import { getCart, validateCart, getAddresses, createAddress } from '../services/api';
import { AlertCircle, ChevronLeft } from 'lucide-react';

interface CartItem {
  id: string;
  produit: {
    id: string;
    nom: string;
    prix: number;
    prix_reduit?: number;
    photos: string[];
  };
  quantite: number;
}

interface Cart {
  id: string;
  items: CartItem[];
  total: string;
}

interface Adresse {
  id: string;
  nom: string;
  rue: string;
  ville: string;
  code_postal: string;
  pays: string;
  is_default: boolean;
}

const CheckoutPage: React.FC = () => {
  const navigate = useNavigate();
  const [cart, setCart] = useState<Cart | null>(null);
  const [addresses, setAddresses] = useState<Adresse[]>([]);
  const [selectedAddress, setSelectedAddress] = useState<string>('');
  const [newAddress, setNewAddress] = useState({ nom: '', rue: '', ville: '', code_postal: '', pays: '' });
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [checkoutLoading, setCheckoutLoading] = useState(false);

  useEffect(() => {
    const fetchData = async () => {
      const token = localStorage.getItem('access_token');
      if (!token) {
        navigate('/auth');
        return;
      }

      try {
        const [cartResponse, addressesResponse] = await Promise.all([getCart(), getAddresses()]);
        setCart(cartResponse.data);
        setAddresses(addressesResponse.data.results);
        if (addressesResponse.data.results.length > 0) {
          setSelectedAddress(addressesResponse.data.results[0].id);
        }
        setLoading(false);
      } catch (err: any) {
        console.error('Erreur lors du chargement:', err.response?.status, err.response?.data);
        setError('Erreur lors du chargement des données.');
        setLoading(false);
        if (err.response?.status === 401) {
          localStorage.removeItem('access_token');
          navigate('/auth');
        }
      }
    };


    fetchData();
  }, [navigate]);

  const handleAddAddress = async () => {
    try {
      const response = await createAddress(newAddress);
      setAddresses([...addresses, response.data]);
      setSelectedAddress(response.data.id);
      setNewAddress({ nom: '', rue: '', ville: '', code_postal: '', pays: '' });
      alert('Adresse ajoutée avec succès !');
    } catch (err: any) {
      alert('Erreur lors de l’ajout de l’adresse : ' + (err.response?.data?.detail || 'Vérifiez vos entrées.'));
    }
  };

  const handleCheckout = async () => {
    if (!cart || !selectedAddress) return;
    setCheckoutLoading(true);
    try {
      await validateCart(cart.id, { adresse_id: selectedAddress });
      alert('Commande validée avec succès !');
      navigate('/orders');
    } catch (err: any) {
      console.error('Erreur lors de la validation:', err.response?.status, err.response?.data);
      alert('Erreur lors de la validation : ' + (err.response?.data?.error || 'Vérifiez votre connexion.'));
    } finally {
      setCheckoutLoading(false);
    }
  };

  if (loading) {
    return <div className="text-center py-16">Chargement...</div>;
  }

  if (error) {
    return (
      <div className="text-center py-16 text-powder-pink">
        {error} <Link to="/auth" className="underline">Connectez-vous</Link>
      </div>
    );
  }

  return (
    <>
      <NavBar />
      <PageContainer>
        <div className="max-w-6xl mx-auto py-10 flex flex-col lg:flex-row lg:space-x-12">
          {/* Sidebar - Résumé du panier */}
          <aside className="lg:w-1/3 mb-8 lg:mb-0">
            <div className="bg-light-beige p-6 rounded-lg shadow-md">
              <h2 className="text-2xl font-medium text-soft-brown mb-4">Résumé de la commande</h2>
              {cart && cart.items.length > 0 ? (
                <>
                  <div className="space-y-4">
                    {cart.items.map((item) => (
                      <div key={item.id} className="flex items-center">
                        <img
                          src={item.produit.photos[0] || '/images/placeholder-image.jpg'}
                          alt={item.produit.nom}
                          className="w-16 h-16 object-cover rounded-md mr-4"
                        />
                        <div className="flex-grow">
                          <p className="text-soft-brown font-medium">{item.produit.nom}</p>
                          <p className="text-soft-brown/70">Quantité : {item.quantite}</p>
                          <p className="text-soft-brown">
                            {item.produit.prix_reduit ? (
                              <>{item.produit.prix_reduit.toFixed(2)} FCFA</>
                            ) : (
                              item.produit.prix.toFixed(2) + ' FCFA'
                            )}
                          </p>
                        </div>
                      </div>
                    ))}
                  </div>
                  <div className="mt-6 border-t border-soft-brown/30 pt-4">
                    <p className="text-xl font-medium text-soft-brown text-right">Total : {cart.total} FCFA</p>
                  </div>
                </>
              ) : (
                <p className="text-soft-brown/70">Votre panier est vide.</p>
              )}
            </div>
          </aside>

          {/* Main Content */}
          <div className="flex-1 lg:max-w-2xl">
            <div className="bg-light-beige p-6 rounded-lg shadow-md">
              <h2 className="text-2xl font-medium text-soft-brown mb-4">Finaliser la commande</h2>

              {/* Adresse de livraison */}
              <div className="space-y-6">
                <div>
                  <h3 className="text-lg font-medium text-soft-brown mb-2">Adresse de livraison</h3>
                  {addresses.length > 0 ? (
                    <select
                      value={selectedAddress}
                      onChange={(e) => setSelectedAddress(e.target.value)}
                      className="w-full p-2 border border-soft-brown/30 rounded-md focus:outline-none focus:ring-2 focus:ring-soft-green bg-white text-soft-brown"
                    >
                      {addresses.map((adresse) => (
                        <option key={adresse.id} value={adresse.id}>
                          {adresse.nom} - {adresse.rue}, {adresse.ville} ({adresse.code_postal})
                        </option>
                      ))}
                    </select>
                  ) : (
                    <p className="text-soft-brown/70">Aucune adresse enregistrée.</p>
                  )}
                </div>

                <div className="space-y-4">
                  <h4 className="text-soft-brown font-medium">Ajouter une nouvelle adresse</h4>
                  <input
                    type="text"
                    placeholder="Nom complet"
                    value={newAddress.nom}
                    onChange={(e) => setNewAddress({ ...newAddress, nom: e.target.value })}
                    className="w-full p-2 border border-soft-brown/30 rounded-md focus:outline-none focus:ring-2 focus:ring-soft-green bg-white text-soft-brown"
                  />
                  <input
                    type="text"
                    placeholder="Rue"
                    value={newAddress.rue}
                    onChange={(e) => setNewAddress({ ...newAddress, rue: e.target.value })}
                    className="w-full p-2 border border-soft-brown/30 rounded-md focus:outline-none focus:ring-2 focus:ring-soft-green bg-white text-soft-brown"
                  />
                  <input
                    type="text"
                    placeholder="Ville"
                    value={newAddress.ville}
                    onChange={(e) => setNewAddress({ ...newAddress, ville: e.target.value })}
                    className="w-full p-2 border border-soft-brown/30 rounded-md focus:outline-none focus:ring-2 focus:ring-soft-green bg-white text-soft-brown"
                  />
                  <input
                    type="text"
                    placeholder="Code postal"
                    value={newAddress.code_postal}
                    onChange={(e) => setNewAddress({ ...newAddress, code_postal: e.target.value })}
                    className="w-full p-2 border border-soft-brown/30 rounded-md focus:outline-none focus:ring-2 focus:ring-soft-green bg-white text-soft-brown"
                  />
                  <input
                    type="text"
                    placeholder="Pays"
                    value={newAddress.pays}
                    onChange={(e) => setNewAddress({ ...newAddress, pays: e.target.value })}
                    className="w-full p-2 border border-soft-brown/30 rounded-md focus:outline-none focus:ring-2 focus:ring-soft-green bg-white text-soft-brown"
                  />
                  <ButtonPrimary onClick={handleAddAddress} className="bg-soft-green hover:bg-soft-green/90">
                    Ajouter l’adresse
                  </ButtonPrimary>
                </div>

                {/* Validation */}
                <div className="mt-6 border-t border-soft-brown/30 pt-6">
                  <ButtonPrimary
                    onClick={handleCheckout}
                    disabled={checkoutLoading || !selectedAddress || !cart?.items.length}
                    className="w-full bg-soft-green hover:bg-soft-green/90"
                  >
                    {checkoutLoading ? 'Validation...' : 'Valider la commande'}
                  </ButtonPrimary>
                  <Link to="/cart" className="flex items-center justify-center mt-4 text-soft-brown hover:text-soft-green">
                    <ChevronLeft className="h-4 w-4 mr-1" />
                    Retour au panier
                  </Link>
                </div>
              </div>
            </div>
          </div>
        </div>
      </PageContainer>
      <Footer />
    </>
  );
};

export default CheckoutPage;

--- pages\ContactPage.tsx ---
import React, { useState } from 'react';
import NavBar from '../components/NavBar';
import Footer from '../components/Footer';
import PageContainer from '../components/PageContainer';
import ButtonPrimary from '../components/ButtonPrimary';
import { sendContactMessage } from '../services/api';

const ContactPage: React.FC = () => {
  const [formData, setFormData] = useState({ name: '', email: '', message: '' });
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [success, setSuccess] = useState<string | null>(null);

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!formData.name || !formData.email || !formData.message) {
      setError('Veuillez remplir tous les champs.');
      return;
    }

    setLoading(true);
    setError(null);
    setSuccess(null);

    try {
      const response = await sendContactMessage(formData);
      setSuccess(response.data.status);
      setFormData({ name: '', email: '', message: '' });
    } catch (err: any) {
      console.error('Erreur lors de l’envoi:', err.response?.data);
      setError(err.response?.data?.error || 'Erreur lors de l’envoi du message.');
    } finally {
      setLoading(false);
    }
  };

  return (
    <>
      <NavBar />
      <PageContainer>
        <div className="max-w-3xl mx-auto py-12 px-4 sm:px-6 lg:px-8">
          <h1 className="text-3xl font-serif font-medium text-soft-brown mb-6 text-center">Contactez-nous</h1>
          <p className="text-soft-brown/70 text-center mb-8">
            Une question ? Une demande spéciale ? Envoyez-nous un message, nous vous répondrons dans les plus brefs délais !
          </p>

          <form onSubmit={handleSubmit} className="bg-light-beige p-6 rounded-lg shadow-md space-y-6">
            <div>
              <label className="block text-soft-brown font-medium mb-1">Nom</label>
              <input
                type="text"
                name="name"
                value={formData.name}
                onChange={handleInputChange}
                className="w-full p-2 border border-soft-brown/30 rounded-md focus:outline-none focus:ring-2 focus:ring-soft-green"
                placeholder="Votre nom"
              />
            </div>
            <div>
              <label className="block text-soft-brown font-medium mb-1">Email</label>
              <input
                type="email"
                name="email"
                value={formData.email}
                onChange={handleInputChange}
                className="w-full p-2 border border-soft-brown/30 rounded-md focus:outline-none focus:ring-2 focus:ring-soft-green"
                placeholder="votre@email.com"
              />
            </div>
            <div>
              <label className="block text-soft-brown font-medium mb-1">Message</label>
              <textarea
                name="message"
                value={formData.message}
                onChange={handleInputChange}
                className="w-full p-2 border border-soft-brown/30 rounded-md focus:outline-none focus:ring-2 focus:ring-soft-green h-32"
                placeholder="Votre message..."
              />
            </div>
            {error && <p className="text-powder-pink text-center">{error}</p>}
            {success && <p className="text-soft-green text-center">{success}</p>}
            <ButtonPrimary
              type="submit"
              disabled={loading}
              className="w-full bg-soft-green hover:bg-soft-green/90"
            >
              {loading ? 'Envoi en cours...' : 'Envoyer'}
            </ButtonPrimary>
          </form>

          <div className="mt-8 text-center text-soft-brown/70">
            <p>Email : <a href="mailto:support@chezflora.com" className="hover:text-soft-green">support@chezflora.com</a></p>
            <p>Téléphone : +33 1 23 45 67 89</p>
          </div>
        </div>
      </PageContainer>
      <Footer />
    </>
  );
};

export default ContactPage;

--- pages\DevisPage.tsx ---
import React, { useState, useEffect } from 'react';
import { useNavigate, Link } from 'react-router-dom';
import NavBar from '../components/NavBar';
import Footer from '../components/Footer';
import PageContainer from '../components/PageContainer';
import ButtonPrimary from '../components/ButtonPrimary';
import { getDevis } from '../services/api';
import { motion, AnimatePresence } from 'framer-motion';

interface Devis {
  id: string;
  service: { id: string; nom: string };
  description: string;
  prix_propose: string | null;
  statut: 'en_attente' | 'accepte' | 'refuse';
  date_demande: string;
}

const DevisPage: React.FC = () => {
  const navigate = useNavigate();
  const [devisList, setDevisList] = useState<Devis[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchDevis = async () => {
      const token = localStorage.getItem('access_token');
      if (!token) {
        navigate('/auth');
        return;
      }

      try {
        const response = await getDevis();
        console.log('Réponse getDevis:', response.data); // Log pour vérifier
        setDevisList(response.data);
        setLoading(false);
      } catch (err: any) {
        console.error('Erreur lors du chargement des devis:', err.response?.status, err.response?.data);
        setError('Erreur lors du chargement des devis.');
        setLoading(false);
        if (err.response?.status === 401) {
          localStorage.removeItem('access_token');
          navigate('/auth');
        }
      }
    };

    fetchDevis();
  }, [navigate]);

  if (loading) {
    return <div className="text-center py-16">Chargement...</div>;
  }

  if (error) {
    return (
      <div className="text-center py-16 text-powder-pink">
        {error} <Link to="/auth" className="underline">Connectez-vous</Link>
      </div>
    );
  }

  return (
    <>
      <NavBar />
      <PageContainer>
        <div className="max-w-6xl mx-auto py-12 px-4 sm:px-6 lg:px-8">
          <h1 className="text-3xl font-serif font-medium text-soft-brown mb-6">Mes devis</h1>
          {devisList.length > 0 ? (
            <div className="space-y-6">
              <AnimatePresence>
                {devisList.map((devis) => (
                  <motion.div
                    key={devis.id}
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    exit={{ opacity: 0, y: -20 }}
                    transition={{ duration: 0.5 }}
                    className="bg-light-beige p-4 rounded-lg shadow-md"
                  >
                    <div className="flex justify-between items-center mb-4">
                      <h2 className="text-lg font-medium text-soft-brown">Devis #{devis.id} - {devis.service.nom}</h2>
                      <p className={`text-sm ${devis.statut === 'accepte' ? 'text-soft-green' : devis.statut === 'refuse' ? 'text-powder-pink' : 'text-soft-brown/70'}`}>
                        Statut : {devis.statut === 'en_attente' ? 'En attente' : devis.statut === 'accepte' ? 'Accepté' : 'Refusé'}
                      </p>
                    </div>
                    <p className="text-soft-brown/90 mb-2">{devis.description}</p>
                    <p className="text-soft-brown mb-2">
                      Prix proposé : {devis.prix_propose ? `${Number(devis.prix_propose).toFixed(2)} FCFA` : 'Non spécifié'}
                    </p>
                    <p className="text-soft-brown/70 text-sm">
                      Demandé le : {new Date(devis.date_demande).toLocaleDateString('fr-FR', {
                        day: '2-digit',
                        month: 'long',
                        year: 'numeric',
                      })}
                    </p>
                  </motion.div>
                ))}
              </AnimatePresence>
            </div>
          ) : (
            <div className="text-center">
              <p className="text-soft-brown/70 mb-4">Vous n’avez aucun devis pour le moment.</p>
              <Link to="/services">
                <ButtonPrimary className="bg-soft-green hover:bg-soft-green/90">
                  Découvrir nos services
                </ButtonPrimary>
              </Link>
            </div>
          )}
        </div>
      </PageContainer>
      <Footer />
    </>
  );
};

export default DevisPage;

--- pages\HomePage.tsx ---
import React, { useState, useEffect } from 'react';
import { Truck, Flower, Heart, Star } from 'lucide-react';
import NavBar from '../components/NavBar';
import Footer from '../components/Footer';
import PageContainer from '../components/PageContainer';
import HeroBanner from '../components/HeroBanner';
import FeaturedProducts from '../components/FeaturedProducts';
import ServicesOverview from '../components/ServicesOverview';
import UpcomingWorkshops from '../components/UpcomingWorkshops';
import RecentArticles from '../components/RecentArticles';
import WhyChooseUs from '../components/WhyChooseUs';
import FeaturedPromotions from '../components/FeaturedPromotions';
import { getProducts, getServices, getWorkshops, getArticles, getPromotions } from '../services/api';

export default function HomePage() {
  const [products, setProducts] = useState([]);
  const [services, setServices] = useState([]);
  const [workshops, setWorkshops] = useState([]);
  const [articles, setArticles] = useState([]);
  const [promotions, setPromotions] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  const features = [
    { title: 'Qualité premium', description: 'Nous sélectionnons les meilleures fleurs et plantes', icon: <Star className="w-6 h-6 text-soft-green" /> },
    { title: 'Expertise florale', description: 'Notre équipe de fleuristes passionnés à votre service', icon: <Flower className="w-6 h-6 text-soft-green" /> },
    { title: 'Satisfaction garantie', description: 'Nous nous engageons à vous offrir le meilleur service', icon: <Heart className="w-6 h-6 text-soft-green" /> },
  ];

  useEffect(() => {
    const fetchData = async () => {
      try {
        const [productsRes, servicesRes, workshopsRes, articlesRes, promotionsRes] = await Promise.all([
          getProducts(),
          getServices(),
          getWorkshops(),
          getArticles(),
          getPromotions(),
        ]);

        setProducts(productsRes.data.results.slice(0, 4).map((p: any) => ({
          id: p.id,
          nom: p.nom,
          prix: parseFloat(p.prix),
          prix_reduit: p.prix_reduit ? parseFloat(p.prix_reduit) : undefined,
          photos: p.photos || [],
          description: p.description || '',
        })));

        setServices(servicesRes.data.results.slice(0, 3).map((s: any, index: number) => ({
          title: s.nom,
          description: s.description,
          icon: [<Truck key="truck" className="w-6 h-6 text-soft-green" />, <Flower key="flower" className="w-6 h-6 text-soft-green" />, <Heart key="heart" className="w-6 h-6 text-soft-green" />][index % 3],
          link: `/services/${s.id}`,
        })));

        setWorkshops(workshopsRes.data.results.slice(0, 3).map((w: any) => ({
          id: w.id,
          title: w.titre,
          date: new Date(w.date).toLocaleDateString('fr-FR', { day: '2-digit', month: 'long', year: 'numeric' }),
          places: w.places_disponibles,
          link: `/ateliers/${w.id}`,
        })));

        setArticles(articlesRes.data.results.slice(0, 3).map((a: any) => ({
          id: a.id,
          title: a.titre,
          excerpt: a.contenu.substring(0, 100) + '...',
          imageUrl: a.image || '/images/placeholder.jpg',
          link: `/blog/${a.id}`,
        })));

        setPromotions(promotionsRes.data.results.map((promo: any) => ({
          id: promo.id,
          nom: promo.nom,
          description: promo.description,
          produits: promo.produits.map((p: any) => ({
            id: p.id,
            nom: p.nom,
            prix: parseFloat(p.prix),
            prix_reduit: p.prix_reduit ? parseFloat(p.prix_reduit) : undefined,
            photos: p.photos || [],
          })),
        })));

        setLoading(false);
      } catch (err) {
        setError('Erreur lors du chargement des données');
        setLoading(false);
      }
    };

    fetchData();
  }, []);
  console.log(promotions)


  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-off-white">
        <p className="text-soft-brown text-xl">Chargement...</p>
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-off-white">
        <p className="text-powder-pink text-xl">{error}</p>
      </div>
    );
  }

  return (
    <>
      <NavBar />
      <PageContainer className="p-0">
        <main>
          <HeroBanner
            title="Bienvenue chez ChezFlora"
            subtitle="Découvrez notre sélection de fleurs et plantes pour embellir votre quotidien"
            buttonText="Découvrir nos produits"
            buttonLink="/products"
            backgroundImage="/images/hero-banner.jpg"
          />
          <FeaturedPromotions promotions={promotions} title="Nos offres spéciales" />
          <FeaturedProducts products={products} title="Nos produits phares" />
          <ServicesOverview services={services} title="Nos services" />
          <UpcomingWorkshops workshops={workshops} title="Ateliers à venir" />
          <RecentArticles articles={articles} title="Nos derniers articles" />
          <WhyChooseUs features={features} title="Pourquoi choisir ChezFlora ?" />
        </main>
      </PageContainer>
      <Footer />
    </>
  );
}

--- pages\OrdersPage.tsx ---
import React, { useState, useEffect } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import NavBar from '../components/NavBar';
import Footer from '../components/Footer';
import PageContainer from '../components/PageContainer';
import ButtonPrimary from '../components/ButtonPrimary';
import { getOrders } from '../services/api';
import axios from 'axios';

interface LigneCommande {
  id: string;
  produit: string;
  produit_nom: string;
  quantite: number;
  prix_unitaire: string;
}

interface Paiement {
  id: string;
  type_transaction: string;
  montant: string;
  date_creation: string;
}

interface Client {
  id: string;
  username: string;
  email: string;
  role: string;
}

interface Commande {
  id: string;
  client: Client;
  date: string;
  statut: string;
  total: string;
  lignes: LigneCommande[];
  paiement: Paiement;
  is_active: boolean;
  date_mise_a_jour: string;
}

const OrdersPage: React.FC = () => {
  const navigate = useNavigate();
  const [orders, setOrders] = useState<Commande[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [cancelLoading, setCancelLoading] = useState<string | null>(null);

  useEffect(() => {
    const fetchOrders = async () => {
      const token = localStorage.getItem('access_token');
      console.log('Token dans OrdersPage:', token);
      if (!token) {
        console.log('Pas de token, redirection vers /auth');
        navigate('/auth');
        return;
      }

      try {
        const response = await getOrders();
        console.log('Réponse getOrders:', response.data);
        setOrders(response.data.results);
        setLoading(false);
      } catch (err: any) {
        console.error('Erreur lors du chargement des commandes:', err.response?.status, err.response?.data);
        setError('Erreur lors du chargement des commandes.');
        setLoading(false);
        if (err.response?.status === 401) {
          localStorage.removeItem('access_token');
          navigate('/auth');
        }
      }
    };

    fetchOrders();
  }, [navigate]);

  const handleCancelOrder = async (orderId: string) => {
    if (!window.confirm('Êtes-vous sûr de vouloir annuler cette commande ?')) return;
    setCancelLoading(orderId);
    try {
      const token = localStorage.getItem('access_token');
      const response = await axios.post(
        `http://chezflora-api.onrender.com/api/commandes/${orderId}/cancel/`,
        {},
        { headers: { Authorization: `Bearer ${token}` } }
      );
      console.log('Réponse annulation commande:', response.data);
      const updatedOrders = await getOrders();
      setOrders(updatedOrders.data.results);
      alert('Commande annulée avec succès.');
    } catch (err: any) {
      console.error('Erreur lors de l’annulation:', err.response?.data);
      alert('Erreur lors de l’annulation : ' + (err.response?.data?.error || 'Vérifiez votre connexion.'));
    } finally {
      setCancelLoading(null);
    }
  };

  if (loading) {
    return <div className="text-center py-16">Chargement...</div>;
  }

  if (error) {
    return (
      <div className="text-center py-16 text-powder-pink">
        {error} <Link to="/auth" className="underline">Connectez-vous</Link>
      </div>
    );
  }

  return (
    <>
      <NavBar />
      <PageContainer>
        <div className="max-w-4xl mx-auto py-8 px-4 sm:px-6 lg:px-8">
          <h1 className="text-3xl font-serif font-medium text-soft-brown mb-6">Mes commandes</h1>
          {orders.length > 0 ? (
            <div className="space-y-6">
              {orders.map((order) => {
                const canCancel = ['en_attente', 'en_cours'].includes(order.statut);
                return (
                  <div key={order.id} className="bg-light-beige p-4 rounded-lg shadow-md">
                    <div className="flex justify-between items-center mb-4">
                      <h2 className="text-lg font-medium text-soft-brown">Commande #{order.id}</h2>
                      <div className="text-right">
                        <p className="text-soft-brown/70">
                          {new Date(order.date).toLocaleDateString('fr-FR', {
                            day: '2-digit',
                            month: 'long',
                            year: 'numeric',
                          })}
                        </p>
                        <p className={`text-sm ${order.statut === 'validée' ? 'text-soft-green' : order.statut === 'annulee' ? 'text-powder-pink' : 'text-soft-brown'}`}>
                          Statut : {order.statut}
                        </p>
                      </div>
                    </div>
                    <div className="space-y-2">
                      {order.lignes.map((ligne) => (
                        <div key={ligne.id} className="flex justify-between">
                          <span className="text-soft-brown">
                            {ligne.produit_nom} (x{ligne.quantite})
                          </span>
                          <span className="text-soft-brown">
                            {Number(ligne.prix_unitaire).toFixed(2)} FCFA
                          </span>
                        </div>
                      ))}
                    </div>
                    <div className="mt-4 flex justify-between items-center">
                      <p className="text-xl font-medium text-soft-brown">Total : {order.total} FCFA</p>
                      {canCancel && (
                        <ButtonPrimary
                          onClick={() => handleCancelOrder(order.id)}
                          disabled={cancelLoading === order.id}
                          className="bg-powder-pink hover:bg-powder-pink/90"
                        >
                          {cancelLoading === order.id ? 'Annulation...' : 'Annuler la commande'}
                        </ButtonPrimary>
                      )}
                    </div>
                    <p className="text-sm text-soft-brown/70 mt-2">Mis à jour : {new Date(order.date_mise_a_jour).toLocaleDateString('fr-FR')}</p>
                  </div>
                );
              })}
            </div>
          ) : (
            <div className="text-center">
              <p className="text-soft-brown/70 mb-4">Vous n’avez aucune commande pour le moment.</p>
              <Link to="/products">
                <ButtonPrimary className="bg-soft-green hover:bg-soft-green/90">
                  Commencer vos achats
                </ButtonPrimary>
              </Link>
            </div>
          )}
        </div>
      </PageContainer>
      <Footer />
    </>
  );
};

export default OrdersPage;

--- pages\OtpPage.tsx ---
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import NavBar from '../components/Navbar';
import Footer from '../components/Footer';
import PageContainer from '../components/PageContainer';
import AuthOtpForm from '../components/AuthOtpForm';
import { verifyOtp, resendOtp } from '../services/api';

const OtpPage: React.FC = () => {
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState('');
  const [successMessage, setSuccessMessage] = useState('');
  const navigate = useNavigate();
  const userId = localStorage.getItem('pendingUserId') || '';

//   useEffect(() => {
//     if (!userId) {
//       setError('Aucun utilisateur en attente de vérification. Veuillez vous inscrire à nouveau.');
//       setTimeout(() => navigate('/auth'), 3000);
//     }
//   }, [userId, navigate]);

  const handleOtpSubmit = async (data: { userId: string; otp: string }) => {
    setIsLoading(true);
    setError('');
    setSuccessMessage('');
    try {
      await verifyOtp({ user_id: data.userId, code: data.otp });
      localStorage.removeItem('pendingUserId');
      setSuccessMessage('Vérification réussie ! Redirection en cours...');
      setTimeout(() => navigate('/'), 2000);
    } catch (err: any) {
      if (!err.response) {
        setError('Erreur réseau : impossible de contacter le serveur');
      } else {
        const apiError = err.response.data?.error || err.response.data?.detail;
        setError(apiError || 'Code OTP invalide');
      }
    } finally {
      setIsLoading(false);
    }
  };

  const handleResendOtp = async () => {
    setError('');
    setSuccessMessage('');
    try {
      await resendOtp({ user_id: userId });
      setSuccessMessage('Un nouveau code OTP a été envoyé à votre adresse email.');
    } catch (err: any) {
      if (!err.response) {
        setError('Erreur réseau : impossible de contacter le serveur');
      } else {
        const apiError = err.response.data?.error || err.response.data?.detail;
        setError(apiError || 'Erreur lors du renvoi OTP');
      }
    }
  };

  return (
    <>
      <NavBar />
      <PageContainer>
        <div className="max-w-md mx-auto mt-10">
          <AuthOtpForm
            userId={userId}
            onSubmit={handleOtpSubmit}
            isLoading={isLoading}
            error={error}
            successMessage={successMessage} // Passer successMessage au formulaire
            resendOtp={handleResendOtp}
          />
        </div>
      </PageContainer>
      <Footer />
    </>
  );
};

export default OtpPage;

--- pages\ProductDetailPage.tsx ---
import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { Link } from 'react-router-dom';
import { motion, AnimatePresence } from 'framer-motion';
import NavBar from '../components/NavBar';
import Footer from '../components/Footer';
import PageContainer from '../components/PageContainer';
import ProductCard from '../components/ProductCard';
import { getProduct, getProducts, addToCart, getCart, getWishlist, ajouterProduitWishlist, supprimerProduitWishlist } from '../services/api';
import { ChevronLeft, ChevronRight, ShoppingCart, Heart, Minus, Plus } from 'lucide-react';


interface Photo {
  id:number;
  image: string;
}

interface Product {
  id: string;
  nom: string;
  prix: number;
  prix_reduit?: number;
  photos: Photo[];
  description: string;
  categorie: number;
  stock: number;
}

interface Wishlist {
  id: string;
  produits: { id: string }[];
}

const ProductDetailPage: React.FC = () => {
  const { id } = useParams<{ id: string }>();
  const navigate = useNavigate();
  const [product, setProduct] = useState<Product | null>(null);
  const [relatedProducts, setRelatedProducts] = useState<Product[]>([]);
  const [currentPhotoIndex, setCurrentPhotoIndex] = useState(0);
  const [quantity, setQuantity] = useState(1);
  const [cartId, setCartId] = useState<string | null>(null);
  const [isInWishlist, setIsInWishlist] = useState(false);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [cartLoading, setCartLoading] = useState(false);

  useEffect(() => {
    const fetchData = async () => {
      try {
        // Récupérer les détails du produit (non paginé, donc data direct)
        const productRes = await getProduct(id!);
        const productData = {
          id: productRes.data.id,
          nom: productRes.data.nom,
          prix: parseFloat(productRes.data.prix),
          prix_reduit: productRes.data.prix_reduit ? parseFloat(productRes.data.prix_reduit) : undefined,
          photos: productRes.data.photos || [],
          description: productRes.data.description || '',
          categorie: productRes.data.categorie,
          stock: productRes.data.stock,
        };
        setProduct(productData);

        // Récupérer les produits similaires (paginé, donc data.results)
        const productsRes = await getProducts({ categorie: productData.categorie });
        const related = productsRes.data.results // Changement ici : data.results au lieu de data
          .filter((p: any) => p.id !== id)
          .slice(0, 4)
          .map((p: any) => ({
            id: p.id,
            nom: p.nom,
            prix: parseFloat(p.prix),
            prix_reduit: p.prix_reduit ? parseFloat(p.prix_reduit) : undefined,
            photos: p.photos || [],
            description: p.description || '',
            categorie: p.categorie,
            stock: p.stock,
          }));
        setRelatedProducts(related);

        // Récupérer le panier et la wishlist (vérifier si paginé)
        const token = localStorage.getItem('access_token');
        if (token) {
          try {
            const [cartRes, wishlistRes] = await Promise.all([getCart(), getWishlist()]);
            
            // Panier :假设 getCart renvoie un seul objet (non paginé)
            setCartId(cartRes.data.id);

            // Wishlist : Vérifier si paginé (data.results) ou non (data direct)
            const wishlistData = wishlistRes.data.results 
              ? wishlistRes.data.results[0] || { produits: [] } // Si paginé, prendre le premier élément
              : wishlistRes.data.length > 0 ? wishlistRes.data[0] : { produits: [] }; // Si non paginé
            setIsInWishlist(wishlistData.produits.some((p: { id: string }) => p.id === id));
          } catch (err: any) {
            console.error('Erreur lors de la récupération du panier ou wishlist:', err);
          }
        }

        setLoading(false);
      } catch (err) {
        setError('Erreur lors du chargement du produit');
        setLoading(false);
      }
    };

    if (id) fetchData();
  }, [id]);

  const handlePrevPhoto = () => {
    if (product && product.photos.length > 0) {
      setCurrentPhotoIndex((prev) => (prev > 0 ? prev - 1 : product.photos.length - 1));
    }
  };

  const handleNextPhoto = () => {
    if (product && product.photos.length > 0) {
      setCurrentPhotoIndex((prev) => (prev < product.photos.length - 1 ? prev + 1 : 0));
    }
  };

  const handleQuantityChange = (delta: number) => {
    if (!product) return;
    setQuantity((prev) => {
      const newQty = prev + delta;
      return newQty > 0 && newQty <= product.stock ? newQty : prev;
    });
  };

  const handleAddToCart = async () => {
    if (!product) return;
    const token = localStorage.getItem('access_token');
    if (!token) {
      navigate('/auth');
      return;
    }

    setCartLoading(true);
    let currentCartId = cartId;
    if (!currentCartId) {
      try {
        const cartRes = await getCart();
        currentCartId = cartRes.data.id; // Non paginé, donc data direct
        setCartId(currentCartId);
      } catch (err: any) {
        if (err.response?.status === 401) {
          localStorage.removeItem('access_token');
          navigate('/auth');
        } else {
          alert('Erreur lors de la récupération du panier.');
        }
        setCartLoading(false);
        return;
      }
    }

    try {
      await addToCart(currentCartId!, { produit_id: product.id, quantite: quantity });
      alert(`${quantity} ${product.nom} ajouté(s) au panier !`);
      setQuantity(1);
    } catch (err: any) {
      if (err.response?.status === 401) {
        localStorage.removeItem('access_token');
        navigate('/auth');
      } else {
        alert('Erreur lors de l’ajout au panier.');
      }
    } finally {
      setCartLoading(false);
    }
  };

  const handleToggleWishlist = async () => {
    if (!id) return;
    const token = localStorage.getItem('access_token');
    if (!token) {
      navigate('/auth');
      return;
    }

    try {
      if (isInWishlist) {
        await supprimerProduitWishlist(id);
        setIsInWishlist(false);
        alert('Produit retiré de la liste de souhaits !');
      } else {
        await ajouterProduitWishlist(id);
        setIsInWishlist(true);
        alert('Produit ajouté à la liste de souhaits !');
      }
    } catch (err: any) {
      console.error('Erreur lors de la modification de la wishlist:', err.response?.data);
      if (err.response?.status === 401) {
        localStorage.removeItem('access_token');
        navigate('/auth');
      } else {
        alert('Erreur : ' + (err.response?.data?.error || 'Vérifiez votre connexion.'));
      }
    }
  };

  if (loading) {
    return (
      <div className="flex justify-center items-center h-screen">
        <div className="animate-spin rounded-full h-32 w-32 border-t-2 border-b-2 border-soft-green"></div>
      </div>
    );
  }

  if (error || !product) {
    return (
      <div className="flex flex-col items-center justify-center h-screen">
        <div className="text-3xl font-serif text-powder-pink mb-4">{error || 'Produit non trouvé'}</div>
        <button
          onClick={() => window.history.back()}
          className="bg-soft-green text-white px-6 py-2 rounded-md hover:bg-soft-green/90 transition-colors"
        >
          Retour
        </button>
      </div>
    );
  }

  const currentPhoto = product.photos.length > 0 ? product.photos[currentPhotoIndex] : '/images/placeholder-image.jpg';

  return (
    <>
      <NavBar />
      <PageContainer>
        <motion.div
          className="max-w-6xl mx-auto py-12 px-4 sm:px-6 lg:px-8"
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
        >
          {/* Breadcrumb */}
          <nav className="text-sm font-medium text-soft-brown/60 mb-8">
            <ol className="list-none p-0 inline-flex">
              <li className="flex items-center">
                <Link to="/" className="hover:text-soft-green transition-colors">
                  Accueil
                </Link>
                <ChevronRight className="w-4 h-4 mx-2" />
              </li>
              <li className="flex items-center">
                <Link to="/products" className="hover:text-soft-green transition-colors">
                  Produits
                </Link>
                <ChevronRight className="w-4 h-4 mx-2" />
              </li>
              <li>{product.nom}</li>
            </ol>
          </nav>

          {/* Détails du produit */}
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-12">
            <div className="relative">
              <motion.img
                key={currentPhoto.image}
                src={currentPhoto.image}
                alt={`${product.nom} - Photo ${currentPhotoIndex + 1}`}
                className="w-full h-[500px] object-cover rounded-lg shadow-lg"
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                transition={{ duration: 0.5 }}
              />
              {product.photos.length > 1 && (
                <>
                  <button
                    onClick={handlePrevPhoto}
                    className="absolute top-1/2 left-4 transform -translate-y-1/2 bg-white/80 text-soft-brown p-2 rounded-full hover:bg-white transition-colors"
                  >
                    <ChevronLeft className="w-6 h-6" />
                  </button>
                  <button
                    onClick={handleNextPhoto}
                    className="absolute top-1/2 right-4 transform -translate-y-1/2 bg-white/80 text-soft-brown p-2 rounded-full hover:bg-white transition-colors"
                  >
                    <ChevronRight className="w-6 h-6" />
                  </button>
                  <div className="absolute bottom-4 left-0 right-0 flex justify-center space-x-2">
                    {product.photos.map((_, index) => (
                      <button
                        key={index}
                        onClick={() => setCurrentPhotoIndex(index)}
                        className={`w-3 h-3 rounded-full transition-colors ${
                          index === currentPhotoIndex ? 'bg-soft-green' : 'bg-white/60 hover:bg-white'
                        }`}
                      />
                    ))}
                  </div>
                </>
              )}
            </div>
            <div className="flex flex-col justify-between">
              <div>
                <h1 className="text-4xl font-serif font-medium text-soft-brown mb-4">{product.nom}</h1>
                <p className="text-soft-brown/80 mb-6 text-lg leading-relaxed">{product.description}</p>
                <div className="flex items-baseline mb-4">
                  {product.prix_reduit ? (
                    <>
                      <span className="text-powder-pink text-3xl font-bold">{product.prix_reduit.toFixed(2)} FCFA</span>
                      <span className="text-soft-brown/60 text-xl line-through ml-4">{product.prix.toFixed(2)} FCFA</span>
                    </>
                  ) : (
                    <span className="text-soft-brown text-3xl font-bold">{product.prix.toFixed(2)} FCFA</span>
                  )}
                </div>
                <p className="text-soft-brown/70 mb-4">Stock restant : {product.stock}</p>
              </div>
              <div className="flex items-center space-x-4">
                {/* Sélecteur de quantité */}
                <div className="flex items-center bg-light-beige rounded-full px-2 py-1">
                  <button
                    onClick={() => handleQuantityChange(-1)}
                    disabled={quantity <= 1}
                    className="p-1 text-soft-brown hover:text-soft-green transition-colors disabled:opacity-50"
                  >
                    <Minus className="w-5 h-5" />
                  </button>
                  <span className="w-12 text-center text-soft-brown font-medium">{quantity}</span>
                  <button
                    onClick={() => handleQuantityChange(1)}
                    disabled={quantity >= product.stock}
                    className="p-1 text-soft-brown hover:text-soft-green transition-colors disabled:opacity-50"
                  >
                    <Plus className="w-5 h-5" />
                  </button>
                </div>
                <button
                  onClick={handleAddToCart}
                  disabled={cartLoading || product.stock === 0}
                  className={`flex-1 flex items-center justify-center text-lg font-medium px-6 py-3 rounded-md transition-colors ${
                    cartLoading || product.stock === 0
                      ? 'bg-soft-green/50 text-white cursor-not-allowed'
                      : 'bg-soft-green text-white hover:bg-soft-green/90'
                  }`}
                >
                  <ShoppingCart className="w-5 h-5 mr-2" />
                  {cartLoading ? 'Ajout en cours...' : product.stock === 0 ? 'Rupture de stock' : 'Ajouter au panier'}
                </button>
                <button
                  onClick={handleToggleWishlist}
                  className={`p-3 rounded-md transition-colors ${
                    isInWishlist ? 'bg-powder-pink text-white' : 'bg-powder-pink/20 text-powder-pink hover:bg-powder-pink/30'
                  }`}
                >
                  <Heart className="w-6 h-6" fill={isInWishlist ? 'currentColor' : 'none'} />
                </button>
              </div>
            </div>
          </div>

          {relatedProducts.length > 0 && (
            <motion.div
              className="mt-24"
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.5, Wdelay: 0.2 }}
            >
              <h2 className="text-3xl font-serif font-medium text-soft-brown mb-8">Produits similaires</h2>
              <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-8">
                <AnimatePresence>
                  {relatedProducts.map((relatedProduct, index) => (
                    <motion.div
                      key={relatedProduct.id}
                      initial={{ opacity: 0, y: 20 }}
                      animate={{ opacity: 1, y: 0 }}
                      exit={{ opacity: 0, y: -20 }}
                      transition={{ duration: 0.5, delay: index * 0.1 }}
                    >
                      <ProductCard product={relatedProduct} />
                    </motion.div>
                  ))}
                </AnimatePresence>
              </div>
            </motion.div>
          )}
        </motion.div>
      </PageContainer>
      <Footer />
    </>
  );
};

export default ProductDetailPage;

--- pages\ProductsPage.tsx ---
"use client"

import type React from "react"
import { useState, useEffect } from "react"
import { motion, AnimatePresence } from "framer-motion"
import NavBar from "../components/NavBar"
import Footer from "../components/Footer"
import PageContainer from "../components/PageContainer"
import ProductCard from "../components/ProductCard"
import ButtonPrimary from "../components/ButtonPrimary"
import TextFieldCustom from "../components/TextFieldCustom"
import LoadingSpinner from "../components/LoadingSpinner"
import { Search, X } from "lucide-react"
import { getProducts, getCategories } from "../services/api"

interface Product {
  id: string
  nom: string
  prix: number
  prix_reduit?: number
  photos: string[]
  description: string
  categorie: number
}

interface Category {
  id: number
  nom: string
}

const ProductsPage: React.FC = () => {
  const [products, setProducts] = useState<Product[]>([])
  const [categories, setCategories] = useState<Category[]>([])
  const [searchQuery, setSearchQuery] = useState("")
  const [selectedCategory, setSelectedCategory] = useState<number | "">("")
  const [showPromotionsOnly, setShowPromotionsOnly] = useState(false)
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)

  useEffect(() => {
    const fetchData = async () => {
      try {
        const [productsRes, categoriesRes] = await Promise.all([getProducts(), getCategories()])
        setProducts(
          productsRes.data.results.map((p: any) => ({
            id: p.id,
            nom: p.nom,
            prix: Number.parseFloat(p.prix),
            prix_reduit: p.prix_reduit ? Number.parseFloat(p.prix_reduit) : undefined,
            photos: p.photos || [],
            description: p.description || "",
            categorie: p.categorie,
          })),
        )
        setCategories([{ id: -1, nom: "Toutes" }, ...categoriesRes.data.results]) // Ajout "Toutes" comme option
        setLoading(false)
      } catch (err) {
        setError("Erreur lors du chargement des produits")
        setLoading(false)
      }
    }

    fetchData()
  }, [])
  console.log(products)

  const filteredProducts = products.filter((product) => {
    const matchesSearch = product.nom.toLowerCase().includes(searchQuery.toLowerCase())
    const matchesCategory =
      selectedCategory === "" || selectedCategory === -1 || product.categorie.id === selectedCategory
    const matchesPromotion = !showPromotionsOnly || product.prix_reduit !== product.prix
    return matchesSearch && matchesCategory && matchesPromotion
  })

  if (loading) {
    return (
      <div className="flex justify-center items-center h-screen">
        <LoadingSpinner />
      </div>
    )
  }

  if (error) {
    return (
      <div className="flex flex-col items-center justify-center h-screen">
        <p className="text-powder-pink text-xl mb-4">{error}</p>
        <ButtonPrimary onClick={() => window.location.reload()}>Réessayer</ButtonPrimary>
      </div>
    )
  }

  return (
    <>
      <NavBar />
      <PageContainer>
        {/* En-tête */}
        <div className="relative h-64 bg-soft-green overflow-hidden">
          <img
            src="/images/products-header.jpg"
            alt="Produits floraux"
            className="w-full h-full object-cover opacity-50"
          />
          <div className="absolute inset-0 bg-gradient-to-r from-soft-green/80 to-transparent" />
          <div className="absolute inset-0 flex items-center justify-center">
            <motion.h1
              className="text-5xl font-serif font-medium text-white text-center"
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.8 }}
            >
              Nos créations florales
            </motion.h1>
          </div>
        </div>

        <div className=" mx-auto py-12 px-4 sm:px-6 lg:px-8">
          {/* Barre de filtres */}
          <motion.div
            className="bg-white p-4 rounded-xl shadow-lg mb-12 sticky top-4 z-10 border border-soft-brown/20"
            initial={{ opacity: 0, y: -20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5 }}
            id="searchSection"
          >
            <div className="flex flex-col space-y-4">
              {/* Première ligne: Recherche et réinitialisation */}
              <div className="flex items-center gap-3">
                {/* Recherche */}
                <div className="flex-grow relative">
                  <TextFieldCustom
                    id="search"
                    label="Rechercher"
                    value={searchQuery}
                    onChange={setSearchQuery}
                    placeholder="Rechercher un produit..."
                    icon={<Search className="w-5 h-5 text-soft-brown/60" />}
                  />

                  {/* Bouton de réinitialisation intégré */}
                  {(searchQuery || selectedCategory !== "" || showPromotionsOnly) && (
                    <motion.button
                      initial={{ scale: 0.8, opacity: 0 }}
                      animate={{ scale: 1, opacity: 1 }}
                      exit={{ scale: 0.8, opacity: 0 }}
                      className="absolute right-2 top-1/2 -translate-y-1/2 p-1.5 rounded-full bg-powder-pink/10 hover:bg-powder-pink/20 text-powder-pink transition-colors duration-200"
                      onClick={() => {
                        setSearchQuery("")
                        setSelectedCategory("")
                        setShowPromotionsOnly(false)
                      }}
                      title="Réinitialiser tous les filtres"
                    >
                      <X className="w-4 h-4" />
                    </motion.button>
                  )}
                </div>
              </div>

              {/* Deuxième ligne: Filtres de catégories et checkbox */}
              <div className="flex flex-wrap items-center gap-2">
                <div className="flex flex-wrap gap-2 flex-grow">
                  {categories.map((category) => (
                    <motion.button
                      key={category.id}
                      onClick={() => setSelectedCategory(category.id === -1 ? "" : category.id)}
                      className={`px-4 py-2 rounded-full text-sm font-medium transition-all duration-300 ${
                        selectedCategory === (category.id === -1 ? "" : category.id)
                          ? "bg-soft-green text-white shadow-md"
                          : "bg-light-beige text-soft-brown hover:bg-soft-green/20"
                      }`}
                      whileHover={{ scale: 1.05 }}
                      whileTap={{ scale: 0.95 }}
                    >
                      {category.nom}
                    </motion.button>
                  ))}
                </div>

                <motion.div
                  className="flex items-center ml-auto bg-light-beige px-3 py-2 rounded-full"
                  whileHover={{ scale: 1.05 }}
                >
                  <input
                    type="checkbox"
                    checked={showPromotionsOnly}
                    onChange={(e) => setShowPromotionsOnly(e.target.checked)}
                    className="h-5 w-5 text-soft-green border-soft-brown/30 rounded focus:ring-soft-green mr-2"
                    id="promotions-only"
                  />
                  <label htmlFor="promotions-only" className="text-soft-brown text-sm whitespace-nowrap">
                    En promotion
                  </label>
                </motion.div>
              </div>

              {/* Indicateur de filtres actifs */}
              {(searchQuery || selectedCategory !== "" || showPromotionsOnly) && (
                <div className="flex items-center pt-1">
                  <p className="text-xs text-soft-brown/60 italic">
                    Filtres actifs:
                    {searchQuery && <span className="ml-1">Recherche</span>}
                    {selectedCategory !== "" && <span className="ml-1">Catégorie</span>}
                    {showPromotionsOnly && <span className="ml-1">Promotions</span>}
                  </p>
                </div>
              )}
            </div>
          </motion.div>

          {/* Grille de produits */}
          <motion.div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-8" layout>
            <AnimatePresence>
              {filteredProducts.length > 0 ? (
                filteredProducts.map((product) => (
                  <motion.div
                    key={product.id}
                    layout
                    layoutId={product.id}
                    initial={{ opacity: 0 }}
                    animate={{ opacity: 1 }}
                    exit={{ opacity: 0 }}
                    transition={{ duration: 0.5 }}
                  >
                    <ProductCard product={product} />
                  </motion.div>
                ))
              ) : (
                <motion.p
                  className="text-center text-soft-brown/70 col-span-full text-lg"
                  initial={{ opacity: 0 }}
                  animate={{ opacity: 1 }}
                  exit={{ opacity: 0 }}
                  transition={{ duration: 0.5 }}
                >
                  Aucun produit ne correspond à vos critères.
                </motion.p>
              )}
            </AnimatePresence>
          </motion.div>
        </div>
      </PageContainer>
      <Footer />
    </>
  )
}

export default ProductsPage



--- pages\RealisationsPage.tsx ---
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import NavBar from '../components/NavBar';
import Footer from '../components/Footer';
import PageContainer from '../components/PageContainer';
import { getRealisations } from '../services/api';
import { motion, AnimatePresence } from 'framer-motion';
import { Calendar } from 'lucide-react';

interface Service {
    id: string,
    nom: string
}

interface Realisation {
  id: string;
  titre: string;
  description: string;
  photos: string[];  // Supposons une liste d’URLs pour simplifier
  date_creation: string;
  service: Service;
}

const RealisationsPage: React.FC = () => {
  const navigate = useNavigate();
  const [realisations, setRealisations] = useState<Realisation[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchRealisations = async () => {
      try {
        const response = await getRealisations();
        // Si photos est une chaîne JSON ou séparée, on pourrait parser ici si besoin
        setRealisations(response.data.results.map((r: any) => ({
          ...r,
          photos: typeof r.photos === 'string' ? JSON.parse(r.photos) : r.photos,  // Ajuster selon le format
        })));
        setLoading(false);
      } catch (err: any) {
        console.error('Erreur lors du chargement:', err.response?.data);
        setError('Erreur lors du chargement des réalisations.');
        setLoading(false);
      }
    };

    fetchRealisations();
  }, []);

  if (loading) {
    return <div className="text-center py-16">Chargement...</div>;
  }

  if (error) {
    return <div className="text-center py-16 text-powder-pink">{error}</div>;
  }

  return (
    <>
      <NavBar />
      <PageContainer>
        <div className="max-w-6xl mx-auto py-12 px-4 sm:px-6 lg:px-8">
          <h1 className="text-3xl font-serif font-medium text-soft-brown mb-6">Nos réalisations</h1>

          {/* Grille des réalisations */}
          <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-8">
            {realisations.length > 0 ? (
              <AnimatePresence>
                {realisations.map((realisation, index) => (
                  <motion.div
                    key={realisation.id}
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    exit={{ opacity: 0, y: -20 }}
                    transition={{ duration: 0.5, delay: index * 0.1 }}
                    className="bg-light-beige p-4 rounded-lg shadow-md"
                  >
                    {realisation.photos && realisation.photos.length > 0 ? (
                      <img
                        src={realisation.photos[0]}  // Première photo comme couverture
                        alt={realisation.titre}
                        className="w-full h-48 object-cover rounded-md mb-4"
                      />
                    ) : (
                      <div className="w-full h-48 bg-soft-brown/10 rounded-md mb-4 flex items-center justify-center">
                        <span className="text-soft-brown/50">Aucune photo</span>
                      </div>
                    )}
                    <h2 className="text-xl font-medium text-soft-brown mb-2">{realisation.titre}</h2>
                    <p className="text-soft-brown/70 text-sm mb-2 flex items-center">
                      <Calendar className="h-4 w-4 mr-1" />
                      {new Date(realisation.date_creation).toLocaleDateString('fr-FR', {
                        day: '2-digit',
                        month: 'long',
                        year: 'numeric',
                      })}
                    </p>
                    <p className="text-soft-brown/90 mb-2 line-clamp-2">{realisation.description}</p>
                    <p className="text-soft-brown/70 text-sm">Service : {realisation.service.nom}</p>
                  </motion.div>
                ))}
              </AnimatePresence>
            ) : (
              <p className="text-center text-soft-brown/70 col-span-full">Aucune réalisation disponible pour le moment.</p>
            )}
          </div>
        </div>
      </PageContainer>
      <Footer />
    </>
  );
};

export default RealisationsPage;

--- pages\ServiceDetailPage.tsx ---
import React, { useState, useEffect } from 'react';
import { useParams, useNavigate, Link } from 'react-router-dom';
import NavBar from '../components/NavBar';
import Footer from '../components/Footer';
import PageContainer from '../components/PageContainer';
import ButtonPrimary from '../components/ButtonPrimary';
import { ModalContainer } from '../components/ModalContainer';
import { getService, createDevis } from '../services/api';
import { ChevronLeft } from 'lucide-react';
import { motion } from 'framer-motion';

interface Service {
  id: string;
  nom: string;
  description: string;
  photos: string[];
  is_active: boolean;
  date_creation: string;
}

const ServiceDetailPage: React.FC = () => {
  const { id } = useParams<{ id: string }>();
  const navigate = useNavigate();
  const [service, setService] = useState<Service | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [devisDescription, setDevisDescription] = useState('');
  const [prixPropose, setPrixPropose] = useState('');
  const [devisLoading, setDevisLoading] = useState(false);

  useEffect(() => {
    const fetchService = async () => {
      try {
        const response = await getService(id!);
        setService(response.data);
        setLoading(false);
      } catch (err: any) {
        console.error('Erreur lors du chargement du service:', err.response?.status, err.response?.data);
        setError('Erreur lors du chargement du service.');
        setLoading(false);
      }
    };

    if (id) fetchService();
  }, [id]);

  const handleRequestDevis = async () => {
    const token = localStorage.getItem('access_token');
    if (!token) {
      navigate('/auth');
      return;
    }

    if (!devisDescription.trim()) {
      alert('Veuillez entrer une description pour votre demande de devis.');
      return;
    }

    setDevisLoading(true);
    try {
      console.log('Envoi de la requête devis:', { service: id, description: devisDescription });
      await createDevis({
        service: id!,
        description: devisDescription,
        prix_propose: prixPropose ? parseFloat(prixPropose) : null, // Envoi null si vide
      });
      alert('Devis demandé avec succès ! Vous serez contacté prochainement.');
      setDevisDescription('');
      setPrixPropose('');
      setIsModalOpen(false);
    } catch (err: any) {
      console.error('Erreur lors de la demande de devis:', err.response?.status, err.response?.data);
      alert('Erreur lors de la demande de devis : ' + (err.response?.data?.detail || JSON.stringify(err.response?.data) || 'Vérifiez votre connexion.'));
    } finally {
      setDevisLoading(false);
    }
  };

  if (loading) {
    return <div className="text-center py-16">Chargement...</div>;
  }

  if (error || !service) {
    return <div className="text-center py-16 text-powder-pink">{error || 'Service non trouvé'}</div>;
  }

  return (
    <>
      <NavBar />
      <PageContainer>
        <div className="max-w-6xl mx-auto py-12 px-4 sm:px-6 lg:px-8">
          {/* En-tête */}
          <motion.div
            className="relative h-64 bg-soft-green overflow-hidden mb-12"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ duration: 0.8 }}
          >
            <img
              src={service.photos[0] || '/images/service-placeholder.jpg'}
              alt={service.nom}
              className="w-full h-full object-cover opacity-50"
            />
            <div className="absolute inset-0 bg-gradient-to-r from-soft-green/80 to-transparent" />
            <div className="absolute inset-0 flex items-center justify-center">
              <h1 className="text-5xl font-serif font-medium text-white text-center">{service.nom}</h1>
            </div>
          </motion.div>

          {/* Contenu */}
          <div className="bg-light-beige p-6 rounded-lg shadow-md">
            <h2 className="text-2xl font-medium text-soft-brown mb-4">Description</h2>
            <p className="text-soft-brown/90 mb-6">{service.description}</p>
            <div className="flex space-x-4">
              <ButtonPrimary
                onClick={() => setIsModalOpen(true)}
                className="bg-soft-green hover:bg-soft-green/90"
              >
                Demander un devis
              </ButtonPrimary>
              <Link to="/services" className="flex items-center text-soft-brown hover:text-soft-green">
                <ChevronLeft className="h-4 w-4 mr-1" />
                Retour aux services
              </Link>
            </div>
          </div>

          {/* Modal pour le devis */}
          <ModalContainer isOpen={isModalOpen} onClose={() => setIsModalOpen(false)}>
            <h3 className="text-xl font-medium text-soft-brown mb-4">Demander un devis</h3>
            <p className="text-soft-brown/70 mb-4">Décrivez vos besoins pour ce service :</p>
            <textarea
              value={devisDescription}
              onChange={(e) => setDevisDescription(e.target.value)}
              placeholder="Entrez les détails de votre demande..."
              className="w-full p-2 border border-soft-brown/30 rounded-md focus:outline-none focus:ring-2 focus:ring-soft-green bg-white text-soft-brown h-32 resize-none"
            />
            <input
              type="number"
              value={prixPropose}
              onChange={(e) => setPrixPropose(e.target.value)}
              placeholder="Prix proposé (optionnel, en FCFA)"
              className="w-full p-2 border border-soft-brown/30 rounded-md focus:outline-none focus:ring-2 focus:ring-soft-green bg-white text-soft-brown"
              step="0.01"
              min="0"
            />
            <ButtonPrimary
              onClick={handleRequestDevis}
              disabled={devisLoading}
              className="w-full mt-4 bg-soft-green hover:bg-soft-green/90"
            >
              {devisLoading ? 'Envoi...' : 'Envoyer la demande'}
            </ButtonPrimary>
          </ModalContainer>
        </div>
      </PageContainer>
      <Footer />
    </>
  );
};

export default ServiceDetailPage;

--- pages\ServicesPage.tsx ---
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import NavBar from '../components/NavBar';
import Footer from '../components/Footer';
import PageContainer from '../components/PageContainer';
import ButtonPrimary from '../components/ButtonPrimary';
import { getServices } from '../services/api';
import { motion, AnimatePresence } from 'framer-motion';

interface Service {
  id: string;
  nom: string;
  description: string;
  photos: string[];
  is_active: boolean;
  date_creation: string;
}

const ServicesPage: React.FC = () => {
  const navigate = useNavigate();
  const [services, setServices] = useState<Service[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchServices = async () => {
      try {
        const response = await getServices();
        setServices(response.data.results);
        setLoading(false);
      } catch (err: any) {
        console.error('Erreur lors du chargement des services:', err.response?.status, err.response?.data);
        setError('Erreur lors du chargement des services.');
        setLoading(false);
      }
    };

    fetchServices();
  }, []);

  if (loading) {
    return <div className="text-center py-16">Chargement...</div>;
  }

  if (error) {
    return <div className="text-center py-16 text-powder-pink">{error}</div>;
  }

  return (
    <>
      <NavBar />
      <PageContainer>
        <div className="max-w-6xl mx-auto py-12 px-4 sm:px-6 lg:px-8">
          {/* En-tête */}
          <div className="relative h-64 bg-soft-green overflow-hidden mb-12">
            <img
              src="/images/services-header.jpg"
              alt="Services floraux"
              className="w-full h-full object-cover opacity-50"
            />
            <div className="absolute inset-0 bg-gradient-to-r from-soft-green/80 to-transparent" />
            <div className="absolute inset-0 flex items-center justify-center">
              <motion.h1
                className="text-5xl font-serif font-medium text-white text-center"
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.8 }}
              >
                Nos services floraux
              </motion.h1>
            </div>
          </div>

          {/* Liste des services */}
          <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-8">
            <AnimatePresence>
              {services.length > 0 ? (
                services.map((service, index) => (
                  <motion.div
                    key={service.id}
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    exit={{ opacity: 0, y: -20 }}
                    transition={{ duration: 0.5, delay: index * 0.1 }}
                  >
                    <div className="bg-light-beige p-4 rounded-lg shadow-md hover:shadow-lg transition-shadow">
                      <img
                        src={service.photos[0] || '/images/service-placeholder.jpg'}
                        alt={service.nom}
                        className="w-full h-48 object-cover rounded-md mb-4"
                      />
                      <h2 className="text-lg font-medium text-soft-brown mb-2">{service.nom}</h2>
                      <p className="text-soft-brown/70 mb-4 line-clamp-3">{service.description}</p>
                      <ButtonPrimary
                        onClick={() => navigate(`/services/${service.id}`)}
                        className="w-full bg-soft-green hover:bg-soft-green/90"
                      >
                        En savoir plus
                      </ButtonPrimary>
                    </div>
                  </motion.div>
                ))
              ) : (
                <motion.p
                  className="text-center text-soft-brown/70 col-span-full text-lg"
                  initial={{ opacity: 0 }}
                  animate={{ opacity: 1 }}
                  transition={{ duration: 0.5 }}
                >
                  Aucun service disponible pour le moment.
                </motion.p>
              )}
            </AnimatePresence>
          </div>
        </div>
      </PageContainer>
      <Footer />
    </>
  );
};

export default ServicesPage;

--- pages\WishlistPage.tsx ---
import React, { useState, useEffect } from 'react';
import { useNavigate, Link } from 'react-router-dom';
import NavBar from '../components/NavBar';
import Footer from '../components/Footer';
import PageContainer from '../components/PageContainer';
import ButtonPrimary from '../components/ButtonPrimary';
import { getWishlist, supprimerProduitWishlist } from '../services/api';
import { motion, AnimatePresence } from 'framer-motion';

interface Photo {
  image: string ;
}

interface Produit {
  id: string;
  nom: string;
  prix: string;
  photos: Photo[];
}

interface Wishlist {
  id: string;
  produits: Produit[];
}

const WishlistPage: React.FC = () => {
  const navigate = useNavigate();
  const [wishlist, setWishlist] = useState<Wishlist | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [actionLoading, setActionLoading] = useState<string | null>(null);

  useEffect(() => {
    const fetchWishlist = async () => {
      const token = localStorage.getItem('access_token');
      if (!token) {
        navigate('/auth');
        return;
      }

      try {
        const response = await getWishlist();
        console.log('Wishlist:', response.data);
        // Supposons que l’API renvoie une liste, prenons le premier élément (unique par utilisateur)
        setWishlist(response.data.results.length > 0 ? response.data.results[0] : { id: '', produits: [] });
        setLoading(false);
      } catch (err: any) {
        console.error('Erreur lors du chargement:', err.response?.status, err.response?.data);
        setError('Erreur lors du chargement de la liste de souhaits.');
        setLoading(false);
        if (err.response?.status === 401) {
          localStorage.removeItem('access_token');
          navigate('/auth');
        }
      }
    };

    fetchWishlist();
  }, [navigate]);

  const handleSupprimerProduit = async (produitId: string) => {
    setActionLoading(produitId);
    try {
      await supprimerProduitWishlist(produitId);
      const response = await getWishlist();
      setWishlist(response.data.results.length > 0 ? response.data.results[0] : { id: '', produits: [] });
      alert('Produit supprimé de la liste de souhaits.');
    } catch (err: any) {
      console.error('Erreur lors de la suppression:', err.response?.data);
      alert('Erreur lors de la suppression : ' + (err.response?.data?.error || 'Vérifiez votre connexion.'));
    } finally {
      setActionLoading(null);
    }
  };

  if (loading) {
    return <div className="text-center py-16">Chargement...</div>;
  }

  if (error) {
    return (
      <div className="text-center py-16 text-powder-pink">
        {error} <Link to="/auth" className="underline">Connectez-vous</Link>
      </div>
    );
  }

  return (
    <>
      <NavBar />
      <PageContainer>
        <div className="max-w-6xl mx-auto py-12 px-4 sm:px-6 lg:px-8">
          <h1 className="text-3xl font-serif font-medium text-soft-brown mb-6">Ma liste de souhaits</h1>

          {/* Liste des produits dans la wishlist */}
          <div className="space-y-6">
            {wishlist && wishlist.produits.length > 0 ? (
              <AnimatePresence>
                {wishlist.produits.map((produit) => (
                  <motion.div
                    key={produit.id}
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    exit={{ opacity: 0, y: -20 }}
                    transition={{ duration: 0.5 }}
                    className="bg-light-beige p-4 rounded-lg shadow-md flex items-center justify-between"
                  >
                    <div className="flex items-center space-x-4">
                      <img
                        src={produit.photos[0].image || '/images/placeholder-image.jpg'}
                        alt={produit.nom}
                        className="w-16 h-16 object-cover rounded-md"
                      />
                      <div>
                        <h2 className="text-lg font-medium text-soft-brown">{produit.nom}</h2>
                        <p className="text-soft-brown mb-2">Prix : {produit.prix} FCFA</p>
                      </div>
                    </div>
                    <ButtonPrimary
                      onClick={() => handleSupprimerProduit(produit.id)}
                      disabled={actionLoading === produit.id}
                      className="bg-powder-pink hover:bg-powder-pink/90"
                    >
                      {actionLoading === produit.id ? 'Suppression...' : 'Supprimer'}
                    </ButtonPrimary>
                  </motion.div>
                ))}
              </AnimatePresence>
            ) : (
              <div className="text-center">
                <p className="text-soft-brown/70 mb-4">Votre liste de souhaits est vide.</p>
                <Link to="/products">
                  <ButtonPrimary className="bg-soft-green hover:bg-soft-green/90">
                    Découvrir nos produits
                  </ButtonPrimary>
                </Link>
              </div>
            )}
          </div>
        </div>
      </PageContainer>
      <Footer />
    </>
  );
};

export default WishlistPage;

--- services\api.ts ---
import axios from 'axios';

const API_URL = 'http://chezflora-api.onrender.com/api/';

const api = axios.create({
  baseURL: API_URL,
  headers: { 'Content-Type': 'application/json' },
});

// Liste des endpoints publics exacts (sans sous-routes)
const publicEndpoints = [
  '/token/',
  '/register/',
  '/verify-otp/',
  '/resend-otp/',
  '/reset_password/',
  '/produits/',  // Liste des produits
  '/categories/',
  '/services/',  // Liste des services
  '/ateliers/',  // Liste des ateliers
  '/articles/',
  '/realisations/',
  '/parametres/public/',
  '/promotions/'
];

api.interceptors.request.use(
  (config) => {
    const token = localStorage.getItem('access_token');
    const urlPath = config.url || '';

    // Vérifier si l’URL est un endpoint public exact (pas juste un préfixe)
    const isPublic = publicEndpoints.some(endpoint => {
      // Correspondance exacte ou avec un ID simple (ex. /produits/<id>/)
      if (endpoint.endsWith('/')) {
        return urlPath === endpoint || urlPath.startsWith(endpoint + 'detail/');
      }
      return urlPath === endpoint;
    });

    if (token && !isPublic) {
      config.headers.Authorization = `Bearer ${token}`;
      console.log('Token envoyé pour:', urlPath, 'Token:', token);
    } else {
      console.log('Pas de token envoyé pour:', urlPath, 'Public:', isPublic, 'Token présent:', !!token);
    }
    return config;
  },
  (error) => Promise.reject(error)
);

// Gestion des erreurs 401 (token expiré)
api.interceptors.response.use(
  (response) => response,
  (error) => {
    if (error.response?.status === 401) {
      console.log('Erreur 401 détectée, déconnexion...');
      localStorage.removeItem('access_token');
      window.location.href = '/auth'; // Redirection vers la page de connexion
    }
    return Promise.reject(error);
  }
);

export const login = (data: { username: string; password: string }) => api.post('/token/', data);
export const register = (data: { username: string; email: string; password: string }) => api.post('/register/', data);
export const verifyOtp = (data: { user_id: string; code: string }) => api.post('/verify-otp/', data);
export const resendOtp = (data: { email: string }) => api.post('/resend-otp/', data);
export const resetPassword = (data: { email: string }) => api.post('/reset_password/', data);
export const getUserProfile = () => api.get('/utilisateurs/me/');
export const getPublicParameters = () => api.get('/parametres/public/');
export const getProducts = (params?: { categorie?: number }) => api.get('/produits/', { params });
export const getProduct = (id: string) => api.get(`/produits/${id}/`);
export const getCategories = () => api.get('/categories/');
export const getServices = () => api.get('/services/');
export const getService = (id: string) => api.get(`/services/${id}/`)
export const getWorkshops = () => api.get('/ateliers/');
export const getArticles = () => api.get('/articles/');
export const getRealisations = () => api.get('/realisations/');
export const getPromotions = () => api.get('/promotions/');
export const getCart = () => api.get('/paniers/mon_panier/');
export const addToCart = (panierId: string, data: { produit_id: string; quantite: number }) => 
  api.post(`/paniers/${panierId}/ajouter_produit/`, data);
// Fonction validateCart mise à jour
export const validateCart = (panierId: string, data?: { adresse_id: string }) =>
  api.post(`/paniers/${panierId}/valider_panier/`, data || {});export const updateCartQuantity = (panierId: string, data: { produit_id: string; quantite: number }) =>
  api.post(`/paniers/${panierId}/modifier_quantite/`, data);
export const getOrders = () => api.get('/commandes/');
export const getOrder = (id: string) => api.get(`/commandes/${id}/`);

export const removeFromCart = (panierId: string, data: { produit_id: string }) =>
  api.post(`/paniers/${panierId}/supprimer_produit/`, data);

export const updateUserProfile = (data: { username?: string; email?: string }) => api.put('/utilisateur/me/', data);
export const changePassword = (data: { old_password: string; new_password: string; confirm_password: string }) =>
  api.post('/change-password/', data);
export const deleteAccount = () => api.delete('/utilisateurs/me/');

export const getAddresses = () => api.get('/adresses/');
export const createAddress = (data: { nom: string; rue: string; ville: string; code_postal: string; pays: string }) =>
  api.post('/adresses/', data);

export const createDevis = (data: { service: string; description: string, prix_propose: number|null}) => api.post('/devis/', data);
export const getDevis = () => api.get('/devis')

export const getAbonnements = () => api.get('/abonnements/');
export const createAbonnement = (data: { type: string; produits: string[] }) => api.post('/abonnements/', data);
export const cancelAbonnement = (id: string) => api.delete(`/abonnements/${id}/`);

export const getAteliers = () => api.get('/ateliers/');
export const inscrireAtelier = (atelierId: string) => api.post(`/ateliers/${atelierId}/s_inscrire/`);
export const desinscrireAtelier = (atelierId: string) => api.post(`/ateliers/${atelierId}/desinscription/`);

export const getWishlist = () => api.get('/wishlist/');
export const ajouterProduitWishlist = (produitId: string) => api.post('/wishlist/ajouter_produit/', { produit_id: produitId });
export const supprimerProduitWishlist = (produitId: string) => api.post('/wishlist/supprimer_produit/', { produit_id: produitId });

export const sendContactMessage = (data: { name: string; email: string; message: string }) => api.post('/contact/', data);

export const cancelOrder = (id: string) => api.post(`/commandes/${id}/cancel/`);

export const getArticle = (id: string) => api.get(`/articles/${id}/`);
export const createCommentaire = (data: { article: string; texte: string; parent?: string }) => api.post('/commentaires/', data);


export const getUsers = (params?: {
  page?: number;
  per_page?: number;
  search?: string;
  role?: string;
  is_active?: string; // Ajout
  is_banned?: string; // Ajout
}) => api.get('/utilisateurs/', { params });

// Les autres fonctions restent inchangées
export const createUser = (data: { email: string; username: string; password: string; role: string }) =>
  api.post('/utilisateurs/', data);

export const updateUser = (id: string, data: { email?: string; username?: string; role?: string; is_active?: boolean; is_banned?: boolean }) =>
  api.put(`/utilisateurs/${id}/`, data);

export const deleteUser = (id: string) => api.delete(`/utilisateurs/${id}/`);

export const getUserStats = (params?: { days?: number }) =>
  api.get('/utilisateurs/stats/', { params });

export const deleteWishlist = (id: string) => api.delete(`/wishlist/${id}/`);

export const getCartCount = async () => {
  const cart = await api.get("/paniers");
  return cart.data.results[0].items.length
}

export default api;

--- theme\theme.ts ---
import { createTheme } from '@mui/material/styles';

const theme = createTheme({
  palette: {
    primary: { main: '#4A704A', light: '#A3C1A3' }, // soft-green, pastel-green
    secondary: { main: '#E07B91', light: '#F4B8C1' }, // powder-pink, pastel-pink
    background: { default: '#F9F5F0', paper: '#FDF6E3' }, // lightBg, lightCard
    text: { primary: '#5C4033', secondary: '#6B7280' }, // soft-brown, darkBorder
    error: { main: '#B71C1C' }, // Nouvelle couleur d’erreur
  },
  typography: {
    fontFamily: 'Roboto, sans-serif',
    h4: { fontFamily: 'Lora, serif' },
  },
});

export default theme;

